{"version":3,"sources":["ng://shared-component-swagger-client/variables.ts","ng://shared-component-swagger-client/configuration.ts","ng://shared-component-swagger-client/api.module.ts","ng://shared-component-swagger-client/api/api.ts"],"names":["BASE_PATH","InjectionToken","Configuration","configurationParameters","this","apiKeys","username","password","accessToken","basePath","withCredentials","prototype","selectHeaderContentType","contentTypes","_this","length","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","ApiModule","parentModule","http","Error","forRoot","configurationFactory","ngModule","providers","provide","useFactory","core","HttpClient","imports","csv","tsv","ssv","pipes"],"mappings":"qYAEaA,EAAY,IAAIC,EAAAA,eAAuB,yBCehD,SAAAC,EAAYC,QAAA,IAAAA,IAAAA,EAAA,IACRC,KAAKC,QAAUF,EAAwBE,QACvCD,KAAKE,SAAWH,EAAwBG,SACxCF,KAAKG,SAAWJ,EAAwBI,SACxCH,KAAKI,YAAcL,EAAwBK,YAC3CJ,KAAKK,SAAWN,EAAwBM,SACxCL,KAAKM,gBAAkBP,EAAwBO,gBAuDvD,OA7CWR,EAAAS,UAAAC,wBAAP,SAAgCC,GAAhC,IAAAC,EAAAV,KACI,GAA2B,GAAvBS,EAAaE,OAAjB,CAIA,IAAIC,EAAOH,EAAaI,MAAK,SAAAC,GAAK,OAAAJ,EAAKK,WAAWD,MAClD,YAAaE,IAATJ,EACOH,EAAa,GAEjBG,IAUJd,EAAAS,UAAAU,mBAAP,SAA0BC,GAA1B,IAAAR,EAAAV,KACI,GAAsB,GAAlBkB,EAAQP,OAAZ,CAIA,IAAIC,EAAOM,EAAQL,MAAK,SAAAC,GAAK,OAAAJ,EAAKK,WAAWD,MAC7C,YAAaE,IAATJ,EACOM,EAAQ,GAEZN,IAaJd,EAAAS,UAAAQ,WAAP,SAAkBI,GACd,IAAMC,EAAmB,IAAIC,OAAO,8DAAiE,KACrG,OAAe,MAARF,IAAiBC,EAASE,KAAKH,IAAgC,gCAAvBA,EAAKI,gBAE5DzB,kBCzDI,SAAA0B,EAAqCC,EACZC,GACrB,GAAID,EACA,MAAM,IAAIE,MAAM,oEAEpB,IAAKD,EACD,MAAM,IAAIC,MAAM,gIAbVH,EAAAI,QAAd,SAAsBC,GAClB,MAAO,CACHC,SAAUN,EACVO,UAAW,CAAE,CAAEC,QAASlC,EAAemC,WAAYJ,yCAJlDL,oEAAAA,GAASU,EAAA,YAQiCV,EAAS,IAAAU,EAAA,YAAAR,EAAAS,WAAA,KAAAJ,UAXnD,GACPK,QAAA,CAJU,kBCPI,oDHGc,CAC9BC,IAAO,IACPC,IAAO,MACPC,IAAO,IACPC,MAAS","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n     ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","export const APIS = [];\n"]}