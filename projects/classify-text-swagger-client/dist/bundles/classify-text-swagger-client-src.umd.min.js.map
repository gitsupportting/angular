{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://classify-text-swagger-client/src/encoder.ts","ng://classify-text-swagger-client/src/variables.ts","ng://classify-text-swagger-client/src/configuration.ts","ng://classify-text-swagger-client/src/api/default.service.ts","ng://classify-text-swagger-client/src/api/api.ts","ng://classify-text-swagger-client/src/model/textInput.ts","ng://classify-text-swagger-client/src/api.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","CustomHttpUrlEncodingCodec","_super","__","this","constructor","prototype","create","__extends","encodeKey","k","replace","encodeValue","v","HttpUrlEncodingCodec","BASE_PATH","InjectionToken","Configuration","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","selectHeaderContentType","contentTypes","_this","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","DefaultService","httpClient","configuration","defaultHeaders","HttpHeaders","canConsumeForm","consumes","consumes_1","consumes_1_1","classifyLanguage","observe","reportProgress","headers","httpHeaderAcceptSelected","set","request","classifyText","body","extended","queryParameters","HttpParams","encoder","httpContentTypeSelected","params","classifyTextBulk","statusGet","core","http","HttpClient","factory","Éµfac","APIS","TextInput","ContentTypeEnum","SHORTTEXT","LONGTEXT","USERNAME","ApiModule","parentModule","Error","forRoot","configurationFactory","ngModule","providers","provide","useFactory","imports","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Classify text into risk scores\n * Will take text and classify it via risk  \n *\n * OpenAPI spec version: 2.0.1\n * Contact: support@twohat.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { LanguageClassifiedOutput } from '../model/languageClassifiedOutput';\nimport { TextClassifiedBulkOutput } from '../model/textClassifiedBulkOutput';\nimport { TextClassifiedOutput } from '../model/textClassifiedOutput';\nimport { TextInput } from '../model/textInput';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefaultService {\n\n    protected basePath = 'https://virtserver.swaggerhub.com/twohat/classifyText/2.0.1';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * perform language identification\n     * Given a piece of text it will analyze it to see what languages it might be.  Unlike other language identification trained on long properly formatted text (a relatively easy task) this one is trained on short text with frequent misspellings and internet slang  NOTE This item is a POST for PII reasons to prevent caching of GET requests \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public classifyLanguage(observe?: 'body', reportProgress?: boolean): Observable<LanguageClassifiedOutput>;\n    public classifyLanguage(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LanguageClassifiedOutput>>;\n    public classifyLanguage(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LanguageClassifiedOutput>>;\n    public classifyLanguage(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.request<LanguageClassifiedOutput>('post',`${this.basePath}/classify/language`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * classify text\n     * \n     * @param body \n     * @param extended If extended&#x3D;true in the request it will output the longer details of all things it considered.  This is quite a bit more costly in latency and CPU to run so we advise to only call it when needed.  As such it will be billed as 2 requests instead of one. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public classifyText(body?: TextInput, extended?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TextClassifiedOutput>;\n    public classifyText(body?: TextInput, extended?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TextClassifiedOutput>>;\n    public classifyText(body?: TextInput, extended?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TextClassifiedOutput>>;\n    public classifyText(body?: TextInput, extended?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (extended !== undefined && extended !== null) {\n            queryParameters = queryParameters.set('extended', <any>extended);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<TextClassifiedOutput>('post',`${this.basePath}/classify/text`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * classify text\n     * Same as /classify/text but does so in bulk4\n     * @param body \n     * @param extended If extended&#x3D;true in the request it will output the longer details of all things it considered.  This is quite a bit more costly in latency and CPU to run so we advise to only call it when needed.  As such it will be billed as 2 requests instead of one. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public classifyTextBulk(body?: Array<TextInput>, extended?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TextClassifiedBulkOutput>;\n    public classifyTextBulk(body?: Array<TextInput>, extended?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TextClassifiedBulkOutput>>;\n    public classifyTextBulk(body?: Array<TextInput>, extended?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TextClassifiedBulkOutput>>;\n    public classifyTextBulk(body?: Array<TextInput>, extended?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (extended !== undefined && extended !== null) {\n            queryParameters = queryParameters.set('extended', <any>extended);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<TextClassifiedBulkOutput>('post',`${this.basePath}/classify/textBulk`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Is the service running\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public statusGet(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public statusGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public statusGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public statusGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/status`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","/**\n * Classify text into risk scores\n * Will take text and classify it via risk\n *\n * OpenAPI spec version: 2.0.1\n * Contact: support@twohat.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { ConfigTextClassifier } from './configTextClassifier';\nimport { Rule } from './rule';\nimport { ClientId } from './clientId';\nimport { LanguageCode } from './languageCode';\nimport { PreField } from './preField';\nimport { TextField } from './textField';\n\nexport interface TextInput {\n    clientId: ClientId;\n    /**\n     * What kind of UGC are you classifiying\n     */\n    contentType?: TextInput.ContentTypeEnum;\n    language: LanguageCode;\n    text: TextField;\n    pre?: PreField;\n    config?: ConfigTextClassifier;\n    /**\n     * Pass in potential rules so you can test the impact to the system\n     */\n    testRules?: Array<Rule>;\n}\nexport namespace TextInput {\n    export type ContentTypeEnum = 'SHORT_TEXT' | 'LONG_TEXT' | 'USERNAME';\n    export const ContentTypeEnum = {\n        SHORTTEXT: 'SHORT_TEXT' as ContentTypeEnum,\n        LONGTEXT: 'LONG_TEXT' as ContentTypeEnum,\n        USERNAME: 'USERNAME' as ContentTypeEnum\n    };\n}","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"]}