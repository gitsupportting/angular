//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"default.serviceInterface.js","sourceRoot":"ng://language-tasks-swagger-client/","sources":["api/default.serviceInterface.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Inbox API\r\n * Manage work for human moderators by adding, checking out and completing work items. Store User Generated Content to the database.  This will store it twice, once in short-term storage in it's exact form amd again in long term storage in it's redacted and pseudonymized form \r\n *\r\n * OpenAPI spec version: 2.1.1\r\n * Contact: support@twohat.com\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { HttpHeaders }                                       from '@angular/common/http';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\n\r\nimport { Ai } from '../model/ai';\r\nimport { Body } from '../model/body';\r\nimport { Body1 } from '../model/body1';\r\nimport { Body2 } from '../model/body2';\r\nimport { Checkout } from '../model/checkout';\r\nimport { Comment } from '../model/comment';\r\nimport { CommentInput } from '../model/commentInput';\r\nimport { Decision } from '../model/decision';\r\nimport { ExampleInput } from '../model/exampleInput';\r\nimport { ExampleOutput } from '../model/exampleOutput';\r\nimport { InlineResponse200 } from '../model/inlineResponse200';\r\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\r\nimport { InlineResponse201 } from '../model/inlineResponse201';\r\nimport { ModeratorId } from '../model/moderatorId';\r\nimport { Queue } from '../model/queue';\r\nimport { RuleAuditInput } from '../model/ruleAuditInput';\r\nimport { RuleAuditOutput } from '../model/ruleAuditOutput';\r\nimport { SpellingMistakeInput } from '../model/spellingMistakeInput';\r\nimport { SpellingMistakeOutput } from '../model/spellingMistakeOutput';\r\nimport { TaskInput } from '../model/taskInput';\r\nimport { TaskOutput } from '../model/taskOutput';\r\nimport { Topics } from '../model/topics';\r\nimport { UsernameInput } from '../model/usernameInput';\r\nimport { UsernameOutput } from '../model/usernameOutput';\r\n\r\n\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\nexport interface DefaultServiceInterface {\r\n    defaultHeaders: HttpHeaders;\r\n    configuration: Configuration;\r\n    \r\n\r\n    /**\r\n    * Add a comment to this content item\r\n    * Comments are ways to leave a note to say why a person made the decision they did.  Or it could be a question or answer trying to get help on an item. \r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param body \r\n    */\r\n    addComment(queueId: string, contentId: string, body?: CommentInput, extraHttpRequestParams?: any): Observable<Comment>;\r\n\r\n    /**\r\n    * Add examples of text to be reviewed\r\n    * Add an example of short text for Quality Control.  This will later be used for  - Regression Tests | Once you mark an item as wrong and it is fixed you will want to be able to run it through the filter again to ensure the errors are not reproduced by creating future rules. - Examples | When reviewing things like spelling mistakes or rules it makes a huge difference to look at how words are really used.  For instance one might think that \\&quot;made out\\&quot; is sexual till they see the example \\&quot;made out of plastic\\&quot; - Training AI | We can improve the filter in the future by training AI to predict the risks and labels you provide and in so doing combine a rules based approach you can control with the fuzzy matching of AI to find similar things. \r\n    * @param body \r\n    * @param updateData If the item already exists should we update the values of the body element\r\n    */\r\n    addExamples(body?: Array<ExampleInput>, updateData?: boolean, extraHttpRequestParams?: any): Observable<InlineResponse201>;\r\n\r\n    /**\r\n    * Add rules to be audited\r\n    * Our primary purpose is as a content filter.  To achieve this you can manually add word patterns to the system.  But how do you know if it is creating errors like false positives  To handle that we count how many times that rule is used in your new content and on key points like when it is said 100 times we bring it up here for review.  In this way you know you are working on the most impactful things first.  If the rule has already been added it will increase it&#x27;s priority.  Note that the request accepts an array of minimum 1 to maximum 100 items so you can do a bulk insert. \r\n    * @param body \r\n    * @param updateData If the item already exists should we update the values of the body element\r\n    */\r\n    addRuleAuditItems(body?: Array<RuleAuditInput>, updateData?: boolean, extraHttpRequestParams?: any): Observable<InlineResponse201>;\r\n\r\n    /**\r\n    * Add a common spelling mistake for review\r\n    * One of the greatest impacts early on when you use the system is spelling mistakes, most often words unique to your product.  We automatically count which words are used and how often.  If it is frequently misspelled we will escalate it here. \r\n    * @param body \r\n    * @param updateData If the item already exists should we update the values of the body element\r\n    */\r\n    addSpelling(body?: Array<SpellingMistakeInput>, updateData?: boolean, extraHttpRequestParams?: any): Observable<InlineResponse201>;\r\n\r\n    /**\r\n    * Add a task for the team to do work on\r\n    * You can create a task to work on.  For example split all the sexting words into sexual body parts and sexual activity. \r\n    * @param body \r\n    * @param updateData If the item already exists should we update the values of the body element\r\n    */\r\n    addTaskItems(body?: Array<TaskInput>, updateData?: boolean, extraHttpRequestParams?: any): Observable<InlineResponse201>;\r\n\r\n    /**\r\n    * Add usernames to be reviewed\r\n    * Add an example of a username for Quality Control.  This will later be used for  - Regression Tests | Once you mark an item as wrong and it is fixed you will want to be able to run it through the filter again to ensure the errors are not reproduced by creating future rules. - Training AI | We can improve the filter in the future by training AI to predict the risks and labels you provide and in so doing combine a rules based approach you can control with the fuzzy matching of AI to find similar things. \r\n    * @param body \r\n    * @param updateData If the item already exists should we update the values of the body element\r\n    */\r\n    addUseranmes(body?: Array<UsernameInput>, updateData?: boolean, extraHttpRequestParams?: any): Observable<InlineResponse201>;\r\n\r\n    /**\r\n    * Delete all items in this queue\r\n    * As this may take some time and this server may be scaled out we will setup a long running task to accomplish this and that will restart if doesn&#x27;t finish.\r\n    * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\r\n    * @param languages Which languages does this apply to\r\n    */\r\n    deletExampleItems(clientId?: number, languages?: Array<string>, extraHttpRequestParams?: any): Observable<{}>;\r\n\r\n    /**\r\n    * Release all checkouts on a queue\r\n    * Sometimes people go for coffee and still have items checked out.  When you get down to a few items left this can be a problem.  This will free up all non-expiring checkouts. \r\n    * @param queueId The unique identifier for this queue\r\n    * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\r\n    * @param languages Which languages does this apply to\r\n    */\r\n    deleteAllCheckouts(queueId: string, clientId?: number, languages?: Array<string>, extraHttpRequestParams?: any): Observable<InlineResponse2001>;\r\n\r\n    /**\r\n    * Delete a comment\r\n    * Remove a comment\r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param commentId The unique identifier for the comment\r\n    */\r\n    deleteComment(queueId: string, contentId: string, commentId: string, extraHttpRequestParams?: any): Observable<InlineResponse2001>;\r\n\r\n    /**\r\n    * Abandon a checkout\r\n    * Remove a checkout assigned to you without doing any work.\r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    */\r\n    deleteItemCheckout(queueId: string, contentId: string, extraHttpRequestParams?: any): Observable<InlineResponse2001>;\r\n\r\n    /**\r\n    * Delete all items in this queue\r\n    * As this may take some time and this server may be scaled out we will setup a long running task to accomplish this and that will restart if doesn&#x27;t finish.\r\n    * @param queueId The unique identifier for this queue\r\n    * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\r\n    * @param languages Which languages does this apply to\r\n    */\r\n    deleteItems(queueId: string, clientId?: number, languages?: Array<string>, extraHttpRequestParams?: any): Observable<InlineResponse200>;\r\n\r\n    /**\r\n    * Delete a param\r\n    * Delete a param and use the default instead\r\n    * @param queueId The unique identifier for this queue\r\n    * @param paramId A custom configuration for a client\r\n    */\r\n    deleteParam(queueId: string, paramId: string, extraHttpRequestParams?: any): Observable<{}>;\r\n\r\n    /**\r\n    * Delete all items in this queue\r\n    * As this may take some time and this server may be scaled out we will setup a long running task to accomplish this and that will restart if doesn&#x27;t finish.\r\n    * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\r\n    * @param languages Which languages does this apply to\r\n    */\r\n    deleteRuleAuditItems(clientId?: number, languages?: Array<string>, extraHttpRequestParams?: any): Observable<{}>;\r\n\r\n    /**\r\n    * Delete all items in this queue\r\n    * As this may take some time and this server may be scaled out we will setup a long running task to accomplish this and that will restart if doesn&#x27;t finish.\r\n    * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\r\n    * @param languages Which languages does this apply to\r\n    */\r\n    deleteSpellingItems(clientId?: number, languages?: Array<string>, extraHttpRequestParams?: any): Observable<{}>;\r\n\r\n    /**\r\n    * Delete all items in this queue\r\n    * As this may take some time and this server may be scaled out we will setup a long running task to accomplish this and that will restart if doesn&#x27;t finish.\r\n    * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\r\n    * @param languages Which languages does this apply to\r\n    */\r\n    deleteTaskItems(clientId?: number, languages?: Array<string>, extraHttpRequestParams?: any): Observable<{}>;\r\n\r\n    /**\r\n    * Delete a users data\r\n    * This will delete all data we have on a user. This is recommended for GDPR and CCPA compliance around terms like right to be forgetten.  Probably what you want instead however is to pseudonymize all the data with a put request instead. \r\n    * @param userId The unique identifier for this user\r\n    */\r\n    deleteUser(userId: string, extraHttpRequestParams?: any): Observable<Queue>;\r\n\r\n    /**\r\n    * Delete all items in this queue\r\n    * As this may take some time and this server may be scaled out we will setup a long running task to accomplish this and that will restart if doesn&#x27;t finish.\r\n    * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\r\n    * @param languages Which languages does this apply to\r\n    */\r\n    deleteUsernameItems(clientId?: number, languages?: Array<string>, extraHttpRequestParams?: any): Observable<{}>;\r\n\r\n    /**\r\n    * Get a comments\r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    */\r\n   getComments(queueId: string, contentId: string, extraHttpRequestParams?: any): Observable<Array<Comment>>;\r\n\r\n    /**\r\n    * Get a comment\r\n    * Get a comment by Id for this item\r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param commentId The unique identifier for the comment\r\n    */\r\n    getComment(queueId: string, contentId: string, commentId: string, extraHttpRequestParams?: any): Observable<Comment>;\r\n\r\n    /**\r\n    * Search for or checkout items in this queue\r\n    * Lookup items for this queue\r\n    * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\r\n    * @param ai Show items the AI predicts as useful because moderators in the past have taken an action on this items.  Passing an array of objects as params can be tricky at first so here is an example &amp;ai[0][minPrediction]&#x3D;0.50&amp;ai[0][modelName]&#x3D;topic_vulgar&amp;ai[0][maxPrediction]&#x3D;0.95&amp;ai[1][minPrediction]&#x3D;0.10&amp;ai[1][modelName]&#x3D;topic_fraud&amp;ai[1][maxPrediction]&#x3D;0.80  In urlencoded form that would be &amp;ai%5B0%5D%5BminPrediction%5D&#x3D;0.50&amp;ai%5B0%5D%5BmodelName%5D&#x3D;topic_vulgar&amp;ai%5B0%5D%5BmaxPrediction%5D&#x3D;0.95&amp;ai%5B1%5D%5BminPrediction%5D&#x3D;0.10&amp;ai%5B1%5D%5BmodelName%5D&#x3D;topic_fraud&amp;ai%5B1%5D%5BmaxPrediction%5D&#x3D;0.80 \r\n    * @param checkout Checkout this item for review\r\n    * @param clientIds Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to. You can set this to -1 to apply to all clients you have access to.\r\n    * @param contentIds Get these specific contentIds.  Frequently used when you use the Previous button.\r\n    * @param notContentIds Exclude these specific contentIds.  Originally designed so you can call checkout and pass in the item you are working on right now and it will give you a different one.  The default checkout behaviour will assign the items you already have checked out  (which is on your screen). \r\n    * @param endDate Show results occurring before the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param startDate Show results occurring after the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedStartDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedEndDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param checkoutAvailable Only show items where the item could be checked out by me.  This is the same as checkout&#x3D;true but it does not check it out.\r\n    * @param doneByModeratorId Only show work done by this moderatorId\r\n    * @param limit Limit the number of results\r\n    * @param offset Start the search from offset 0.  For instance if your using pagination page 2 would be on totalItemsPerPage*pageNum. \r\n    * @param sortBy What do you want to sort the results by  - FIFO | First in First Out, the same order they came in - Recent | Handle the most recent items first - Priority | By priority (if applicable).  For quality control like spelling it is the times used so it will show the items misspelled 1000 times before the ones 500 times.  For reported users it will be the ones where multiple users have reported the same user. - AI | Deal with the higest AI predictions first that predict this should be relevant for me.  (NOTE: to search by AI you must also have set the ai.modelName in the first item of the parameter ai) \r\n    * @param tags Only find items matching a certain tag\r\n    * @param text Text search.  This uses fuzzy matching.\r\n    * @param topics Only show items for these topics (topicId) between risk level minRisk and maxRisk\r\n    * @param unresolvedComments Will see if there are any unresolved comments for you and show only those\r\n    */\r\n    getExamples(language: string, ai?: Array<Ai>, checkout?: boolean, clientIds?: Array<number>, contentIds?: Array<string>, notContentIds?: Array<string>, endDate?: number, startDate?: number, reviewedStartDate?: number, reviewedEndDate?: number, checkoutAvailable?: boolean, doneByModeratorId?: ModeratorId, limit?: number, offset?: number, sortBy?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, extraHttpRequestParams?: any): Observable<ExampleOutput>;\r\n\r\n    /**\r\n    * list all queues with pending and total counts\r\n    * Will list all the queues that are available and the count of items in them\r\n    */\r\n    getInbox(extraHttpRequestParams?: any): Observable<Array<Queue>>;\r\n\r\n    /**\r\n    * Get the checkout for this item\r\n    * Get the checkout for this item\r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    */\r\n    getItemCheckout(queueId: string, contentId: string, extraHttpRequestParams?: any): Observable<Checkout>;\r\n\r\n    /**\r\n    * Get the queue\r\n    * A Queue is a group of work to be done by moderators.  This will get the queue and it&#x27;s information\r\n    * @param queueId The unique identifier for this queue\r\n    */\r\n    getQueue(queueId: string, extraHttpRequestParams?: any): Observable<Queue>;\r\n\r\n    /**\r\n    * Search for items in this queue\r\n    * Lookup items for this queue\r\n    * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\r\n    * @param ai Show items the AI predicts as useful because moderators in the past have taken an action on this items.  Passing an array of objects as params can be tricky at first so here is an example &amp;ai[0][minPrediction]&#x3D;0.50&amp;ai[0][modelName]&#x3D;topic_vulgar&amp;ai[0][maxPrediction]&#x3D;0.95&amp;ai[1][minPrediction]&#x3D;0.10&amp;ai[1][modelName]&#x3D;topic_fraud&amp;ai[1][maxPrediction]&#x3D;0.80  In urlencoded form that would be &amp;ai%5B0%5D%5BminPrediction%5D&#x3D;0.50&amp;ai%5B0%5D%5BmodelName%5D&#x3D;topic_vulgar&amp;ai%5B0%5D%5BmaxPrediction%5D&#x3D;0.95&amp;ai%5B1%5D%5BminPrediction%5D&#x3D;0.10&amp;ai%5B1%5D%5BmodelName%5D&#x3D;topic_fraud&amp;ai%5B1%5D%5BmaxPrediction%5D&#x3D;0.80 \r\n    * @param checkout Checkout this item for review\r\n    * @param clientIds Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to. You can set this to -1 to apply to all clients you have access to.\r\n    * @param contentIds Get these specific contentIds.  Frequently used when you use the Previous button.\r\n    * @param notContentIds Exclude these specific contentIds.  Originally designed so you can call checkout and pass in the item you are working on right now and it will give you a different one.  The default checkout behaviour will assign the items you already have checked out  (which is on your screen). \r\n    * @param endDate Show results occurring before the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param startDate Show results occurring after the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedStartDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedEndDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param checkoutAvailable Only show items where the item could be checked out by me.  This is the same as checkout&#x3D;true but it does not check it out.\r\n    * @param doneByModeratorId Only show work done by this moderatorId\r\n    * @param limit Limit the number of results\r\n    * @param offset Start the search from offset 0.  For instance if your using pagination page 2 would be on totalItemsPerPage*pageNum. \r\n    * @param sortBy What do you want to sort the results by  - FIFO | First in First Out, the same order they came in - Recent | Handle the most recent items first - Priority | By priority (if applicable).  For quality control like spelling it is the times used so it will show the items misspelled 1000 times before the ones 500 times.  For reported users it will be the ones where multiple users have reported the same user. - AI | Deal with the higest AI predictions first that predict this should be relevant for me.  (NOTE: to search by AI you must also have set the ai.modelName in the first item of the parameter ai) \r\n    * @param tags Only find items matching a certain tag\r\n    * @param text Text search.  This uses fuzzy matching.\r\n    * @param topics Only show items for these topics (topicId) between risk level minRisk and maxRisk\r\n    * @param unresolvedComments Will see if there are any unresolved comments for you and show only those\r\n    */\r\n    getRuleAuditItems(language: string, ai?: Array<Ai>, checkout?: boolean, clientIds?: Array<number>, contentIds?: Array<string>, notContentIds?: Array<string>, endDate?: number, startDate?: number, reviewedStartDate?: number, reviewedEndDate?: number, checkoutAvailable?: boolean, doneByModeratorId?: ModeratorId, limit?: number, offset?: number, sortBy?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, extraHttpRequestParams?: any): Observable<RuleAuditOutput>;\r\n\r\n    /**\r\n    * Search for or checkout items in this queue\r\n    * Lookup items for this queue\r\n    * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\r\n    * @param ai Show items the AI predicts as useful because moderators in the past have taken an action on this items.  Passing an array of objects as params can be tricky at first so here is an example &amp;ai[0][minPrediction]&#x3D;0.50&amp;ai[0][modelName]&#x3D;topic_vulgar&amp;ai[0][maxPrediction]&#x3D;0.95&amp;ai[1][minPrediction]&#x3D;0.10&amp;ai[1][modelName]&#x3D;topic_fraud&amp;ai[1][maxPrediction]&#x3D;0.80  In urlencoded form that would be &amp;ai%5B0%5D%5BminPrediction%5D&#x3D;0.50&amp;ai%5B0%5D%5BmodelName%5D&#x3D;topic_vulgar&amp;ai%5B0%5D%5BmaxPrediction%5D&#x3D;0.95&amp;ai%5B1%5D%5BminPrediction%5D&#x3D;0.10&amp;ai%5B1%5D%5BmodelName%5D&#x3D;topic_fraud&amp;ai%5B1%5D%5BmaxPrediction%5D&#x3D;0.80 \r\n    * @param checkout Checkout this item for review\r\n    * @param clientIds Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to. You can set this to -1 to apply to all clients you have access to.\r\n    * @param contentIds Get these specific contentIds.  Frequently used when you use the Previous button.\r\n    * @param notContentIds Exclude these specific contentIds.  Originally designed so you can call checkout and pass in the item you are working on right now and it will give you a different one.  The default checkout behaviour will assign the items you already have checked out  (which is on your screen). \r\n    * @param endDate Show results occurring before the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param startDate Show results occurring after the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedStartDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedEndDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param checkoutAvailable Only show items where the item could be checked out by me.  This is the same as checkout&#x3D;true but it does not check it out.\r\n    * @param doneByModeratorId Only show work done by this moderatorId\r\n    * @param limit Limit the number of results\r\n    * @param offset Start the search from offset 0.  For instance if your using pagination page 2 would be on totalItemsPerPage*pageNum. \r\n    * @param sortBy What do you want to sort the results by  - FIFO | First in First Out, the same order they came in - Recent | Handle the most recent items first - Priority | By priority (if applicable).  For quality control like spelling it is the times used so it will show the items misspelled 1000 times before the ones 500 times.  For reported users it will be the ones where multiple users have reported the same user. - AI | Deal with the higest AI predictions first that predict this should be relevant for me.  (NOTE: to search by AI you must also have set the ai.modelName in the first item of the parameter ai) \r\n    * @param tags Only find items matching a certain tag\r\n    * @param text Text search.  This uses fuzzy matching.\r\n    * @param topics Only show items for these topics (topicId) between risk level minRisk and maxRisk\r\n    * @param unresolvedComments Will see if there are any unresolved comments for you and show only those\r\n    */\r\n    getSpelling(language: string, ai?: Array<Ai>, checkout?: boolean, clientIds?: Array<number>, contentIds?: Array<string>, notContentIds?: Array<string>, endDate?: number, startDate?: number, reviewedStartDate?: number, reviewedEndDate?: number, checkoutAvailable?: boolean, doneByModeratorId?: ModeratorId, limit?: number, offset?: number, sortBy?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, extraHttpRequestParams?: any): Observable<SpellingMistakeOutput>;\r\n\r\n    /**\r\n    * Search for tasks in the queue\r\n    * Lookup items for this queue\r\n    * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\r\n    * @param clientIds Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to. You can set this to -1 to apply to all clients you have access to.\r\n    * @param contentIds Get these specific contentIds.  Frequently used when you use the Previous button.\r\n    * @param notContentIds Exclude these specific contentIds.  Originally designed so you can call checkout and pass in the item you are working on right now and it will give you a different one.  The default checkout behaviour will assign the items you already have checked out  (which is on your screen). \r\n    * @param endDate Show results occurring before the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param startDate Show results occurring after the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedStartDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedEndDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param checkoutAvailable Only show items where the item could be checked out by me.  This is the same as checkout&#x3D;true but it does not check it out.\r\n    * @param doneByModeratorId Only show work done by this moderatorId\r\n    * @param assignedToModeratorId Show items assigned to this moderator\r\n    * @param limit Limit the number of results\r\n    * @param offset Start the search from offset 0.  For instance if your using pagination page 2 would be on totalItemsPerPage*pageNum. \r\n    * @param sortBy What do you want to sort the results by  - FIFO | First in First Out, the same order they came in - Recent | Handle the most recent items first - Priority | By priority (if applicable).  For quality control like spelling it is the times used so it will show the items misspelled 1000 times before the ones 500 times.  For reported users it will be the ones where multiple users have reported the same user. - AI | Deal with the higest AI predictions first that predict this should be relevant for me.  (NOTE: to search by AI you must also have set the ai.modelName in the first item of the parameter ai) \r\n    * @param tags Only find items matching a certain tag\r\n    * @param text Text search.  This uses fuzzy matching.\r\n    * @param unresolvedComments Will see if there are any unresolved comments for you and show only those\r\n    */\r\n    getTaskItems(language: string, clientIds?: Array<number>, contentIds?: Array<string>, notContentIds?: Array<string>, endDate?: number, startDate?: number, reviewedStartDate?: number, reviewedEndDate?: number, checkoutAvailable?: boolean, doneByModeratorId?: ModeratorId, assignedToModeratorId?: ModeratorId, limit?: number, offset?: number, sortBy?: string, tags?: Array<string>, text?: string, unresolvedComments?: boolean, extraHttpRequestParams?: any): Observable<TaskOutput>;\r\n\r\n    /**\r\n    * Get a users data\r\n    * This will retrieve all information on a user.  This is recommended for GDPR around right to access.  It can also be used if you are downloading a report to send in to the police around criminal activity. \r\n    * @param userId The unique identifier for this user\r\n    */\r\n    getUserData(userId: string, extraHttpRequestParams?: any): Observable<Array<any>>;\r\n\r\n    /**\r\n    * Search for or checkout items in this queue\r\n    * Lookup items for this queue\r\n    * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\r\n    * @param ai Show items the AI predicts as useful because moderators in the past have taken an action on this items.  Passing an array of objects as params can be tricky at first so here is an example &amp;ai[0][minPrediction]&#x3D;0.50&amp;ai[0][modelName]&#x3D;topic_vulgar&amp;ai[0][maxPrediction]&#x3D;0.95&amp;ai[1][minPrediction]&#x3D;0.10&amp;ai[1][modelName]&#x3D;topic_fraud&amp;ai[1][maxPrediction]&#x3D;0.80  In urlencoded form that would be &amp;ai%5B0%5D%5BminPrediction%5D&#x3D;0.50&amp;ai%5B0%5D%5BmodelName%5D&#x3D;topic_vulgar&amp;ai%5B0%5D%5BmaxPrediction%5D&#x3D;0.95&amp;ai%5B1%5D%5BminPrediction%5D&#x3D;0.10&amp;ai%5B1%5D%5BmodelName%5D&#x3D;topic_fraud&amp;ai%5B1%5D%5BmaxPrediction%5D&#x3D;0.80 \r\n    * @param checkout Checkout this item for review\r\n    * @param clientIds Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to. You can set this to -1 to apply to all clients you have access to.\r\n    * @param contentIds Get these specific contentIds.  Frequently used when you use the Previous button.\r\n    * @param notContentIds Exclude these specific contentIds.  Originally designed so you can call checkout and pass in the item you are working on right now and it will give you a different one.  The default checkout behaviour will assign the items you already have checked out  (which is on your screen). \r\n    * @param endDate Show results occurring before the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param startDate Show results occurring after the given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedStartDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param reviewedEndDate Show results that where reviewed between given date in unixtimestamp (milliseconds since Epoch)\r\n    * @param checkoutAvailable Only show items where the item could be checked out by me.  This is the same as checkout&#x3D;true but it does not check it out.\r\n    * @param doneByModeratorId Only show work done by this moderatorId\r\n    * @param limit Limit the number of results\r\n    * @param offset Start the search from offset 0.  For instance if your using pagination page 2 would be on totalItemsPerPage*pageNum. \r\n    * @param sortBy What do you want to sort the results by  - FIFO | First in First Out, the same order they came in - Recent | Handle the most recent items first - Priority | By priority (if applicable).  For quality control like spelling it is the times used so it will show the items misspelled 1000 times before the ones 500 times.  For reported users it will be the ones where multiple users have reported the same user. - AI | Deal with the higest AI predictions first that predict this should be relevant for me.  (NOTE: to search by AI you must also have set the ai.modelName in the first item of the parameter ai) \r\n    * @param tags Only find items matching a certain tag\r\n    * @param text Text search.  This uses fuzzy matching.\r\n    * @param topics Only show items for these topics (topicId) between risk level minRisk and maxRisk\r\n    * @param unresolvedComments Will see if there are any unresolved comments for you and show only those\r\n    */\r\n    getUsernames(language: string, ai?: Array<Ai>, checkout?: boolean, clientIds?: Array<number>, contentIds?: Array<string>, notContentIds?: Array<string>, endDate?: number, startDate?: number, reviewedStartDate?: number, reviewedEndDate?: number, checkoutAvailable?: boolean, doneByModeratorId?: ModeratorId, limit?: number, offset?: number, sortBy?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, extraHttpRequestParams?: any): Observable<UsernameOutput>;\r\n\r\n    /**\r\n    * Add your decision to this content item\r\n    * This will   - Release your checkout on the item  - Record how long you spent on it (should be total items on screen / seconds since started minus any pauses)  - record what the current risk is when reviewed (if applicable)  - record what tags you set it as (including the decision you made where ban user, agree, disagree, delete content are all tags) \r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param body \r\n    */\r\n    itemDone(queueId: string, contentId: string, body?: Decision, extraHttpRequestParams?: any): Observable<InlineResponse201>;\r\n\r\n    /**\r\n    * List comments on this content item\r\n    * \r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    */\r\n    listCommentsForContentId(queueId: string, contentId: string, extraHttpRequestParams?: any): Observable<Array<Comment>>;\r\n\r\n    /**\r\n    * Update the text of an item\r\n    * Update the content.  Typically used for redacting.  It is limited in what you can do. \r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param body \r\n    */\r\n    redactItem(queueId: string, contentId: string, body?: Body, extraHttpRequestParams?: any): Observable<InlineResponse2001>;\r\n\r\n    /**\r\n    * Redact a users data\r\n    * This will redact and pseudonymize all data we have on a user. This is recommended for GDPR and CCPA compliance around terms like right to be forgetten. \r\n    * @param userId The unique identifier for this user\r\n    */\r\n    redactUser(userId: string, extraHttpRequestParams?: any): Observable<Queue>;\r\n\r\n    /**\r\n    * Mark a comment as resolved (or reopen)\r\n    * Comments can be marked as needing to be answered. \r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param commentId The unique identifier for the comment\r\n    * @param body \r\n    */\r\n    resolveComment(queueId: string, contentId: string, commentId: string, body?: Body1, extraHttpRequestParams?: any): Observable<Comment>;\r\n\r\n    /**\r\n    * Update a comment\r\n    * Comments are ways to leave a note to say why a person made the decision they did.  Or it could be a question or answer trying to get help on an item. \r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param commentId The unique identifier for the comment\r\n    * @param body \r\n    */\r\n    updateComment(queueId: string, contentId: string, commentId: string, body?: Comment, extraHttpRequestParams?: any): Observable<Comment>;\r\n\r\n    /**\r\n    * Renew a checkout on an item\r\n    * When you first get an item if checkout&#x3D;True you will have checked it out.  You should be showing a warning when the checkout is almost expired.  Calling this API will allow you to renew it. \r\n    * @param queueId The unique identifier for this queue\r\n    * @param contentId The unique identifier for the content\r\n    * @param body \r\n    */\r\n    updateItemCheckout(queueId: string, contentId: string, body?: Checkout, extraHttpRequestParams?: any): Observable<InlineResponse2001>;\r\n\r\n    /**\r\n    * Add a custom param\r\n    * You can customize some fields.  To get all the params use GET /inbox/queue/{queueId} \r\n    * @param queueId The unique identifier for this queue\r\n    * @param paramId A custom configuration for a client\r\n    * @param body \r\n    */\r\n    updateParam(queueId: string, paramId: string, body?: Body2, extraHttpRequestParams?: any): Observable<{}>;\r\n\r\n}\r\n"]}