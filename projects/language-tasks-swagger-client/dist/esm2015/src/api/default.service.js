/**
 * Inbox API
 * Manage work for human moderators by adding, checking out and completing work items. Store User Generated Content to the database.  This will store it twice, once in short-term storage in it's exact form amd again in long term storage in it's redacted and pseudonymized form
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@twohat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class DefaultService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'https://virtserver.swaggerhub.com/twohat/inbox/2.1.1';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    addComment(queueId, contentId, body, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling addComment.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling addComment.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('post', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/comments`, {
            body: body,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addExamples(body, updateData, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (updateData !== undefined && updateData !== null) {
            queryParameters = queryParameters.set('updateData', updateData);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('post', `${this.basePath}/inbox/queue/examples/items`, {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addRuleAuditItems(body, updateData, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (updateData !== undefined && updateData !== null) {
            queryParameters = queryParameters.set('updateData', updateData);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('post', `${this.basePath}/inbox/queue/rulesAudit/items`, {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addSpelling(body, updateData, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (updateData !== undefined && updateData !== null) {
            queryParameters = queryParameters.set('updateData', updateData);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('post', `${this.basePath}/inbox/queue/spelling/items`, {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addTaskItems(body, updateData, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (updateData !== undefined && updateData !== null) {
            queryParameters = queryParameters.set('updateData', updateData);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('post', `${this.basePath}/inbox/queue/task/items`, {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addUseranmes(body, updateData, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (updateData !== undefined && updateData !== null) {
            queryParameters = queryParameters.set('updateData', updateData);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('post', `${this.basePath}/inbox/queue/usernames/items`, {
            body: body,
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletExampleItems(clientId, languages, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (languages) {
            languages.forEach((element) => {
                queryParameters = queryParameters.append('languages', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/examples/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteAllCheckouts(queueId, clientId, languages, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling deleteAllCheckouts.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (languages) {
            languages.forEach((element) => {
                queryParameters = queryParameters.append('languages', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/checkout`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteComment(queueId, contentId, commentId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling deleteComment.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling deleteComment.');
        }
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling deleteComment.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/comments/${encodeURIComponent(String(commentId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteItemCheckout(queueId, contentId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling deleteItemCheckout.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling deleteItemCheckout.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/checkout`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteItems(queueId, clientId, languages, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling deleteItems.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (languages) {
            languages.forEach((element) => {
                queryParameters = queryParameters.append('languages', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteParam(queueId, paramId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling deleteParam.');
        }
        if (paramId === null || paramId === undefined) {
            throw new Error('Required parameter paramId was null or undefined when calling deleteParam.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/param/${encodeURIComponent(String(paramId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteRuleAuditItems(clientId, languages, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (languages) {
            languages.forEach((element) => {
                queryParameters = queryParameters.append('languages', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/rulesAudit/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteSpellingItems(clientId, languages, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (languages) {
            languages.forEach((element) => {
                queryParameters = queryParameters.append('languages', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/spelling/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteTaskItems(clientId, languages, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (languages) {
            languages.forEach((element) => {
                queryParameters = queryParameters.append('languages', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/task/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteUser(userId, observe = 'body', reportProgress = false) {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUser.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/user/${encodeURIComponent(String(userId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteUsernameItems(clientId, languages, observe = 'body', reportProgress = false) {
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('clientId', clientId);
        }
        if (languages) {
            languages.forEach((element) => {
                queryParameters = queryParameters.append('languages', element);
            });
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('delete', `${this.basePath}/inbox/queue/usernames/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getComments(queueId, contentId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling getComment.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getComment.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/comments`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getComment(queueId, contentId, commentId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling getComment.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getComment.');
        }
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling getComment.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/comments/${encodeURIComponent(String(commentId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getExamples(language, ai, checkout, clientIds, contentIds, notContentIds, endDate, startDate, reviewedStartDate, reviewedEndDate, checkoutAvailable, doneByModeratorId, limit, offset, sortBy, tags, text, topics, unresolvedComments, observe = 'body', reportProgress = false) {
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling getExamples.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ai) {
            ai.forEach((element) => {
                queryParameters = queryParameters.append('ai', element);
            });
        }
        if (checkout !== undefined && checkout !== null) {
            queryParameters = queryParameters.set('checkout', checkout);
        }
        if (clientIds) {
            queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));
        }
        if (contentIds) {
            queryParameters = queryParameters.set('contentIds', contentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (notContentIds) {
            queryParameters = queryParameters.set('notContentIds', notContentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', endDate);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', startDate);
        }
        if (reviewedStartDate !== undefined && reviewedStartDate !== null) {
            queryParameters = queryParameters.set('reviewedStartDate', reviewedStartDate);
        }
        if (reviewedEndDate !== undefined && reviewedEndDate !== null) {
            queryParameters = queryParameters.set('reviewedEndDate', reviewedEndDate);
        }
        if (checkoutAvailable !== undefined && checkoutAvailable !== null) {
            queryParameters = queryParameters.set('checkoutAvailable', checkoutAvailable);
        }
        if (doneByModeratorId !== undefined && doneByModeratorId !== null) {
            queryParameters = queryParameters.set('doneByModeratorId', doneByModeratorId);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', language);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', sortBy);
        }
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['csv']));
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        if (topics) {
            topics.forEach((element) => {
                queryParameters = queryParameters.append('topics', element);
            });
        }
        if (unresolvedComments !== undefined && unresolvedComments !== null) {
            queryParameters = queryParameters.set('unresolvedComments', unresolvedComments);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/examples/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getInbox(observe = 'body', reportProgress = false) {
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getItemCheckout(queueId, contentId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling getItemCheckout.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getItemCheckout.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/checkout`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getQueue(queueId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling getQueue.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getRuleAuditItems(language, ai, checkout, clientIds, contentIds, notContentIds, endDate, startDate, reviewedStartDate, reviewedEndDate, checkoutAvailable, doneByModeratorId, limit, offset, sortBy, tags, text, topics, unresolvedComments, observe = 'body', reportProgress = false) {
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling getRuleAuditItems.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ai) {
            ai.forEach((element) => {
                queryParameters = queryParameters.append('ai', element);
            });
        }
        if (checkout !== undefined && checkout !== null) {
            queryParameters = queryParameters.set('checkout', checkout);
        }
        if (clientIds) {
            queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));
        }
        if (contentIds) {
            queryParameters = queryParameters.set('contentIds', contentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (notContentIds) {
            queryParameters = queryParameters.set('notContentIds', notContentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', endDate);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', startDate);
        }
        if (reviewedStartDate !== undefined && reviewedStartDate !== null) {
            queryParameters = queryParameters.set('reviewedStartDate', reviewedStartDate);
        }
        if (reviewedEndDate !== undefined && reviewedEndDate !== null) {
            queryParameters = queryParameters.set('reviewedEndDate', reviewedEndDate);
        }
        if (checkoutAvailable !== undefined && checkoutAvailable !== null) {
            queryParameters = queryParameters.set('checkoutAvailable', checkoutAvailable);
        }
        if (doneByModeratorId !== undefined && doneByModeratorId !== null) {
            queryParameters = queryParameters.set('doneByModeratorId', doneByModeratorId);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', language);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', sortBy);
        }
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['csv']));
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        if (topics) {
            topics.forEach((element) => {
                queryParameters = queryParameters.append('topics', element);
            });
        }
        if (unresolvedComments !== undefined && unresolvedComments !== null) {
            queryParameters = queryParameters.set('unresolvedComments', unresolvedComments);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/rulesAudit/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSpelling(language, ai, checkout, clientIds, contentIds, notContentIds, endDate, startDate, reviewedStartDate, reviewedEndDate, checkoutAvailable, doneByModeratorId, limit, offset, sortBy, tags, text, topics, unresolvedComments, observe = 'body', reportProgress = false) {
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling getSpelling.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ai) {
            ai.forEach((element) => {
                queryParameters = queryParameters.append('ai', element);
            });
        }
        if (checkout !== undefined && checkout !== null) {
            queryParameters = queryParameters.set('checkout', checkout);
        }
        if (clientIds) {
            queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));
        }
        if (contentIds) {
            queryParameters = queryParameters.set('contentIds', contentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (notContentIds) {
            queryParameters = queryParameters.set('notContentIds', notContentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', endDate);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', startDate);
        }
        if (reviewedStartDate !== undefined && reviewedStartDate !== null) {
            queryParameters = queryParameters.set('reviewedStartDate', reviewedStartDate);
        }
        if (reviewedEndDate !== undefined && reviewedEndDate !== null) {
            queryParameters = queryParameters.set('reviewedEndDate', reviewedEndDate);
        }
        if (checkoutAvailable !== undefined && checkoutAvailable !== null) {
            queryParameters = queryParameters.set('checkoutAvailable', checkoutAvailable);
        }
        if (doneByModeratorId !== undefined && doneByModeratorId !== null) {
            queryParameters = queryParameters.set('doneByModeratorId', doneByModeratorId);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', language);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', sortBy);
        }
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['csv']));
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        if (topics) {
            topics.forEach((element) => {
                queryParameters = queryParameters.append('topics', element);
            });
        }
        if (unresolvedComments !== undefined && unresolvedComments !== null) {
            queryParameters = queryParameters.set('unresolvedComments', unresolvedComments);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/spelling/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTaskItems(language, clientIds, contentIds, notContentIds, endDate, startDate, reviewedStartDate, reviewedEndDate, checkoutAvailable, doneByModeratorId, assignedToModeratorId, limit, offset, sortBy, tags, text, unresolvedComments, observe = 'body', reportProgress = false) {
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling getTaskItems.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (clientIds) {
            queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));
        }
        if (contentIds) {
            queryParameters = queryParameters.set('contentIds', contentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (notContentIds) {
            queryParameters = queryParameters.set('notContentIds', notContentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', endDate);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', startDate);
        }
        if (reviewedStartDate !== undefined && reviewedStartDate !== null) {
            queryParameters = queryParameters.set('reviewedStartDate', reviewedStartDate);
        }
        if (reviewedEndDate !== undefined && reviewedEndDate !== null) {
            queryParameters = queryParameters.set('reviewedEndDate', reviewedEndDate);
        }
        if (checkoutAvailable !== undefined && checkoutAvailable !== null) {
            queryParameters = queryParameters.set('checkoutAvailable', checkoutAvailable);
        }
        if (doneByModeratorId !== undefined && doneByModeratorId !== null) {
            queryParameters = queryParameters.set('doneByModeratorId', doneByModeratorId);
        }
        if (assignedToModeratorId !== undefined && assignedToModeratorId !== null) {
            queryParameters = queryParameters.set('assignedToModeratorId', assignedToModeratorId);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', language);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', sortBy);
        }
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['csv']));
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        if (unresolvedComments !== undefined && unresolvedComments !== null) {
            queryParameters = queryParameters.set('unresolvedComments', unresolvedComments);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/task/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserData(userId, observe = 'body', reportProgress = false) {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserData.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/x-ndjson',
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/user/${encodeURIComponent(String(userId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUsernames(language, ai, checkout, clientIds, contentIds, notContentIds, endDate, startDate, reviewedStartDate, reviewedEndDate, checkoutAvailable, doneByModeratorId, limit, offset, sortBy, tags, text, topics, unresolvedComments, observe = 'body', reportProgress = false) {
        if (language === null || language === undefined) {
            throw new Error('Required parameter language was null or undefined when calling getUsernames.');
        }
        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (ai) {
            ai.forEach((element) => {
                queryParameters = queryParameters.append('ai', element);
            });
        }
        if (checkout !== undefined && checkout !== null) {
            queryParameters = queryParameters.set('checkout', checkout);
        }
        if (clientIds) {
            queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));
        }
        if (contentIds) {
            queryParameters = queryParameters.set('contentIds', contentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (notContentIds) {
            queryParameters = queryParameters.set('notContentIds', notContentIds.join(COLLECTION_FORMATS['csv']));
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', endDate);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', startDate);
        }
        if (reviewedStartDate !== undefined && reviewedStartDate !== null) {
            queryParameters = queryParameters.set('reviewedStartDate', reviewedStartDate);
        }
        if (reviewedEndDate !== undefined && reviewedEndDate !== null) {
            queryParameters = queryParameters.set('reviewedEndDate', reviewedEndDate);
        }
        if (checkoutAvailable !== undefined && checkoutAvailable !== null) {
            queryParameters = queryParameters.set('checkoutAvailable', checkoutAvailable);
        }
        if (doneByModeratorId !== undefined && doneByModeratorId !== null) {
            queryParameters = queryParameters.set('doneByModeratorId', doneByModeratorId);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', language);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', sortBy);
        }
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['csv']));
        }
        if (text !== undefined && text !== null) {
            queryParameters = queryParameters.set('text', text);
        }
        if (topics) {
            topics.forEach((element) => {
                queryParameters = queryParameters.append('topics', element);
            });
        }
        if (unresolvedComments !== undefined && unresolvedComments !== null) {
            queryParameters = queryParameters.set('unresolvedComments', unresolvedComments);
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/usernames/items`, {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    itemDone(queueId, contentId, body, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling itemDone.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling itemDone.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('post', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/decision`, {
            body: body,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    listCommentsForContentId(queueId, contentId, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling listCommentsForContentId.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling listCommentsForContentId.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('get', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/comments`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    redactItem(queueId, contentId, body, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling redactItem.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling redactItem.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('put', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/text`, {
            body: body,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    redactUser(userId, observe = 'body', reportProgress = false) {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling redactUser.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [];
        return this.httpClient.request('put', `${this.basePath}/inbox/user/${encodeURIComponent(String(userId))}`, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    resolveComment(queueId, contentId, commentId, body, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling resolveComment.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling resolveComment.');
        }
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling resolveComment.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('put', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/comments/${encodeURIComponent(String(commentId))}/resolved`, {
            body: body,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateComment(queueId, contentId, commentId, body, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling updateComment.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling updateComment.');
        }
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling updateComment.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('put', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/comments/${encodeURIComponent(String(commentId))}`, {
            body: body,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateItemCheckout(queueId, contentId, body, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling updateItemCheckout.');
        }
        if (contentId === null || contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling updateItemCheckout.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('put', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/items/${encodeURIComponent(String(contentId))}/checkout`, {
            body: body,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateParam(queueId, paramId, body, observe = 'body', reportProgress = false) {
        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling updateParam.');
        }
        if (paramId === null || paramId === undefined) {
            throw new Error('Required parameter paramId was null or undefined when calling updateParam.');
        }
        let headers = this.defaultHeaders;
        // to determine the Accept header
        let httpHeaderAccepts = [
            'application/json'
        ];
        const httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.request('put', `${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}/param/${encodeURIComponent(String(paramId))}`, {
            body: body,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
DefaultService.ɵfac = function DefaultService_Factory(t) { return new (t || DefaultService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(i2.Configuration, 8)); };
DefaultService.ɵprov = i0.ɵɵdefineInjectable({ token: DefaultService, factory: DefaultService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DefaultService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [BASE_PATH]
            }] }, { type: i2.Configuration, decorators: [{
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbGFuZ3VhZ2UtdGFza3Mtc3dhZ2dlci1jbGllbnQvc3JjLyIsInNvdXJjZXMiOlsiYXBpL2RlZmF1bHQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztHQVVHLENBQUEsdURBQXVEO0FBRTFELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUEyQixlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFjLFdBQVcsRUFBRSxVQUFVLEVBQ1YsTUFBZ0Msc0JBQXNCLENBQUM7QUFDekYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQTZCLFlBQVksQ0FBQztBQTZCL0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUEwQixjQUFjLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUEwQyxrQkFBa0IsQ0FBQzs7OztBQU9yRixNQUFNLE9BQU8sY0FBYztJQU12QixZQUFzQixVQUFzQixFQUFnQyxRQUFnQixFQUFjLGFBQTRCO1FBQWhILGVBQVUsR0FBVixVQUFVLENBQVk7UUFKbEMsYUFBUSxHQUFHLHNEQUFzRCxDQUFDO1FBQ3JFLG1CQUFjLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNuQyxrQkFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7UUFHdkMsSUFBSSxRQUFRLEVBQUU7WUFDVixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUM1QjtRQUNELElBQUksYUFBYSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7WUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksYUFBYSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3ZFO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNLLGNBQWMsQ0FBQyxRQUFrQjtRQUNyQyxNQUFNLElBQUksR0FB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RSxNQUFNO2FBQ3JCOztzQkFPa0QsUUFBUTs7c0JBQUcsTUFBTTt1QkFBQyxTQUFTOztzQkFBcUIsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBJbmJveCBBUElcclxuICogTWFuYWdlIHdvcmsgZm9yIGh1bWFuIG1vZGVyYXRvcnMgYnkgYWRkaW5nLCBjaGVja2luZyBvdXQgYW5kIGNvbXBsZXRpbmcgd29yayBpdGVtcy4gU3RvcmUgVXNlciBHZW5lcmF0ZWQgQ29udGVudCB0byB0aGUgZGF0YWJhc2UuICBUaGlzIHdpbGwgc3RvcmUgaXQgdHdpY2UsIG9uY2UgaW4gc2hvcnQtdGVybSBzdG9yYWdlIGluIGl0J3MgZXhhY3QgZm9ybSBhbWQgYWdhaW4gaW4gbG9uZyB0ZXJtIHN0b3JhZ2UgaW4gaXQncyByZWRhY3RlZCBhbmQgcHNldWRvbnltaXplZCBmb3JtIFxyXG4gKlxyXG4gKiBPcGVuQVBJIHNwZWMgdmVyc2lvbjogMi4xLjFcclxuICogQ29udGFjdDogc3VwcG9ydEB0d29oYXQuY29tXHJcbiAqXHJcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgdGhlIHN3YWdnZXIgY29kZSBnZW5lcmF0b3IgcHJvZ3JhbS5cclxuICogaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbi5naXRcclxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxyXG4gKi8vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgbWVtYmVyLW9yZGVyaW5nICovXHJcblxyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gICAgICAgICAgICAgICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zLFxyXG4gICAgICAgICBIdHRwUmVzcG9uc2UsIEh0dHBFdmVudCB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBDdXN0b21IdHRwVXJsRW5jb2RpbmdDb2RlYyB9ICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vZW5jb2Rlcic7XHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBBaSB9IGZyb20gJy4uL21vZGVsL2FpJztcclxuaW1wb3J0IHsgQm9keSB9IGZyb20gJy4uL21vZGVsL2JvZHknO1xyXG5pbXBvcnQgeyBCb2R5MSB9IGZyb20gJy4uL21vZGVsL2JvZHkxJztcclxuaW1wb3J0IHsgQm9keTIgfSBmcm9tICcuLi9tb2RlbC9ib2R5Mic7XHJcbmltcG9ydCB7IENoZWNrb3V0IH0gZnJvbSAnLi4vbW9kZWwvY2hlY2tvdXQnO1xyXG5pbXBvcnQgeyBDb21tZW50IH0gZnJvbSAnLi4vbW9kZWwvY29tbWVudCc7XHJcbmltcG9ydCB7IENvbW1lbnRJbnB1dCB9IGZyb20gJy4uL21vZGVsL2NvbW1lbnRJbnB1dCc7XHJcbmltcG9ydCB7IERlY2lzaW9uIH0gZnJvbSAnLi4vbW9kZWwvZGVjaXNpb24nO1xyXG5pbXBvcnQgeyBFeGFtcGxlSW5wdXQgfSBmcm9tICcuLi9tb2RlbC9leGFtcGxlSW5wdXQnO1xyXG5pbXBvcnQgeyBFeGFtcGxlT3V0cHV0IH0gZnJvbSAnLi4vbW9kZWwvZXhhbXBsZU91dHB1dCc7XHJcbmltcG9ydCB7IElubGluZVJlc3BvbnNlMjAwIH0gZnJvbSAnLi4vbW9kZWwvaW5saW5lUmVzcG9uc2UyMDAnO1xyXG5pbXBvcnQgeyBJbmxpbmVSZXNwb25zZTIwMDEgfSBmcm9tICcuLi9tb2RlbC9pbmxpbmVSZXNwb25zZTIwMDEnO1xyXG5pbXBvcnQgeyBJbmxpbmVSZXNwb25zZTIwMSB9IGZyb20gJy4uL21vZGVsL2lubGluZVJlc3BvbnNlMjAxJztcclxuaW1wb3J0IHsgTW9kZXJhdG9ySWQgfSBmcm9tICcuLi9tb2RlbC9tb2RlcmF0b3JJZCc7XHJcbmltcG9ydCB7IFF1ZXVlIH0gZnJvbSAnLi4vbW9kZWwvcXVldWUnO1xyXG5pbXBvcnQgeyBSdWxlQXVkaXRJbnB1dCB9IGZyb20gJy4uL21vZGVsL3J1bGVBdWRpdElucHV0JztcclxuaW1wb3J0IHsgUnVsZUF1ZGl0T3V0cHV0IH0gZnJvbSAnLi4vbW9kZWwvcnVsZUF1ZGl0T3V0cHV0JztcclxuaW1wb3J0IHsgU3BlbGxpbmdNaXN0YWtlSW5wdXQgfSBmcm9tICcuLi9tb2RlbC9zcGVsbGluZ01pc3Rha2VJbnB1dCc7XHJcbmltcG9ydCB7IFNwZWxsaW5nTWlzdGFrZU91dHB1dCB9IGZyb20gJy4uL21vZGVsL3NwZWxsaW5nTWlzdGFrZU91dHB1dCc7XHJcbmltcG9ydCB7IFRhc2tJbnB1dCB9IGZyb20gJy4uL21vZGVsL3Rhc2tJbnB1dCc7XHJcbmltcG9ydCB7IFRhc2tPdXRwdXQgfSBmcm9tICcuLi9tb2RlbC90YXNrT3V0cHV0JztcclxuaW1wb3J0IHsgVG9waWNzIH0gZnJvbSAnLi4vbW9kZWwvdG9waWNzJztcclxuaW1wb3J0IHsgVXNlcm5hbWVJbnB1dCB9IGZyb20gJy4uL21vZGVsL3VzZXJuYW1lSW5wdXQnO1xyXG5pbXBvcnQgeyBVc2VybmFtZU91dHB1dCB9IGZyb20gJy4uL21vZGVsL3VzZXJuYW1lT3V0cHV0JztcclxuXHJcbmltcG9ydCB7IEJBU0VfUEFUSCwgQ09MTEVDVElPTl9GT1JNQVRTIH0gICAgICAgICAgICAgICAgICAgICBmcm9tICcuLi92YXJpYWJsZXMnO1xyXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vY29uZmlndXJhdGlvbic7XHJcbmltcG9ydCB7IERlZmF1bHRTZXJ2aWNlSW50ZXJmYWNlIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi9kZWZhdWx0LnNlcnZpY2VJbnRlcmZhY2UnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdFNlcnZpY2UgaW1wbGVtZW50cyBEZWZhdWx0U2VydmljZUludGVyZmFjZSB7XHJcblxyXG4gICAgcHJvdGVjdGVkIGJhc2VQYXRoID0gJ2h0dHBzOi8vdmlydHNlcnZlci5zd2FnZ2VyaHViLmNvbS90d29oYXQvaW5ib3gvMi4xLjEnO1xyXG4gICAgcHVibGljIGRlZmF1bHRIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XHJcbiAgICBwdWJsaWMgY29uZmlndXJhdGlvbiA9IG5ldyBDb25maWd1cmF0aW9uKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIEBPcHRpb25hbCgpQEluamVjdChCQVNFX1BBVEgpIGJhc2VQYXRoOiBzdHJpbmcsIEBPcHRpb25hbCgpIGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb24pIHtcclxuICAgICAgICBpZiAoYmFzZVBhdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VQYXRoID0gYmFzZVBhdGggfHwgY29uZmlndXJhdGlvbi5iYXNlUGF0aCB8fCB0aGlzLmJhc2VQYXRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb25zdW1lcyBzdHJpbmdbXSBtaW1lLXR5cGVzXHJcbiAgICAgKiBAcmV0dXJuIHRydWU6IGNvbnN1bWVzIGNvbnRhaW5zICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgZmFsc2U6IG90aGVyd2lzZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhbkNvbnN1bWVGb3JtKGNvbnN1bWVzOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGZvcm0gPSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSc7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb25zdW1lIG9mIGNvbnN1bWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtID09PSBjb25zdW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgY29tbWVudCB0byB0aGlzIGNvbnRlbnQgaXRlbVxyXG4gICAgICogQ29tbWVudHMgYXJlIHdheXMgdG8gbGVhdmUgYSBub3RlIHRvIHNheSB3aHkgYSBwZXJzb24gbWFkZSB0aGUgZGVjaXNpb24gdGhleSBkaWQuICBPciBpdCBjb3VsZCBiZSBhIHF1ZXN0aW9uIG9yIGFuc3dlciB0cnlpbmcgdG8gZ2V0IGhlbHAgb24gYW4gaXRlbS4gXHJcbiAgICAgKiBAcGFyYW0gcXVldWVJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcXVldWVcclxuICAgICAqIEBwYXJhbSBjb250ZW50SWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29udGVudFxyXG4gICAgICogQHBhcmFtIGJvZHkgXHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxyXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkQ29tbWVudChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBib2R5PzogQ29tbWVudElucHV0LCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPENvbW1lbnQ+O1xyXG4gICAgcHVibGljIGFkZENvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgYm9keT86IENvbW1lbnRJbnB1dCwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPENvbW1lbnQ+PjtcclxuICAgIHB1YmxpYyBhZGRDb21tZW50KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGJvZHk/OiBDb21tZW50SW5wdXQsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8Q29tbWVudD4+O1xyXG4gICAgcHVibGljIGFkZENvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgYm9keT86IENvbW1lbnRJbnB1dCwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYWRkQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50SWQgPT09IG51bGwgfHwgY29udGVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29udGVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYWRkQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxDb21tZW50PigncG9zdCcsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHF1ZXVlSWQpKX0vaXRlbXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRlbnRJZCkpfS9jb21tZW50c2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBleGFtcGxlcyBvZiB0ZXh0IHRvIGJlIHJldmlld2VkXHJcbiAgICAgKiBBZGQgYW4gZXhhbXBsZSBvZiBzaG9ydCB0ZXh0IGZvciBRdWFsaXR5IENvbnRyb2wuICBUaGlzIHdpbGwgbGF0ZXIgYmUgdXNlZCBmb3IgIC0gUmVncmVzc2lvbiBUZXN0cyB8IE9uY2UgeW91IG1hcmsgYW4gaXRlbSBhcyB3cm9uZyBhbmQgaXQgaXMgZml4ZWQgeW91IHdpbGwgd2FudCB0byBiZSBhYmxlIHRvIHJ1biBpdCB0aHJvdWdoIHRoZSBmaWx0ZXIgYWdhaW4gdG8gZW5zdXJlIHRoZSBlcnJvcnMgYXJlIG5vdCByZXByb2R1Y2VkIGJ5IGNyZWF0aW5nIGZ1dHVyZSBydWxlcy4gLSBFeGFtcGxlcyB8IFdoZW4gcmV2aWV3aW5nIHRoaW5ncyBsaWtlIHNwZWxsaW5nIG1pc3Rha2VzIG9yIHJ1bGVzIGl0IG1ha2VzIGEgaHVnZSBkaWZmZXJlbmNlIHRvIGxvb2sgYXQgaG93IHdvcmRzIGFyZSByZWFsbHkgdXNlZC4gIEZvciBpbnN0YW5jZSBvbmUgbWlnaHQgdGhpbmsgdGhhdCBcXCZxdW90O21hZGUgb3V0XFwmcXVvdDsgaXMgc2V4dWFsIHRpbGwgdGhleSBzZWUgdGhlIGV4YW1wbGUgXFwmcXVvdDttYWRlIG91dCBvZiBwbGFzdGljXFwmcXVvdDsgLSBUcmFpbmluZyBBSSB8IFdlIGNhbiBpbXByb3ZlIHRoZSBmaWx0ZXIgaW4gdGhlIGZ1dHVyZSBieSB0cmFpbmluZyBBSSB0byBwcmVkaWN0IHRoZSByaXNrcyBhbmQgbGFiZWxzIHlvdSBwcm92aWRlIGFuZCBpbiBzbyBkb2luZyBjb21iaW5lIGEgcnVsZXMgYmFzZWQgYXBwcm9hY2ggeW91IGNhbiBjb250cm9sIHdpdGggdGhlIGZ1enp5IG1hdGNoaW5nIG9mIEFJIHRvIGZpbmQgc2ltaWxhciB0aGluZ3MuIFxyXG4gICAgICogQHBhcmFtIGJvZHkgXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlRGF0YSBJZiB0aGUgaXRlbSBhbHJlYWR5IGV4aXN0cyBzaG91bGQgd2UgdXBkYXRlIHRoZSB2YWx1ZXMgb2YgdGhlIGJvZHkgZWxlbWVudFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZEV4YW1wbGVzKGJvZHk/OiBBcnJheTxFeGFtcGxlSW5wdXQ+LCB1cGRhdGVEYXRhPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxJbmxpbmVSZXNwb25zZTIwMT47XHJcbiAgICBwdWJsaWMgYWRkRXhhbXBsZXMoYm9keT86IEFycmF5PEV4YW1wbGVJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5saW5lUmVzcG9uc2UyMDE+PjtcclxuICAgIHB1YmxpYyBhZGRFeGFtcGxlcyhib2R5PzogQXJyYXk8RXhhbXBsZUlucHV0PiwgdXBkYXRlRGF0YT86IGJvb2xlYW4sIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5saW5lUmVzcG9uc2UyMDE+PjtcclxuICAgIHB1YmxpYyBhZGRFeGFtcGxlcyhib2R5PzogQXJyYXk8RXhhbXBsZUlucHV0PiwgdXBkYXRlRGF0YT86IGJvb2xlYW4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAodXBkYXRlRGF0YSAhPT0gdW5kZWZpbmVkICYmIHVwZGF0ZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgndXBkYXRlRGF0YScsIDxhbnk+dXBkYXRlRGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxJbmxpbmVSZXNwb25zZTIwMT4oJ3Bvc3QnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlL2V4YW1wbGVzL2l0ZW1zYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcclxuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgcnVsZXMgdG8gYmUgYXVkaXRlZFxyXG4gICAgICogT3VyIHByaW1hcnkgcHVycG9zZSBpcyBhcyBhIGNvbnRlbnQgZmlsdGVyLiAgVG8gYWNoaWV2ZSB0aGlzIHlvdSBjYW4gbWFudWFsbHkgYWRkIHdvcmQgcGF0dGVybnMgdG8gdGhlIHN5c3RlbS4gIEJ1dCBob3cgZG8geW91IGtub3cgaWYgaXQgaXMgY3JlYXRpbmcgZXJyb3JzIGxpa2UgZmFsc2UgcG9zaXRpdmVzICBUbyBoYW5kbGUgdGhhdCB3ZSBjb3VudCBob3cgbWFueSB0aW1lcyB0aGF0IHJ1bGUgaXMgdXNlZCBpbiB5b3VyIG5ldyBjb250ZW50IGFuZCBvbiBrZXkgcG9pbnRzIGxpa2Ugd2hlbiBpdCBpcyBzYWlkIDEwMCB0aW1lcyB3ZSBicmluZyBpdCB1cCBoZXJlIGZvciByZXZpZXcuICBJbiB0aGlzIHdheSB5b3Uga25vdyB5b3UgYXJlIHdvcmtpbmcgb24gdGhlIG1vc3QgaW1wYWN0ZnVsIHRoaW5ncyBmaXJzdC4gIElmIHRoZSBydWxlIGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQgaXQgd2lsbCBpbmNyZWFzZSBpdCYjeDI3O3MgcHJpb3JpdHkuICBOb3RlIHRoYXQgdGhlIHJlcXVlc3QgYWNjZXB0cyBhbiBhcnJheSBvZiBtaW5pbXVtIDEgdG8gbWF4aW11bSAxMDAgaXRlbXMgc28geW91IGNhbiBkbyBhIGJ1bGsgaW5zZXJ0LiBcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIHVwZGF0ZURhdGEgSWYgdGhlIGl0ZW0gYWxyZWFkeSBleGlzdHMgc2hvdWxkIHdlIHVwZGF0ZSB0aGUgdmFsdWVzIG9mIHRoZSBib2R5IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRSdWxlQXVkaXRJdGVtcyhib2R5PzogQXJyYXk8UnVsZUF1ZGl0SW5wdXQ+LCB1cGRhdGVEYXRhPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxJbmxpbmVSZXNwb25zZTIwMT47XHJcbiAgICBwdWJsaWMgYWRkUnVsZUF1ZGl0SXRlbXMoYm9keT86IEFycmF5PFJ1bGVBdWRpdElucHV0PiwgdXBkYXRlRGF0YT86IGJvb2xlYW4sIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJbmxpbmVSZXNwb25zZTIwMT4+O1xyXG4gICAgcHVibGljIGFkZFJ1bGVBdWRpdEl0ZW1zKGJvZHk/OiBBcnJheTxSdWxlQXVkaXRJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PElubGluZVJlc3BvbnNlMjAxPj47XHJcbiAgICBwdWJsaWMgYWRkUnVsZUF1ZGl0SXRlbXMoYm9keT86IEFycmF5PFJ1bGVBdWRpdElucHV0PiwgdXBkYXRlRGF0YT86IGJvb2xlYW4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAodXBkYXRlRGF0YSAhPT0gdW5kZWZpbmVkICYmIHVwZGF0ZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgndXBkYXRlRGF0YScsIDxhbnk+dXBkYXRlRGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxJbmxpbmVSZXNwb25zZTIwMT4oJ3Bvc3QnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlL3J1bGVzQXVkaXQvaXRlbXNgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIGNvbW1vbiBzcGVsbGluZyBtaXN0YWtlIGZvciByZXZpZXdcclxuICAgICAqIE9uZSBvZiB0aGUgZ3JlYXRlc3QgaW1wYWN0cyBlYXJseSBvbiB3aGVuIHlvdSB1c2UgdGhlIHN5c3RlbSBpcyBzcGVsbGluZyBtaXN0YWtlcywgbW9zdCBvZnRlbiB3b3JkcyB1bmlxdWUgdG8geW91ciBwcm9kdWN0LiAgV2UgYXV0b21hdGljYWxseSBjb3VudCB3aGljaCB3b3JkcyBhcmUgdXNlZCBhbmQgaG93IG9mdGVuLiAgSWYgaXQgaXMgZnJlcXVlbnRseSBtaXNzcGVsbGVkIHdlIHdpbGwgZXNjYWxhdGUgaXQgaGVyZS4gXHJcbiAgICAgKiBAcGFyYW0gYm9keSBcclxuICAgICAqIEBwYXJhbSB1cGRhdGVEYXRhIElmIHRoZSBpdGVtIGFscmVhZHkgZXhpc3RzIHNob3VsZCB3ZSB1cGRhdGUgdGhlIHZhbHVlcyBvZiB0aGUgYm9keSBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxyXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkU3BlbGxpbmcoYm9keT86IEFycmF5PFNwZWxsaW5nTWlzdGFrZUlucHV0PiwgdXBkYXRlRGF0YT86IGJvb2xlYW4sIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SW5saW5lUmVzcG9uc2UyMDE+O1xyXG4gICAgcHVibGljIGFkZFNwZWxsaW5nKGJvZHk/OiBBcnJheTxTcGVsbGluZ01pc3Rha2VJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5saW5lUmVzcG9uc2UyMDE+PjtcclxuICAgIHB1YmxpYyBhZGRTcGVsbGluZyhib2R5PzogQXJyYXk8U3BlbGxpbmdNaXN0YWtlSW5wdXQ+LCB1cGRhdGVEYXRhPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxJbmxpbmVSZXNwb25zZTIwMT4+O1xyXG4gICAgcHVibGljIGFkZFNwZWxsaW5nKGJvZHk/OiBBcnJheTxTcGVsbGluZ01pc3Rha2VJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcblxyXG5cclxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IG5ldyBDdXN0b21IdHRwVXJsRW5jb2RpbmdDb2RlYygpfSk7XHJcbiAgICAgICAgaWYgKHVwZGF0ZURhdGEgIT09IHVuZGVmaW5lZCAmJiB1cGRhdGVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3VwZGF0ZURhdGEnLCA8YW55PnVwZGF0ZURhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xyXG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8SW5saW5lUmVzcG9uc2UyMDE+KCdwb3N0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS9zcGVsbGluZy9pdGVtc2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgdGFzayBmb3IgdGhlIHRlYW0gdG8gZG8gd29yayBvblxyXG4gICAgICogWW91IGNhbiBjcmVhdGUgYSB0YXNrIHRvIHdvcmsgb24uICBGb3IgZXhhbXBsZSBzcGxpdCBhbGwgdGhlIHNleHRpbmcgd29yZHMgaW50byBzZXh1YWwgYm9keSBwYXJ0cyBhbmQgc2V4dWFsIGFjdGl2aXR5LiBcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIHVwZGF0ZURhdGEgSWYgdGhlIGl0ZW0gYWxyZWFkeSBleGlzdHMgc2hvdWxkIHdlIHVwZGF0ZSB0aGUgdmFsdWVzIG9mIHRoZSBib2R5IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRUYXNrSXRlbXMoYm9keT86IEFycmF5PFRhc2tJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPElubGluZVJlc3BvbnNlMjAxPjtcclxuICAgIHB1YmxpYyBhZGRUYXNrSXRlbXMoYm9keT86IEFycmF5PFRhc2tJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5saW5lUmVzcG9uc2UyMDE+PjtcclxuICAgIHB1YmxpYyBhZGRUYXNrSXRlbXMoYm9keT86IEFycmF5PFRhc2tJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PElubGluZVJlc3BvbnNlMjAxPj47XHJcbiAgICBwdWJsaWMgYWRkVGFza0l0ZW1zKGJvZHk/OiBBcnJheTxUYXNrSW5wdXQ+LCB1cGRhdGVEYXRhPzogYm9vbGVhbiwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG5cclxuXHJcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiBuZXcgQ3VzdG9tSHR0cFVybEVuY29kaW5nQ29kZWMoKX0pO1xyXG4gICAgICAgIGlmICh1cGRhdGVEYXRhICE9PSB1bmRlZmluZWQgJiYgdXBkYXRlRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCd1cGRhdGVEYXRhJywgPGFueT51cGRhdGVEYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcclxuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0PElubGluZVJlc3BvbnNlMjAxPigncG9zdCcsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvdGFzay9pdGVtc2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIHVzZXJuYW1lcyB0byBiZSByZXZpZXdlZFxyXG4gICAgICogQWRkIGFuIGV4YW1wbGUgb2YgYSB1c2VybmFtZSBmb3IgUXVhbGl0eSBDb250cm9sLiAgVGhpcyB3aWxsIGxhdGVyIGJlIHVzZWQgZm9yICAtIFJlZ3Jlc3Npb24gVGVzdHMgfCBPbmNlIHlvdSBtYXJrIGFuIGl0ZW0gYXMgd3JvbmcgYW5kIGl0IGlzIGZpeGVkIHlvdSB3aWxsIHdhbnQgdG8gYmUgYWJsZSB0byBydW4gaXQgdGhyb3VnaCB0aGUgZmlsdGVyIGFnYWluIHRvIGVuc3VyZSB0aGUgZXJyb3JzIGFyZSBub3QgcmVwcm9kdWNlZCBieSBjcmVhdGluZyBmdXR1cmUgcnVsZXMuIC0gVHJhaW5pbmcgQUkgfCBXZSBjYW4gaW1wcm92ZSB0aGUgZmlsdGVyIGluIHRoZSBmdXR1cmUgYnkgdHJhaW5pbmcgQUkgdG8gcHJlZGljdCB0aGUgcmlza3MgYW5kIGxhYmVscyB5b3UgcHJvdmlkZSBhbmQgaW4gc28gZG9pbmcgY29tYmluZSBhIHJ1bGVzIGJhc2VkIGFwcHJvYWNoIHlvdSBjYW4gY29udHJvbCB3aXRoIHRoZSBmdXp6eSBtYXRjaGluZyBvZiBBSSB0byBmaW5kIHNpbWlsYXIgdGhpbmdzLiBcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIHVwZGF0ZURhdGEgSWYgdGhlIGl0ZW0gYWxyZWFkeSBleGlzdHMgc2hvdWxkIHdlIHVwZGF0ZSB0aGUgdmFsdWVzIG9mIHRoZSBib2R5IGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRVc2VyYW5tZXMoYm9keT86IEFycmF5PFVzZXJuYW1lSW5wdXQ+LCB1cGRhdGVEYXRhPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxJbmxpbmVSZXNwb25zZTIwMT47XHJcbiAgICBwdWJsaWMgYWRkVXNlcmFubWVzKGJvZHk/OiBBcnJheTxVc2VybmFtZUlucHV0PiwgdXBkYXRlRGF0YT86IGJvb2xlYW4sIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJbmxpbmVSZXNwb25zZTIwMT4+O1xyXG4gICAgcHVibGljIGFkZFVzZXJhbm1lcyhib2R5PzogQXJyYXk8VXNlcm5hbWVJbnB1dD4sIHVwZGF0ZURhdGE/OiBib29sZWFuLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PElubGluZVJlc3BvbnNlMjAxPj47XHJcbiAgICBwdWJsaWMgYWRkVXNlcmFubWVzKGJvZHk/OiBBcnJheTxVc2VybmFtZUlucHV0PiwgdXBkYXRlRGF0YT86IGJvb2xlYW4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAodXBkYXRlRGF0YSAhPT0gdW5kZWZpbmVkICYmIHVwZGF0ZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgndXBkYXRlRGF0YScsIDxhbnk+dXBkYXRlRGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxJbmxpbmVSZXNwb25zZTIwMT4oJ3Bvc3QnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlL3VzZXJuYW1lcy9pdGVtc2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGFsbCBpdGVtcyBpbiB0aGlzIHF1ZXVlXHJcbiAgICAgKiBBcyB0aGlzIG1heSB0YWtlIHNvbWUgdGltZSBhbmQgdGhpcyBzZXJ2ZXIgbWF5IGJlIHNjYWxlZCBvdXQgd2Ugd2lsbCBzZXR1cCBhIGxvbmcgcnVubmluZyB0YXNrIHRvIGFjY29tcGxpc2ggdGhpcyBhbmQgdGhhdCB3aWxsIHJlc3RhcnQgaWYgZG9lc24mI3gyNzt0IGZpbmlzaC5cclxuICAgICAqIEBwYXJhbSBjbGllbnRJZCBTaG93IHJlc3VsdHMgZm9yIGEgZ2l2ZW4gY2xpZW50LiAgVHlwaWNhbGx5IHRoaXMgaXMgc2V0IGZvciB5b3UgYnkgdGhlIGludGVybmFsIHN5c3RlbSBiYXNlZCBvbiB0aGUgQVBJX0tFWSB5b3UgYXJlIHVzaW5nLiAgSG93ZXZlciBzb21lIGNsaWVudHMgYXJlIGFsbG93ZWQgdG8gdmlldyBvdGhlciBjbGllbnRzIHN1Y2ggYXMgd2hlbiB0aGV5IGhhdmUgYSBzYW5kYm94IG9yIHdoZW4gdGhleSBhcmUgYSBsYXJnZSBlbnRlcnByaXNlIGFuZCBoYXZlIG11bHRpcGxlIGNsaWVudHMgdGhleSBtYW5hZ2UuICBJdCB3aWxsIG9ubHkgYWxsb3cgeW91IHRvIHZpZXcgY2xpZW50IGRhdGEgeW91IGhhdmUgYWNjZXNzIHRvLlxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlcyBXaGljaCBsYW5ndWFnZXMgZG9lcyB0aGlzIGFwcGx5IHRvXHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxyXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGVsZXRFeGFtcGxlSXRlbXMoY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8YW55PjtcclxuICAgIHB1YmxpYyBkZWxldEV4YW1wbGVJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xyXG4gICAgcHVibGljIGRlbGV0RXhhbXBsZUl0ZW1zKGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xyXG4gICAgcHVibGljIGRlbGV0RXhhbXBsZUl0ZW1zKGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcblxyXG5cclxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IG5ldyBDdXN0b21IdHRwVXJsRW5jb2RpbmdDb2RlYygpfSk7XHJcbiAgICAgICAgaWYgKGNsaWVudElkICE9PSB1bmRlZmluZWQgJiYgY2xpZW50SWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY2xpZW50SWQnLCA8YW55PmNsaWVudElkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlcykge1xyXG4gICAgICAgICAgICBsYW5ndWFnZXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLmFwcGVuZCgnbGFuZ3VhZ2VzJywgPGFueT5lbGVtZW50KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8YW55PignZGVsZXRlJyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS9leGFtcGxlcy9pdGVtc2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxlYXNlIGFsbCBjaGVja291dHMgb24gYSBxdWV1ZVxyXG4gICAgICogU29tZXRpbWVzIHBlb3BsZSBnbyBmb3IgY29mZmVlIGFuZCBzdGlsbCBoYXZlIGl0ZW1zIGNoZWNrZWQgb3V0LiAgV2hlbiB5b3UgZ2V0IGRvd24gdG8gYSBmZXcgaXRlbXMgbGVmdCB0aGlzIGNhbiBiZSBhIHByb2JsZW0uICBUaGlzIHdpbGwgZnJlZSB1cCBhbGwgbm9uLWV4cGlyaW5nIGNoZWNrb3V0cy4gXHJcbiAgICAgKiBAcGFyYW0gcXVldWVJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcXVldWVcclxuICAgICAqIEBwYXJhbSBjbGllbnRJZCBTaG93IHJlc3VsdHMgZm9yIGEgZ2l2ZW4gY2xpZW50LiAgVHlwaWNhbGx5IHRoaXMgaXMgc2V0IGZvciB5b3UgYnkgdGhlIGludGVybmFsIHN5c3RlbSBiYXNlZCBvbiB0aGUgQVBJX0tFWSB5b3UgYXJlIHVzaW5nLiAgSG93ZXZlciBzb21lIGNsaWVudHMgYXJlIGFsbG93ZWQgdG8gdmlldyBvdGhlciBjbGllbnRzIHN1Y2ggYXMgd2hlbiB0aGV5IGhhdmUgYSBzYW5kYm94IG9yIHdoZW4gdGhleSBhcmUgYSBsYXJnZSBlbnRlcnByaXNlIGFuZCBoYXZlIG11bHRpcGxlIGNsaWVudHMgdGhleSBtYW5hZ2UuICBJdCB3aWxsIG9ubHkgYWxsb3cgeW91IHRvIHZpZXcgY2xpZW50IGRhdGEgeW91IGhhdmUgYWNjZXNzIHRvLlxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlcyBXaGljaCBsYW5ndWFnZXMgZG9lcyB0aGlzIGFwcGx5IHRvXHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxyXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGVsZXRlQWxsQ2hlY2tvdXRzKHF1ZXVlSWQ6IHN0cmluZywgY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SW5saW5lUmVzcG9uc2UyMDAxPjtcclxuICAgIHB1YmxpYyBkZWxldGVBbGxDaGVja291dHMocXVldWVJZDogc3RyaW5nLCBjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPElubGluZVJlc3BvbnNlMjAwMT4+O1xyXG4gICAgcHVibGljIGRlbGV0ZUFsbENoZWNrb3V0cyhxdWV1ZUlkOiBzdHJpbmcsIGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PElubGluZVJlc3BvbnNlMjAwMT4+O1xyXG4gICAgcHVibGljIGRlbGV0ZUFsbENoZWNrb3V0cyhxdWV1ZUlkOiBzdHJpbmcsIGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXVlSWQgPT09IG51bGwgfHwgcXVldWVJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHF1ZXVlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVBbGxDaGVja291dHMuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiBjbGllbnRJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjbGllbnRJZCcsIDxhbnk+Y2xpZW50SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCdsYW5ndWFnZXMnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxJbmxpbmVSZXNwb25zZTIwMDE+KCdkZWxldGUnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhxdWV1ZUlkKSl9L2l0ZW1zL2NoZWNrb3V0YCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlbGV0ZSBhIGNvbW1lbnRcclxuICAgICAqIFJlbW92ZSBhIGNvbW1lbnRcclxuICAgICAqIEBwYXJhbSBxdWV1ZUlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0gY29tbWVudElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbW1lbnRcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWxldGVDb21tZW50KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGNvbW1lbnRJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPElubGluZVJlc3BvbnNlMjAwMT47XHJcbiAgICBwdWJsaWMgZGVsZXRlQ29tbWVudChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBjb21tZW50SWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPElubGluZVJlc3BvbnNlMjAwMT4+O1xyXG4gICAgcHVibGljIGRlbGV0ZUNvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgY29tbWVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5saW5lUmVzcG9uc2UyMDAxPj47XHJcbiAgICBwdWJsaWMgZGVsZXRlQ29tbWVudChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBjb21tZW50SWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50SWQgPT09IG51bGwgfHwgY29udGVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29udGVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb21tZW50SWQgPT09IG51bGwgfHwgY29tbWVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29tbWVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8SW5saW5lUmVzcG9uc2UyMDAxPignZGVsZXRlJyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocXVldWVJZCkpfS9pdGVtcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGVudElkKSl9L2NvbW1lbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb21tZW50SWQpKX1gLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFiYW5kb24gYSBjaGVja291dFxyXG4gICAgICogUmVtb3ZlIGEgY2hlY2tvdXQgYXNzaWduZWQgdG8geW91IHdpdGhvdXQgZG9pbmcgYW55IHdvcmsuXHJcbiAgICAgKiBAcGFyYW0gcXVldWVJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcXVldWVcclxuICAgICAqIEBwYXJhbSBjb250ZW50SWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29udGVudFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlbGV0ZUl0ZW1DaGVja291dChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPElubGluZVJlc3BvbnNlMjAwMT47XHJcbiAgICBwdWJsaWMgZGVsZXRlSXRlbUNoZWNrb3V0KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJbmxpbmVSZXNwb25zZTIwMDE+PjtcclxuICAgIHB1YmxpYyBkZWxldGVJdGVtQ2hlY2tvdXQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxJbmxpbmVSZXNwb25zZTIwMDE+PjtcclxuICAgIHB1YmxpYyBkZWxldGVJdGVtQ2hlY2tvdXQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlSXRlbUNoZWNrb3V0LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnRJZCA9PT0gbnVsbCB8fCBjb250ZW50SWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb250ZW50SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVJdGVtQ2hlY2tvdXQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0PElubGluZVJlc3BvbnNlMjAwMT4oJ2RlbGV0ZScsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHF1ZXVlSWQpKX0vaXRlbXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRlbnRJZCkpfS9jaGVja291dGAsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGFsbCBpdGVtcyBpbiB0aGlzIHF1ZXVlXHJcbiAgICAgKiBBcyB0aGlzIG1heSB0YWtlIHNvbWUgdGltZSBhbmQgdGhpcyBzZXJ2ZXIgbWF5IGJlIHNjYWxlZCBvdXQgd2Ugd2lsbCBzZXR1cCBhIGxvbmcgcnVubmluZyB0YXNrIHRvIGFjY29tcGxpc2ggdGhpcyBhbmQgdGhhdCB3aWxsIHJlc3RhcnQgaWYgZG9lc24mI3gyNzt0IGZpbmlzaC5cclxuICAgICAqIEBwYXJhbSBxdWV1ZUlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGNsaWVudElkIFNob3cgcmVzdWx0cyBmb3IgYSBnaXZlbiBjbGllbnQuICBUeXBpY2FsbHkgdGhpcyBpcyBzZXQgZm9yIHlvdSBieSB0aGUgaW50ZXJuYWwgc3lzdGVtIGJhc2VkIG9uIHRoZSBBUElfS0VZIHlvdSBhcmUgdXNpbmcuICBIb3dldmVyIHNvbWUgY2xpZW50cyBhcmUgYWxsb3dlZCB0byB2aWV3IG90aGVyIGNsaWVudHMgc3VjaCBhcyB3aGVuIHRoZXkgaGF2ZSBhIHNhbmRib3ggb3Igd2hlbiB0aGV5IGFyZSBhIGxhcmdlIGVudGVycHJpc2UgYW5kIGhhdmUgbXVsdGlwbGUgY2xpZW50cyB0aGV5IG1hbmFnZS4gIEl0IHdpbGwgb25seSBhbGxvdyB5b3UgdG8gdmlldyBjbGllbnQgZGF0YSB5b3UgaGF2ZSBhY2Nlc3MgdG8uXHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VzIFdoaWNoIGxhbmd1YWdlcyBkb2VzIHRoaXMgYXBwbHkgdG9cclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWxldGVJdGVtcyhxdWV1ZUlkOiBzdHJpbmcsIGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPElubGluZVJlc3BvbnNlMjAwPjtcclxuICAgIHB1YmxpYyBkZWxldGVJdGVtcyhxdWV1ZUlkOiBzdHJpbmcsIGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5saW5lUmVzcG9uc2UyMDA+PjtcclxuICAgIHB1YmxpYyBkZWxldGVJdGVtcyhxdWV1ZUlkOiBzdHJpbmcsIGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PElubGluZVJlc3BvbnNlMjAwPj47XHJcbiAgICBwdWJsaWMgZGVsZXRlSXRlbXMocXVldWVJZDogc3RyaW5nLCBjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlSXRlbXMuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiBjbGllbnRJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjbGllbnRJZCcsIDxhbnk+Y2xpZW50SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCdsYW5ndWFnZXMnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxJbmxpbmVSZXNwb25zZTIwMD4oJ2RlbGV0ZScsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHF1ZXVlSWQpKX0vaXRlbXNgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGEgcGFyYW1cclxuICAgICAqIERlbGV0ZSBhIHBhcmFtIGFuZCB1c2UgdGhlIGRlZmF1bHQgaW5zdGVhZFxyXG4gICAgICogQHBhcmFtIHF1ZXVlSWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1JZCBBIGN1c3RvbSBjb25maWd1cmF0aW9uIGZvciBhIGNsaWVudFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlbGV0ZVBhcmFtKHF1ZXVlSWQ6IHN0cmluZywgcGFyYW1JZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICBwdWJsaWMgZGVsZXRlUGFyYW0ocXVldWVJZDogc3RyaW5nLCBwYXJhbUlkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcclxuICAgIHB1YmxpYyBkZWxldGVQYXJhbShxdWV1ZUlkOiBzdHJpbmcsIHBhcmFtSWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcclxuICAgIHB1YmxpYyBkZWxldGVQYXJhbShxdWV1ZUlkOiBzdHJpbmcsIHBhcmFtSWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlUGFyYW0uJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFyYW1JZCA9PT0gbnVsbCB8fCBwYXJhbUlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcGFyYW1JZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZVBhcmFtLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxhbnk+KCdkZWxldGUnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhxdWV1ZUlkKSl9L3BhcmFtLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhwYXJhbUlkKSl9YCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxldGUgYWxsIGl0ZW1zIGluIHRoaXMgcXVldWVcclxuICAgICAqIEFzIHRoaXMgbWF5IHRha2Ugc29tZSB0aW1lIGFuZCB0aGlzIHNlcnZlciBtYXkgYmUgc2NhbGVkIG91dCB3ZSB3aWxsIHNldHVwIGEgbG9uZyBydW5uaW5nIHRhc2sgdG8gYWNjb21wbGlzaCB0aGlzIGFuZCB0aGF0IHdpbGwgcmVzdGFydCBpZiBkb2VzbiYjeDI3O3QgZmluaXNoLlxyXG4gICAgICogQHBhcmFtIGNsaWVudElkIFNob3cgcmVzdWx0cyBmb3IgYSBnaXZlbiBjbGllbnQuICBUeXBpY2FsbHkgdGhpcyBpcyBzZXQgZm9yIHlvdSBieSB0aGUgaW50ZXJuYWwgc3lzdGVtIGJhc2VkIG9uIHRoZSBBUElfS0VZIHlvdSBhcmUgdXNpbmcuICBIb3dldmVyIHNvbWUgY2xpZW50cyBhcmUgYWxsb3dlZCB0byB2aWV3IG90aGVyIGNsaWVudHMgc3VjaCBhcyB3aGVuIHRoZXkgaGF2ZSBhIHNhbmRib3ggb3Igd2hlbiB0aGV5IGFyZSBhIGxhcmdlIGVudGVycHJpc2UgYW5kIGhhdmUgbXVsdGlwbGUgY2xpZW50cyB0aGV5IG1hbmFnZS4gIEl0IHdpbGwgb25seSBhbGxvdyB5b3UgdG8gdmlldyBjbGllbnQgZGF0YSB5b3UgaGF2ZSBhY2Nlc3MgdG8uXHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VzIFdoaWNoIGxhbmd1YWdlcyBkb2VzIHRoaXMgYXBwbHkgdG9cclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWxldGVSdWxlQXVkaXRJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcHVibGljIGRlbGV0ZVJ1bGVBdWRpdEl0ZW1zKGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XHJcbiAgICBwdWJsaWMgZGVsZXRlUnVsZUF1ZGl0SXRlbXMoY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XHJcbiAgICBwdWJsaWMgZGVsZXRlUnVsZUF1ZGl0SXRlbXMoY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiBjbGllbnRJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjbGllbnRJZCcsIDxhbnk+Y2xpZW50SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCdsYW5ndWFnZXMnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxhbnk+KCdkZWxldGUnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlL3J1bGVzQXVkaXQvaXRlbXNgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGFsbCBpdGVtcyBpbiB0aGlzIHF1ZXVlXHJcbiAgICAgKiBBcyB0aGlzIG1heSB0YWtlIHNvbWUgdGltZSBhbmQgdGhpcyBzZXJ2ZXIgbWF5IGJlIHNjYWxlZCBvdXQgd2Ugd2lsbCBzZXR1cCBhIGxvbmcgcnVubmluZyB0YXNrIHRvIGFjY29tcGxpc2ggdGhpcyBhbmQgdGhhdCB3aWxsIHJlc3RhcnQgaWYgZG9lc24mI3gyNzt0IGZpbmlzaC5cclxuICAgICAqIEBwYXJhbSBjbGllbnRJZCBTaG93IHJlc3VsdHMgZm9yIGEgZ2l2ZW4gY2xpZW50LiAgVHlwaWNhbGx5IHRoaXMgaXMgc2V0IGZvciB5b3UgYnkgdGhlIGludGVybmFsIHN5c3RlbSBiYXNlZCBvbiB0aGUgQVBJX0tFWSB5b3UgYXJlIHVzaW5nLiAgSG93ZXZlciBzb21lIGNsaWVudHMgYXJlIGFsbG93ZWQgdG8gdmlldyBvdGhlciBjbGllbnRzIHN1Y2ggYXMgd2hlbiB0aGV5IGhhdmUgYSBzYW5kYm94IG9yIHdoZW4gdGhleSBhcmUgYSBsYXJnZSBlbnRlcnByaXNlIGFuZCBoYXZlIG11bHRpcGxlIGNsaWVudHMgdGhleSBtYW5hZ2UuICBJdCB3aWxsIG9ubHkgYWxsb3cgeW91IHRvIHZpZXcgY2xpZW50IGRhdGEgeW91IGhhdmUgYWNjZXNzIHRvLlxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlcyBXaGljaCBsYW5ndWFnZXMgZG9lcyB0aGlzIGFwcGx5IHRvXHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxyXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGVsZXRlU3BlbGxpbmdJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcHVibGljIGRlbGV0ZVNwZWxsaW5nSXRlbXMoY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PjtcclxuICAgIHB1YmxpYyBkZWxldGVTcGVsbGluZ0l0ZW1zKGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xyXG4gICAgcHVibGljIGRlbGV0ZVNwZWxsaW5nSXRlbXMoY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiBjbGllbnRJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjbGllbnRJZCcsIDxhbnk+Y2xpZW50SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCdsYW5ndWFnZXMnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxhbnk+KCdkZWxldGUnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlL3NwZWxsaW5nL2l0ZW1zYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlbGV0ZSBhbGwgaXRlbXMgaW4gdGhpcyBxdWV1ZVxyXG4gICAgICogQXMgdGhpcyBtYXkgdGFrZSBzb21lIHRpbWUgYW5kIHRoaXMgc2VydmVyIG1heSBiZSBzY2FsZWQgb3V0IHdlIHdpbGwgc2V0dXAgYSBsb25nIHJ1bm5pbmcgdGFzayB0byBhY2NvbXBsaXNoIHRoaXMgYW5kIHRoYXQgd2lsbCByZXN0YXJ0IGlmIGRvZXNuJiN4Mjc7dCBmaW5pc2guXHJcbiAgICAgKiBAcGFyYW0gY2xpZW50SWQgU2hvdyByZXN1bHRzIGZvciBhIGdpdmVuIGNsaWVudC4gIFR5cGljYWxseSB0aGlzIGlzIHNldCBmb3IgeW91IGJ5IHRoZSBpbnRlcm5hbCBzeXN0ZW0gYmFzZWQgb24gdGhlIEFQSV9LRVkgeW91IGFyZSB1c2luZy4gIEhvd2V2ZXIgc29tZSBjbGllbnRzIGFyZSBhbGxvd2VkIHRvIHZpZXcgb3RoZXIgY2xpZW50cyBzdWNoIGFzIHdoZW4gdGhleSBoYXZlIGEgc2FuZGJveCBvciB3aGVuIHRoZXkgYXJlIGEgbGFyZ2UgZW50ZXJwcmlzZSBhbmQgaGF2ZSBtdWx0aXBsZSBjbGllbnRzIHRoZXkgbWFuYWdlLiAgSXQgd2lsbCBvbmx5IGFsbG93IHlvdSB0byB2aWV3IGNsaWVudCBkYXRhIHlvdSBoYXZlIGFjY2VzcyB0by5cclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZXMgV2hpY2ggbGFuZ3VhZ2VzIGRvZXMgdGhpcyBhcHBseSB0b1xyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlbGV0ZVRhc2tJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcHVibGljIGRlbGV0ZVRhc2tJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xyXG4gICAgcHVibGljIGRlbGV0ZVRhc2tJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcclxuICAgIHB1YmxpYyBkZWxldGVUYXNrSXRlbXMoY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoY2xpZW50SWQgIT09IHVuZGVmaW5lZCAmJiBjbGllbnRJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjbGllbnRJZCcsIDxhbnk+Y2xpZW50SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCdsYW5ndWFnZXMnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxhbnk+KCdkZWxldGUnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlL3Rhc2svaXRlbXNgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGEgdXNlcnMgZGF0YVxyXG4gICAgICogVGhpcyB3aWxsIGRlbGV0ZSBhbGwgZGF0YSB3ZSBoYXZlIG9uIGEgdXNlci4gVGhpcyBpcyByZWNvbW1lbmRlZCBmb3IgR0RQUiBhbmQgQ0NQQSBjb21wbGlhbmNlIGFyb3VuZCB0ZXJtcyBsaWtlIHJpZ2h0IHRvIGJlIGZvcmdldHRlbi4gIFByb2JhYmx5IHdoYXQgeW91IHdhbnQgaW5zdGVhZCBob3dldmVyIGlzIHRvIHBzZXVkb255bWl6ZSBhbGwgdGhlIGRhdGEgd2l0aCBhIHB1dCByZXF1ZXN0IGluc3RlYWQuIFxyXG4gICAgICogQHBhcmFtIHVzZXJJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgdXNlclxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlbGV0ZVVzZXIodXNlcklkOiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8UXVldWU+O1xyXG4gICAgcHVibGljIGRlbGV0ZVVzZXIodXNlcklkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxRdWV1ZT4+O1xyXG4gICAgcHVibGljIGRlbGV0ZVVzZXIodXNlcklkOiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UXVldWU+PjtcclxuICAgIHB1YmxpYyBkZWxldGVVc2VyKHVzZXJJZDogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKHVzZXJJZCA9PT0gbnVsbCB8fCB1c2VySWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciB1c2VySWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBkZWxldGVVc2VyLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxRdWV1ZT4oJ2RlbGV0ZScsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvdXNlci8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodXNlcklkKSl9YCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxldGUgYWxsIGl0ZW1zIGluIHRoaXMgcXVldWVcclxuICAgICAqIEFzIHRoaXMgbWF5IHRha2Ugc29tZSB0aW1lIGFuZCB0aGlzIHNlcnZlciBtYXkgYmUgc2NhbGVkIG91dCB3ZSB3aWxsIHNldHVwIGEgbG9uZyBydW5uaW5nIHRhc2sgdG8gYWNjb21wbGlzaCB0aGlzIGFuZCB0aGF0IHdpbGwgcmVzdGFydCBpZiBkb2VzbiYjeDI3O3QgZmluaXNoLlxyXG4gICAgICogQHBhcmFtIGNsaWVudElkIFNob3cgcmVzdWx0cyBmb3IgYSBnaXZlbiBjbGllbnQuICBUeXBpY2FsbHkgdGhpcyBpcyBzZXQgZm9yIHlvdSBieSB0aGUgaW50ZXJuYWwgc3lzdGVtIGJhc2VkIG9uIHRoZSBBUElfS0VZIHlvdSBhcmUgdXNpbmcuICBIb3dldmVyIHNvbWUgY2xpZW50cyBhcmUgYWxsb3dlZCB0byB2aWV3IG90aGVyIGNsaWVudHMgc3VjaCBhcyB3aGVuIHRoZXkgaGF2ZSBhIHNhbmRib3ggb3Igd2hlbiB0aGV5IGFyZSBhIGxhcmdlIGVudGVycHJpc2UgYW5kIGhhdmUgbXVsdGlwbGUgY2xpZW50cyB0aGV5IG1hbmFnZS4gIEl0IHdpbGwgb25seSBhbGxvdyB5b3UgdG8gdmlldyBjbGllbnQgZGF0YSB5b3UgaGF2ZSBhY2Nlc3MgdG8uXHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VzIFdoaWNoIGxhbmd1YWdlcyBkb2VzIHRoaXMgYXBwbHkgdG9cclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWxldGVVc2VybmFtZUl0ZW1zKGNsaWVudElkPzogbnVtYmVyLCBsYW5ndWFnZXM/OiBBcnJheTxzdHJpbmc+LCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICBwdWJsaWMgZGVsZXRlVXNlcm5hbWVJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xyXG4gICAgcHVibGljIGRlbGV0ZVVzZXJuYW1lSXRlbXMoY2xpZW50SWQ/OiBudW1iZXIsIGxhbmd1YWdlcz86IEFycmF5PHN0cmluZz4sIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XHJcbiAgICBwdWJsaWMgZGVsZXRlVXNlcm5hbWVJdGVtcyhjbGllbnRJZD86IG51bWJlciwgbGFuZ3VhZ2VzPzogQXJyYXk8c3RyaW5nPiwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG5cclxuXHJcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiBuZXcgQ3VzdG9tSHR0cFVybEVuY29kaW5nQ29kZWMoKX0pO1xyXG4gICAgICAgIGlmIChjbGllbnRJZCAhPT0gdW5kZWZpbmVkICYmIGNsaWVudElkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NsaWVudElkJywgPGFueT5jbGllbnRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5ndWFnZXMpIHtcclxuICAgICAgICAgICAgbGFuZ3VhZ2VzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5hcHBlbmQoJ2xhbmd1YWdlcycsIDxhbnk+ZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0PGFueT4oJ2RlbGV0ZScsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvdXNlcm5hbWVzL2l0ZW1zYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIGNvbW1lbnRzXHJcbiAgICAgKiBAcGFyYW0gcXVldWVJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcXVldWVcclxuICAgICAqIEBwYXJhbSBjb250ZW50SWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29udGVudFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENvbW1lbnRzKHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8QXJyYXk8Q29tbWVudD4+O1xyXG4gICAgcHVibGljIGdldENvbW1lbnRzKHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxBcnJheTxDb21tZW50Pj4+O1xyXG4gICAgcHVibGljIGdldENvbW1lbnRzKHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QXJyYXk8Q29tbWVudD4+PjtcclxuICAgIHB1YmxpYyBnZXRDb21tZW50cyhxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXVlSWQgPT09IG51bGwgfHwgcXVldWVJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHF1ZXVlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRDb21tZW50LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnRJZCA9PT0gbnVsbCB8fCBjb250ZW50SWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb250ZW50SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRDb21tZW50LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxDb21tZW50PignZ2V0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocXVldWVJZCkpfS9pdGVtcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGVudElkKSl9L2NvbW1lbnRzYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBjb21tZW50XHJcbiAgICAgKiBHZXQgYSBjb21tZW50IGJ5IElkIGZvciB0aGlzIGl0ZW1cclxuICAgICAqIEBwYXJhbSBxdWV1ZUlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0gY29tbWVudElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbW1lbnRcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDb21tZW50KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGNvbW1lbnRJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPENvbW1lbnQ+O1xyXG4gICAgcHVibGljIGdldENvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgY29tbWVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxDb21tZW50Pj47XHJcbiAgICBwdWJsaWMgZ2V0Q29tbWVudChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBjb21tZW50SWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxDb21tZW50Pj47XHJcbiAgICBwdWJsaWMgZ2V0Q29tbWVudChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBjb21tZW50SWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0Q29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50SWQgPT09IG51bGwgfHwgY29udGVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29udGVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0Q29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb21tZW50SWQgPT09IG51bGwgfHwgY29tbWVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29tbWVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0Q29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8Q29tbWVudD4oJ2dldCcsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHF1ZXVlSWQpKX0vaXRlbXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRlbnRJZCkpfS9jb21tZW50cy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29tbWVudElkKSl9YCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWFyY2ggZm9yIG9yIGNoZWNrb3V0IGl0ZW1zIGluIHRoaXMgcXVldWVcclxuICAgICAqIExvb2t1cCBpdGVtcyBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIFNob3cgcmVzdWx0cyBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlIG9ubHkuICAgVGhpcyBpcyB0aGUgbGFuZ3VhZ2UgdXNlZCwgY291bGQgaGF2ZSBiZWVuIHNldCBieSB0aGUgdXNlciBvciBkZXRlY3RlZCBieSBsYW5ndWFnZSBpZC5cclxuICAgICAqIEBwYXJhbSBhaSBTaG93IGl0ZW1zIHRoZSBBSSBwcmVkaWN0cyBhcyB1c2VmdWwgYmVjYXVzZSBtb2RlcmF0b3JzIGluIHRoZSBwYXN0IGhhdmUgdGFrZW4gYW4gYWN0aW9uIG9uIHRoaXMgaXRlbXMuICBQYXNzaW5nIGFuIGFycmF5IG9mIG9iamVjdHMgYXMgcGFyYW1zIGNhbiBiZSB0cmlja3kgYXQgZmlyc3Qgc28gaGVyZSBpcyBhbiBleGFtcGxlICZhbXA7YWlbMF1bbWluUHJlZGljdGlvbl0mI3gzRDswLjUwJmFtcDthaVswXVttb2RlbE5hbWVdJiN4M0Q7dG9waWNfdnVsZ2FyJmFtcDthaVswXVttYXhQcmVkaWN0aW9uXSYjeDNEOzAuOTUmYW1wO2FpWzFdW21pblByZWRpY3Rpb25dJiN4M0Q7MC4xMCZhbXA7YWlbMV1bbW9kZWxOYW1lXSYjeDNEO3RvcGljX2ZyYXVkJmFtcDthaVsxXVttYXhQcmVkaWN0aW9uXSYjeDNEOzAuODAgIEluIHVybGVuY29kZWQgZm9ybSB0aGF0IHdvdWxkIGJlICZhbXA7YWklNUIwJTVEJTVCbWluUHJlZGljdGlvbiU1RCYjeDNEOzAuNTAmYW1wO2FpJTVCMCU1RCU1Qm1vZGVsTmFtZSU1RCYjeDNEO3RvcGljX3Z1bGdhciZhbXA7YWklNUIwJTVEJTVCbWF4UHJlZGljdGlvbiU1RCYjeDNEOzAuOTUmYW1wO2FpJTVCMSU1RCU1Qm1pblByZWRpY3Rpb24lNUQmI3gzRDswLjEwJmFtcDthaSU1QjElNUQlNUJtb2RlbE5hbWUlNUQmI3gzRDt0b3BpY19mcmF1ZCZhbXA7YWklNUIxJTVEJTVCbWF4UHJlZGljdGlvbiU1RCYjeDNEOzAuODAgXHJcbiAgICAgKiBAcGFyYW0gY2hlY2tvdXQgQ2hlY2tvdXQgdGhpcyBpdGVtIGZvciByZXZpZXdcclxuICAgICAqIEBwYXJhbSBjbGllbnRJZHMgU2hvdyByZXN1bHRzIGZvciBhIGdpdmVuIGNsaWVudC4gIFR5cGljYWxseSB0aGlzIGlzIHNldCBmb3IgeW91IGJ5IHRoZSBpbnRlcm5hbCBzeXN0ZW0gYmFzZWQgb24gdGhlIEFQSV9LRVkgeW91IGFyZSB1c2luZy4gIEhvd2V2ZXIgc29tZSBjbGllbnRzIGFyZSBhbGxvd2VkIHRvIHZpZXcgb3RoZXIgY2xpZW50cyBzdWNoIGFzIHdoZW4gdGhleSBoYXZlIGEgc2FuZGJveCBvciB3aGVuIHRoZXkgYXJlIGEgbGFyZ2UgZW50ZXJwcmlzZSBhbmQgaGF2ZSBtdWx0aXBsZSBjbGllbnRzIHRoZXkgbWFuYWdlLiAgSXQgd2lsbCBvbmx5IGFsbG93IHlvdSB0byB2aWV3IGNsaWVudCBkYXRhIHlvdSBoYXZlIGFjY2VzcyB0by4gWW91IGNhbiBzZXQgdGhpcyB0byAtMSB0byBhcHBseSB0byBhbGwgY2xpZW50cyB5b3UgaGF2ZSBhY2Nlc3MgdG8uXHJcbiAgICAgKiBAcGFyYW0gY29udGVudElkcyBHZXQgdGhlc2Ugc3BlY2lmaWMgY29udGVudElkcy4gIEZyZXF1ZW50bHkgdXNlZCB3aGVuIHlvdSB1c2UgdGhlIFByZXZpb3VzIGJ1dHRvbi5cclxuICAgICAqIEBwYXJhbSBub3RDb250ZW50SWRzIEV4Y2x1ZGUgdGhlc2Ugc3BlY2lmaWMgY29udGVudElkcy4gIE9yaWdpbmFsbHkgZGVzaWduZWQgc28geW91IGNhbiBjYWxsIGNoZWNrb3V0IGFuZCBwYXNzIGluIHRoZSBpdGVtIHlvdSBhcmUgd29ya2luZyBvbiByaWdodCBub3cgYW5kIGl0IHdpbGwgZ2l2ZSB5b3UgYSBkaWZmZXJlbnQgb25lLiAgVGhlIGRlZmF1bHQgY2hlY2tvdXQgYmVoYXZpb3VyIHdpbGwgYXNzaWduIHRoZSBpdGVtcyB5b3UgYWxyZWFkeSBoYXZlIGNoZWNrZWQgb3V0ICAod2hpY2ggaXMgb24geW91ciBzY3JlZW4pLiBcclxuICAgICAqIEBwYXJhbSBlbmREYXRlIFNob3cgcmVzdWx0cyBvY2N1cnJpbmcgYmVmb3JlIHRoZSBnaXZlbiBkYXRlIGluIHVuaXh0aW1lc3RhbXAgKG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaClcclxuICAgICAqIEBwYXJhbSBzdGFydERhdGUgU2hvdyByZXN1bHRzIG9jY3VycmluZyBhZnRlciB0aGUgZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gcmV2aWV3ZWRTdGFydERhdGUgU2hvdyByZXN1bHRzIHRoYXQgd2hlcmUgcmV2aWV3ZWQgYmV0d2VlbiBnaXZlbiBkYXRlIGluIHVuaXh0aW1lc3RhbXAgKG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaClcclxuICAgICAqIEBwYXJhbSByZXZpZXdlZEVuZERhdGUgU2hvdyByZXN1bHRzIHRoYXQgd2hlcmUgcmV2aWV3ZWQgYmV0d2VlbiBnaXZlbiBkYXRlIGluIHVuaXh0aW1lc3RhbXAgKG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaClcclxuICAgICAqIEBwYXJhbSBjaGVja291dEF2YWlsYWJsZSBPbmx5IHNob3cgaXRlbXMgd2hlcmUgdGhlIGl0ZW0gY291bGQgYmUgY2hlY2tlZCBvdXQgYnkgbWUuICBUaGlzIGlzIHRoZSBzYW1lIGFzIGNoZWNrb3V0JiN4M0Q7dHJ1ZSBidXQgaXQgZG9lcyBub3QgY2hlY2sgaXQgb3V0LlxyXG4gICAgICogQHBhcmFtIGRvbmVCeU1vZGVyYXRvcklkIE9ubHkgc2hvdyB3b3JrIGRvbmUgYnkgdGhpcyBtb2RlcmF0b3JJZFxyXG4gICAgICogQHBhcmFtIGxpbWl0IExpbWl0IHRoZSBudW1iZXIgb2YgcmVzdWx0c1xyXG4gICAgICogQHBhcmFtIG9mZnNldCBTdGFydCB0aGUgc2VhcmNoIGZyb20gb2Zmc2V0IDAuICBGb3IgaW5zdGFuY2UgaWYgeW91ciB1c2luZyBwYWdpbmF0aW9uIHBhZ2UgMiB3b3VsZCBiZSBvbiB0b3RhbEl0ZW1zUGVyUGFnZSpwYWdlTnVtLiBcclxuICAgICAqIEBwYXJhbSBzb3J0QnkgV2hhdCBkbyB5b3Ugd2FudCB0byBzb3J0IHRoZSByZXN1bHRzIGJ5ICAtIEZJRk8gfCBGaXJzdCBpbiBGaXJzdCBPdXQsIHRoZSBzYW1lIG9yZGVyIHRoZXkgY2FtZSBpbiAtIFJlY2VudCB8IEhhbmRsZSB0aGUgbW9zdCByZWNlbnQgaXRlbXMgZmlyc3QgLSBQcmlvcml0eSB8IEJ5IHByaW9yaXR5IChpZiBhcHBsaWNhYmxlKS4gIEZvciBxdWFsaXR5IGNvbnRyb2wgbGlrZSBzcGVsbGluZyBpdCBpcyB0aGUgdGltZXMgdXNlZCBzbyBpdCB3aWxsIHNob3cgdGhlIGl0ZW1zIG1pc3NwZWxsZWQgMTAwMCB0aW1lcyBiZWZvcmUgdGhlIG9uZXMgNTAwIHRpbWVzLiAgRm9yIHJlcG9ydGVkIHVzZXJzIGl0IHdpbGwgYmUgdGhlIG9uZXMgd2hlcmUgbXVsdGlwbGUgdXNlcnMgaGF2ZSByZXBvcnRlZCB0aGUgc2FtZSB1c2VyLiAtIEFJIHwgRGVhbCB3aXRoIHRoZSBoaWdlc3QgQUkgcHJlZGljdGlvbnMgZmlyc3QgdGhhdCBwcmVkaWN0IHRoaXMgc2hvdWxkIGJlIHJlbGV2YW50IGZvciBtZS4gIChOT1RFOiB0byBzZWFyY2ggYnkgQUkgeW91IG11c3QgYWxzbyBoYXZlIHNldCB0aGUgYWkubW9kZWxOYW1lIGluIHRoZSBmaXJzdCBpdGVtIG9mIHRoZSBwYXJhbWV0ZXIgYWkpIFxyXG4gICAgICogQHBhcmFtIHRhZ3MgT25seSBmaW5kIGl0ZW1zIG1hdGNoaW5nIGEgY2VydGFpbiB0YWdcclxuICAgICAqIEBwYXJhbSB0ZXh0IFRleHQgc2VhcmNoLiAgVGhpcyB1c2VzIGZ1enp5IG1hdGNoaW5nLlxyXG4gICAgICogQHBhcmFtIHRvcGljcyBPbmx5IHNob3cgaXRlbXMgZm9yIHRoZXNlIHRvcGljcyAodG9waWNJZCkgYmV0d2VlbiByaXNrIGxldmVsIG1pblJpc2sgYW5kIG1heFJpc2tcclxuICAgICAqIEBwYXJhbSB1bnJlc29sdmVkQ29tbWVudHMgV2lsbCBzZWUgaWYgdGhlcmUgYXJlIGFueSB1bnJlc29sdmVkIGNvbW1lbnRzIGZvciB5b3UgYW5kIHNob3cgb25seSB0aG9zZVxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEV4YW1wbGVzKGxhbmd1YWdlOiBzdHJpbmcsIGFpPzogQXJyYXk8QWk+LCBjaGVja291dD86IGJvb2xlYW4sIGNsaWVudElkcz86IEFycmF5PG51bWJlcj4sIGNvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBub3RDb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgZW5kRGF0ZT86IG51bWJlciwgc3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZFN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRFbmREYXRlPzogbnVtYmVyLCBjaGVja291dEF2YWlsYWJsZT86IGJvb2xlYW4sIGRvbmVCeU1vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGxpbWl0PzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIHNvcnRCeT86IHN0cmluZywgdGFncz86IEFycmF5PHN0cmluZz4sIHRleHQ/OiBzdHJpbmcsIHRvcGljcz86IEFycmF5PFRvcGljcz4sIHVucmVzb2x2ZWRDb21tZW50cz86IGJvb2xlYW4sIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8RXhhbXBsZU91dHB1dD47XHJcbiAgICBwdWJsaWMgZ2V0RXhhbXBsZXMobGFuZ3VhZ2U6IHN0cmluZywgYWk/OiBBcnJheTxBaT4sIGNoZWNrb3V0PzogYm9vbGVhbiwgY2xpZW50SWRzPzogQXJyYXk8bnVtYmVyPiwgY29udGVudElkcz86IEFycmF5PHN0cmluZz4sIG5vdENvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBlbmREYXRlPzogbnVtYmVyLCBzdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkU3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZEVuZERhdGU/OiBudW1iZXIsIGNoZWNrb3V0QXZhaWxhYmxlPzogYm9vbGVhbiwgZG9uZUJ5TW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgbGltaXQ/OiBudW1iZXIsIG9mZnNldD86IG51bWJlciwgc29ydEJ5Pzogc3RyaW5nLCB0YWdzPzogQXJyYXk8c3RyaW5nPiwgdGV4dD86IHN0cmluZywgdG9waWNzPzogQXJyYXk8VG9waWNzPiwgdW5yZXNvbHZlZENvbW1lbnRzPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEV4YW1wbGVPdXRwdXQ+PjtcclxuICAgIHB1YmxpYyBnZXRFeGFtcGxlcyhsYW5ndWFnZTogc3RyaW5nLCBhaT86IEFycmF5PEFpPiwgY2hlY2tvdXQ/OiBib29sZWFuLCBjbGllbnRJZHM/OiBBcnJheTxudW1iZXI+LCBjb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgbm90Q29udGVudElkcz86IEFycmF5PHN0cmluZz4sIGVuZERhdGU/OiBudW1iZXIsIHN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRTdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkRW5kRGF0ZT86IG51bWJlciwgY2hlY2tvdXRBdmFpbGFibGU/OiBib29sZWFuLCBkb25lQnlNb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBsaW1pdD86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBzb3J0Qnk/OiBzdHJpbmcsIHRhZ3M/OiBBcnJheTxzdHJpbmc+LCB0ZXh0Pzogc3RyaW5nLCB0b3BpY3M/OiBBcnJheTxUb3BpY3M+LCB1bnJlc29sdmVkQ29tbWVudHM/OiBib29sZWFuLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PEV4YW1wbGVPdXRwdXQ+PjtcclxuICAgIHB1YmxpYyBnZXRFeGFtcGxlcyhsYW5ndWFnZTogc3RyaW5nLCBhaT86IEFycmF5PEFpPiwgY2hlY2tvdXQ/OiBib29sZWFuLCBjbGllbnRJZHM/OiBBcnJheTxudW1iZXI+LCBjb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgbm90Q29udGVudElkcz86IEFycmF5PHN0cmluZz4sIGVuZERhdGU/OiBudW1iZXIsIHN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRTdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkRW5kRGF0ZT86IG51bWJlciwgY2hlY2tvdXRBdmFpbGFibGU/OiBib29sZWFuLCBkb25lQnlNb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBsaW1pdD86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBzb3J0Qnk/OiBzdHJpbmcsIHRhZ3M/OiBBcnJheTxzdHJpbmc+LCB0ZXh0Pzogc3RyaW5nLCB0b3BpY3M/OiBBcnJheTxUb3BpY3M+LCB1bnJlc29sdmVkQ29tbWVudHM/OiBib29sZWFuLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKGxhbmd1YWdlID09PSBudWxsIHx8IGxhbmd1YWdlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgbGFuZ3VhZ2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRFeGFtcGxlcy4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoYWkpIHtcclxuICAgICAgICAgICAgYWkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLmFwcGVuZCgnYWknLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hlY2tvdXQgIT09IHVuZGVmaW5lZCAmJiBjaGVja291dCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjaGVja291dCcsIDxhbnk+Y2hlY2tvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xpZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NsaWVudElkcycsIGNsaWVudElkcy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRlbnRJZHMpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY29udGVudElkcycsIGNvbnRlbnRJZHMuam9pbihDT0xMRUNUSU9OX0ZPUk1BVFNbJ2NzdiddKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub3RDb250ZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ25vdENvbnRlbnRJZHMnLCBub3RDb250ZW50SWRzLmpvaW4oQ09MTEVDVElPTl9GT1JNQVRTWydjc3YnXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kRGF0ZSAhPT0gdW5kZWZpbmVkICYmIGVuZERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnZW5kRGF0ZScsIDxhbnk+ZW5kRGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFydERhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGFydERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnc3RhcnREYXRlJywgPGFueT5zdGFydERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV2aWV3ZWRTdGFydERhdGUgIT09IHVuZGVmaW5lZCAmJiByZXZpZXdlZFN0YXJ0RGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdyZXZpZXdlZFN0YXJ0RGF0ZScsIDxhbnk+cmV2aWV3ZWRTdGFydERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV2aWV3ZWRFbmREYXRlICE9PSB1bmRlZmluZWQgJiYgcmV2aWV3ZWRFbmREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3Jldmlld2VkRW5kRGF0ZScsIDxhbnk+cmV2aWV3ZWRFbmREYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNoZWNrb3V0QXZhaWxhYmxlICE9PSB1bmRlZmluZWQgJiYgY2hlY2tvdXRBdmFpbGFibGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY2hlY2tvdXRBdmFpbGFibGUnLCA8YW55PmNoZWNrb3V0QXZhaWxhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRvbmVCeU1vZGVyYXRvcklkICE9PSB1bmRlZmluZWQgJiYgZG9uZUJ5TW9kZXJhdG9ySWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnZG9uZUJ5TW9kZXJhdG9ySWQnLCA8YW55PmRvbmVCeU1vZGVyYXRvcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlICE9PSB1bmRlZmluZWQgJiYgbGFuZ3VhZ2UgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnbGFuZ3VhZ2UnLCA8YW55Pmxhbmd1YWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpbWl0ICE9PSB1bmRlZmluZWQgJiYgbGltaXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnbGltaXQnLCA8YW55PmxpbWl0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdvZmZzZXQnLCA8YW55Pm9mZnNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzb3J0QnkgIT09IHVuZGVmaW5lZCAmJiBzb3J0QnkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnc29ydEJ5JywgPGFueT5zb3J0QnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGFncykge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCd0YWdzJywgdGFncy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRleHQgIT09IHVuZGVmaW5lZCAmJiB0ZXh0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3RleHQnLCA8YW55PnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG9waWNzKSB7XHJcbiAgICAgICAgICAgIHRvcGljcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCd0b3BpY3MnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5yZXNvbHZlZENvbW1lbnRzICE9PSB1bmRlZmluZWQgJiYgdW5yZXNvbHZlZENvbW1lbnRzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3VucmVzb2x2ZWRDb21tZW50cycsIDxhbnk+dW5yZXNvbHZlZENvbW1lbnRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8RXhhbXBsZU91dHB1dD4oJ2dldCcsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvZXhhbXBsZXMvaXRlbXNgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbGlzdCBhbGwgcXVldWVzIHdpdGggcGVuZGluZyBhbmQgdG90YWwgY291bnRzXHJcbiAgICAgKiBXaWxsIGxpc3QgYWxsIHRoZSBxdWV1ZXMgdGhhdCBhcmUgYXZhaWxhYmxlIGFuZCB0aGUgY291bnQgb2YgaXRlbXMgaW4gdGhlbVxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEluYm94KG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8QXJyYXk8UXVldWU+PjtcclxuICAgIHB1YmxpYyBnZXRJbmJveChvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXJyYXk8UXVldWU+Pj47XHJcbiAgICBwdWJsaWMgZ2V0SW5ib3gob2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBcnJheTxRdWV1ZT4+PjtcclxuICAgIHB1YmxpYyBnZXRJbmJveChvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxBcnJheTxRdWV1ZT4+KCdnZXQnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94YCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGNoZWNrb3V0IGZvciB0aGlzIGl0ZW1cclxuICAgICAqIEdldCB0aGUgY2hlY2tvdXQgZm9yIHRoaXMgaXRlbVxyXG4gICAgICogQHBhcmFtIHF1ZXVlSWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gY29udGVudElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRJdGVtQ2hlY2tvdXQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxDaGVja291dD47XHJcbiAgICBwdWJsaWMgZ2V0SXRlbUNoZWNrb3V0KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxDaGVja291dD4+O1xyXG4gICAgcHVibGljIGdldEl0ZW1DaGVja291dChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PENoZWNrb3V0Pj47XHJcbiAgICBwdWJsaWMgZ2V0SXRlbUNoZWNrb3V0KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuICAgICAgICBpZiAocXVldWVJZCA9PT0gbnVsbCB8fCBxdWV1ZUlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcXVldWVJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEl0ZW1DaGVja291dC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50SWQgPT09IG51bGwgfHwgY29udGVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29udGVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0SXRlbUNoZWNrb3V0LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxDaGVja291dD4oJ2dldCcsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHF1ZXVlSWQpKX0vaXRlbXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRlbnRJZCkpfS9jaGVja291dGAsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBxdWV1ZVxyXG4gICAgICogQSBRdWV1ZSBpcyBhIGdyb3VwIG9mIHdvcmsgdG8gYmUgZG9uZSBieSBtb2RlcmF0b3JzLiAgVGhpcyB3aWxsIGdldCB0aGUgcXVldWUgYW5kIGl0JiN4Mjc7cyBpbmZvcm1hdGlvblxyXG4gICAgICogQHBhcmFtIHF1ZXVlSWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxyXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UXVldWUocXVldWVJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFF1ZXVlPjtcclxuICAgIHB1YmxpYyBnZXRRdWV1ZShxdWV1ZUlkOiBzdHJpbmcsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxRdWV1ZT4+O1xyXG4gICAgcHVibGljIGdldFF1ZXVlKHF1ZXVlSWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxRdWV1ZT4+O1xyXG4gICAgcHVibGljIGdldFF1ZXVlKHF1ZXVlSWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UXVldWUuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0PFF1ZXVlPignZ2V0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocXVldWVJZCkpfWAsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VhcmNoIGZvciBpdGVtcyBpbiB0aGlzIHF1ZXVlXHJcbiAgICAgKiBMb29rdXAgaXRlbXMgZm9yIHRoaXMgcXVldWVcclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZSBTaG93IHJlc3VsdHMgZm9yIHRoZSBnaXZlbiBsYW5ndWFnZSBvbmx5LiAgIFRoaXMgaXMgdGhlIGxhbmd1YWdlIHVzZWQsIGNvdWxkIGhhdmUgYmVlbiBzZXQgYnkgdGhlIHVzZXIgb3IgZGV0ZWN0ZWQgYnkgbGFuZ3VhZ2UgaWQuXHJcbiAgICAgKiBAcGFyYW0gYWkgU2hvdyBpdGVtcyB0aGUgQUkgcHJlZGljdHMgYXMgdXNlZnVsIGJlY2F1c2UgbW9kZXJhdG9ycyBpbiB0aGUgcGFzdCBoYXZlIHRha2VuIGFuIGFjdGlvbiBvbiB0aGlzIGl0ZW1zLiAgUGFzc2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFzIHBhcmFtcyBjYW4gYmUgdHJpY2t5IGF0IGZpcnN0IHNvIGhlcmUgaXMgYW4gZXhhbXBsZSAmYW1wO2FpWzBdW21pblByZWRpY3Rpb25dJiN4M0Q7MC41MCZhbXA7YWlbMF1bbW9kZWxOYW1lXSYjeDNEO3RvcGljX3Z1bGdhciZhbXA7YWlbMF1bbWF4UHJlZGljdGlvbl0mI3gzRDswLjk1JmFtcDthaVsxXVttaW5QcmVkaWN0aW9uXSYjeDNEOzAuMTAmYW1wO2FpWzFdW21vZGVsTmFtZV0mI3gzRDt0b3BpY19mcmF1ZCZhbXA7YWlbMV1bbWF4UHJlZGljdGlvbl0mI3gzRDswLjgwICBJbiB1cmxlbmNvZGVkIGZvcm0gdGhhdCB3b3VsZCBiZSAmYW1wO2FpJTVCMCU1RCU1Qm1pblByZWRpY3Rpb24lNUQmI3gzRDswLjUwJmFtcDthaSU1QjAlNUQlNUJtb2RlbE5hbWUlNUQmI3gzRDt0b3BpY192dWxnYXImYW1wO2FpJTVCMCU1RCU1Qm1heFByZWRpY3Rpb24lNUQmI3gzRDswLjk1JmFtcDthaSU1QjElNUQlNUJtaW5QcmVkaWN0aW9uJTVEJiN4M0Q7MC4xMCZhbXA7YWklNUIxJTVEJTVCbW9kZWxOYW1lJTVEJiN4M0Q7dG9waWNfZnJhdWQmYW1wO2FpJTVCMSU1RCU1Qm1heFByZWRpY3Rpb24lNUQmI3gzRDswLjgwIFxyXG4gICAgICogQHBhcmFtIGNoZWNrb3V0IENoZWNrb3V0IHRoaXMgaXRlbSBmb3IgcmV2aWV3XHJcbiAgICAgKiBAcGFyYW0gY2xpZW50SWRzIFNob3cgcmVzdWx0cyBmb3IgYSBnaXZlbiBjbGllbnQuICBUeXBpY2FsbHkgdGhpcyBpcyBzZXQgZm9yIHlvdSBieSB0aGUgaW50ZXJuYWwgc3lzdGVtIGJhc2VkIG9uIHRoZSBBUElfS0VZIHlvdSBhcmUgdXNpbmcuICBIb3dldmVyIHNvbWUgY2xpZW50cyBhcmUgYWxsb3dlZCB0byB2aWV3IG90aGVyIGNsaWVudHMgc3VjaCBhcyB3aGVuIHRoZXkgaGF2ZSBhIHNhbmRib3ggb3Igd2hlbiB0aGV5IGFyZSBhIGxhcmdlIGVudGVycHJpc2UgYW5kIGhhdmUgbXVsdGlwbGUgY2xpZW50cyB0aGV5IG1hbmFnZS4gIEl0IHdpbGwgb25seSBhbGxvdyB5b3UgdG8gdmlldyBjbGllbnQgZGF0YSB5b3UgaGF2ZSBhY2Nlc3MgdG8uIFlvdSBjYW4gc2V0IHRoaXMgdG8gLTEgdG8gYXBwbHkgdG8gYWxsIGNsaWVudHMgeW91IGhhdmUgYWNjZXNzIHRvLlxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJZHMgR2V0IHRoZXNlIHNwZWNpZmljIGNvbnRlbnRJZHMuICBGcmVxdWVudGx5IHVzZWQgd2hlbiB5b3UgdXNlIHRoZSBQcmV2aW91cyBidXR0b24uXHJcbiAgICAgKiBAcGFyYW0gbm90Q29udGVudElkcyBFeGNsdWRlIHRoZXNlIHNwZWNpZmljIGNvbnRlbnRJZHMuICBPcmlnaW5hbGx5IGRlc2lnbmVkIHNvIHlvdSBjYW4gY2FsbCBjaGVja291dCBhbmQgcGFzcyBpbiB0aGUgaXRlbSB5b3UgYXJlIHdvcmtpbmcgb24gcmlnaHQgbm93IGFuZCBpdCB3aWxsIGdpdmUgeW91IGEgZGlmZmVyZW50IG9uZS4gIFRoZSBkZWZhdWx0IGNoZWNrb3V0IGJlaGF2aW91ciB3aWxsIGFzc2lnbiB0aGUgaXRlbXMgeW91IGFscmVhZHkgaGF2ZSBjaGVja2VkIG91dCAgKHdoaWNoIGlzIG9uIHlvdXIgc2NyZWVuKS4gXHJcbiAgICAgKiBAcGFyYW0gZW5kRGF0ZSBTaG93IHJlc3VsdHMgb2NjdXJyaW5nIGJlZm9yZSB0aGUgZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gc3RhcnREYXRlIFNob3cgcmVzdWx0cyBvY2N1cnJpbmcgYWZ0ZXIgdGhlIGdpdmVuIGRhdGUgaW4gdW5peHRpbWVzdGFtcCAobWlsbGlzZWNvbmRzIHNpbmNlIEVwb2NoKVxyXG4gICAgICogQHBhcmFtIHJldmlld2VkU3RhcnREYXRlIFNob3cgcmVzdWx0cyB0aGF0IHdoZXJlIHJldmlld2VkIGJldHdlZW4gZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gcmV2aWV3ZWRFbmREYXRlIFNob3cgcmVzdWx0cyB0aGF0IHdoZXJlIHJldmlld2VkIGJldHdlZW4gZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gY2hlY2tvdXRBdmFpbGFibGUgT25seSBzaG93IGl0ZW1zIHdoZXJlIHRoZSBpdGVtIGNvdWxkIGJlIGNoZWNrZWQgb3V0IGJ5IG1lLiAgVGhpcyBpcyB0aGUgc2FtZSBhcyBjaGVja291dCYjeDNEO3RydWUgYnV0IGl0IGRvZXMgbm90IGNoZWNrIGl0IG91dC5cclxuICAgICAqIEBwYXJhbSBkb25lQnlNb2RlcmF0b3JJZCBPbmx5IHNob3cgd29yayBkb25lIGJ5IHRoaXMgbW9kZXJhdG9ySWRcclxuICAgICAqIEBwYXJhbSBsaW1pdCBMaW1pdCB0aGUgbnVtYmVyIG9mIHJlc3VsdHNcclxuICAgICAqIEBwYXJhbSBvZmZzZXQgU3RhcnQgdGhlIHNlYXJjaCBmcm9tIG9mZnNldCAwLiAgRm9yIGluc3RhbmNlIGlmIHlvdXIgdXNpbmcgcGFnaW5hdGlvbiBwYWdlIDIgd291bGQgYmUgb24gdG90YWxJdGVtc1BlclBhZ2UqcGFnZU51bS4gXHJcbiAgICAgKiBAcGFyYW0gc29ydEJ5IFdoYXQgZG8geW91IHdhbnQgdG8gc29ydCB0aGUgcmVzdWx0cyBieSAgLSBGSUZPIHwgRmlyc3QgaW4gRmlyc3QgT3V0LCB0aGUgc2FtZSBvcmRlciB0aGV5IGNhbWUgaW4gLSBSZWNlbnQgfCBIYW5kbGUgdGhlIG1vc3QgcmVjZW50IGl0ZW1zIGZpcnN0IC0gUHJpb3JpdHkgfCBCeSBwcmlvcml0eSAoaWYgYXBwbGljYWJsZSkuICBGb3IgcXVhbGl0eSBjb250cm9sIGxpa2Ugc3BlbGxpbmcgaXQgaXMgdGhlIHRpbWVzIHVzZWQgc28gaXQgd2lsbCBzaG93IHRoZSBpdGVtcyBtaXNzcGVsbGVkIDEwMDAgdGltZXMgYmVmb3JlIHRoZSBvbmVzIDUwMCB0aW1lcy4gIEZvciByZXBvcnRlZCB1c2VycyBpdCB3aWxsIGJlIHRoZSBvbmVzIHdoZXJlIG11bHRpcGxlIHVzZXJzIGhhdmUgcmVwb3J0ZWQgdGhlIHNhbWUgdXNlci4gLSBBSSB8IERlYWwgd2l0aCB0aGUgaGlnZXN0IEFJIHByZWRpY3Rpb25zIGZpcnN0IHRoYXQgcHJlZGljdCB0aGlzIHNob3VsZCBiZSByZWxldmFudCBmb3IgbWUuICAoTk9URTogdG8gc2VhcmNoIGJ5IEFJIHlvdSBtdXN0IGFsc28gaGF2ZSBzZXQgdGhlIGFpLm1vZGVsTmFtZSBpbiB0aGUgZmlyc3QgaXRlbSBvZiB0aGUgcGFyYW1ldGVyIGFpKSBcclxuICAgICAqIEBwYXJhbSB0YWdzIE9ubHkgZmluZCBpdGVtcyBtYXRjaGluZyBhIGNlcnRhaW4gdGFnXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBUZXh0IHNlYXJjaC4gIFRoaXMgdXNlcyBmdXp6eSBtYXRjaGluZy5cclxuICAgICAqIEBwYXJhbSB0b3BpY3MgT25seSBzaG93IGl0ZW1zIGZvciB0aGVzZSB0b3BpY3MgKHRvcGljSWQpIGJldHdlZW4gcmlzayBsZXZlbCBtaW5SaXNrIGFuZCBtYXhSaXNrXHJcbiAgICAgKiBAcGFyYW0gdW5yZXNvbHZlZENvbW1lbnRzIFdpbGwgc2VlIGlmIHRoZXJlIGFyZSBhbnkgdW5yZXNvbHZlZCBjb21tZW50cyBmb3IgeW91IGFuZCBzaG93IG9ubHkgdGhvc2VcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSdWxlQXVkaXRJdGVtcyhsYW5ndWFnZTogc3RyaW5nLCBhaT86IEFycmF5PEFpPiwgY2hlY2tvdXQ/OiBib29sZWFuLCBjbGllbnRJZHM/OiBBcnJheTxudW1iZXI+LCBjb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgbm90Q29udGVudElkcz86IEFycmF5PHN0cmluZz4sIGVuZERhdGU/OiBudW1iZXIsIHN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRTdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkRW5kRGF0ZT86IG51bWJlciwgY2hlY2tvdXRBdmFpbGFibGU/OiBib29sZWFuLCBkb25lQnlNb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBsaW1pdD86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBzb3J0Qnk/OiBzdHJpbmcsIHRhZ3M/OiBBcnJheTxzdHJpbmc+LCB0ZXh0Pzogc3RyaW5nLCB0b3BpY3M/OiBBcnJheTxUb3BpY3M+LCB1bnJlc29sdmVkQ29tbWVudHM/OiBib29sZWFuLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFJ1bGVBdWRpdE91dHB1dD47XHJcbiAgICBwdWJsaWMgZ2V0UnVsZUF1ZGl0SXRlbXMobGFuZ3VhZ2U6IHN0cmluZywgYWk/OiBBcnJheTxBaT4sIGNoZWNrb3V0PzogYm9vbGVhbiwgY2xpZW50SWRzPzogQXJyYXk8bnVtYmVyPiwgY29udGVudElkcz86IEFycmF5PHN0cmluZz4sIG5vdENvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBlbmREYXRlPzogbnVtYmVyLCBzdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkU3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZEVuZERhdGU/OiBudW1iZXIsIGNoZWNrb3V0QXZhaWxhYmxlPzogYm9vbGVhbiwgZG9uZUJ5TW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgbGltaXQ/OiBudW1iZXIsIG9mZnNldD86IG51bWJlciwgc29ydEJ5Pzogc3RyaW5nLCB0YWdzPzogQXJyYXk8c3RyaW5nPiwgdGV4dD86IHN0cmluZywgdG9waWNzPzogQXJyYXk8VG9waWNzPiwgdW5yZXNvbHZlZENvbW1lbnRzPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFJ1bGVBdWRpdE91dHB1dD4+O1xyXG4gICAgcHVibGljIGdldFJ1bGVBdWRpdEl0ZW1zKGxhbmd1YWdlOiBzdHJpbmcsIGFpPzogQXJyYXk8QWk+LCBjaGVja291dD86IGJvb2xlYW4sIGNsaWVudElkcz86IEFycmF5PG51bWJlcj4sIGNvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBub3RDb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgZW5kRGF0ZT86IG51bWJlciwgc3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZFN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRFbmREYXRlPzogbnVtYmVyLCBjaGVja291dEF2YWlsYWJsZT86IGJvb2xlYW4sIGRvbmVCeU1vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGxpbWl0PzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIHNvcnRCeT86IHN0cmluZywgdGFncz86IEFycmF5PHN0cmluZz4sIHRleHQ/OiBzdHJpbmcsIHRvcGljcz86IEFycmF5PFRvcGljcz4sIHVucmVzb2x2ZWRDb21tZW50cz86IGJvb2xlYW4sIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8UnVsZUF1ZGl0T3V0cHV0Pj47XHJcbiAgICBwdWJsaWMgZ2V0UnVsZUF1ZGl0SXRlbXMobGFuZ3VhZ2U6IHN0cmluZywgYWk/OiBBcnJheTxBaT4sIGNoZWNrb3V0PzogYm9vbGVhbiwgY2xpZW50SWRzPzogQXJyYXk8bnVtYmVyPiwgY29udGVudElkcz86IEFycmF5PHN0cmluZz4sIG5vdENvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBlbmREYXRlPzogbnVtYmVyLCBzdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkU3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZEVuZERhdGU/OiBudW1iZXIsIGNoZWNrb3V0QXZhaWxhYmxlPzogYm9vbGVhbiwgZG9uZUJ5TW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgbGltaXQ/OiBudW1iZXIsIG9mZnNldD86IG51bWJlciwgc29ydEJ5Pzogc3RyaW5nLCB0YWdzPzogQXJyYXk8c3RyaW5nPiwgdGV4dD86IHN0cmluZywgdG9waWNzPzogQXJyYXk8VG9waWNzPiwgdW5yZXNvbHZlZENvbW1lbnRzPzogYm9vbGVhbiwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChsYW5ndWFnZSA9PT0gbnVsbCB8fCBsYW5ndWFnZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGxhbmd1YWdlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0UnVsZUF1ZGl0SXRlbXMuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IG5ldyBDdXN0b21IdHRwVXJsRW5jb2RpbmdDb2RlYygpfSk7XHJcbiAgICAgICAgaWYgKGFpKSB7XHJcbiAgICAgICAgICAgIGFpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5hcHBlbmQoJ2FpJywgPGFueT5lbGVtZW50KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNoZWNrb3V0ICE9PSB1bmRlZmluZWQgJiYgY2hlY2tvdXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY2hlY2tvdXQnLCA8YW55PmNoZWNrb3V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsaWVudElkcykge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjbGllbnRJZHMnLCBjbGllbnRJZHMuam9pbihDT0xMRUNUSU9OX0ZPUk1BVFNbJ2NzdiddKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NvbnRlbnRJZHMnLCBjb250ZW50SWRzLmpvaW4oQ09MTEVDVElPTl9GT1JNQVRTWydjc3YnXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm90Q29udGVudElkcykge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdub3RDb250ZW50SWRzJywgbm90Q29udGVudElkcy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVuZERhdGUgIT09IHVuZGVmaW5lZCAmJiBlbmREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2VuZERhdGUnLCA8YW55PmVuZERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhcnREYXRlICE9PSB1bmRlZmluZWQgJiYgc3RhcnREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3N0YXJ0RGF0ZScsIDxhbnk+c3RhcnREYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJldmlld2VkU3RhcnREYXRlICE9PSB1bmRlZmluZWQgJiYgcmV2aWV3ZWRTdGFydERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgncmV2aWV3ZWRTdGFydERhdGUnLCA8YW55PnJldmlld2VkU3RhcnREYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJldmlld2VkRW5kRGF0ZSAhPT0gdW5kZWZpbmVkICYmIHJldmlld2VkRW5kRGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdyZXZpZXdlZEVuZERhdGUnLCA8YW55PnJldmlld2VkRW5kRGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGVja291dEF2YWlsYWJsZSAhPT0gdW5kZWZpbmVkICYmIGNoZWNrb3V0QXZhaWxhYmxlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NoZWNrb3V0QXZhaWxhYmxlJywgPGFueT5jaGVja291dEF2YWlsYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkb25lQnlNb2RlcmF0b3JJZCAhPT0gdW5kZWZpbmVkICYmIGRvbmVCeU1vZGVyYXRvcklkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2RvbmVCeU1vZGVyYXRvcklkJywgPGFueT5kb25lQnlNb2RlcmF0b3JJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYW5ndWFnZSAhPT0gdW5kZWZpbmVkICYmIGxhbmd1YWdlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2xhbmd1YWdlJywgPGFueT5sYW5ndWFnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsaW1pdCAhPT0gdW5kZWZpbmVkICYmIGxpbWl0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2xpbWl0JywgPGFueT5saW1pdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnb2Zmc2V0JywgPGFueT5vZmZzZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc29ydEJ5ICE9PSB1bmRlZmluZWQgJiYgc29ydEJ5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3NvcnRCeScsIDxhbnk+c29ydEJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRhZ3MpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgndGFncycsIHRhZ3Muam9pbihDT0xMRUNUSU9OX0ZPUk1BVFNbJ2NzdiddKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ZXh0ICE9PSB1bmRlZmluZWQgJiYgdGV4dCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCd0ZXh0JywgPGFueT50ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvcGljcykge1xyXG4gICAgICAgICAgICB0b3BpY3MuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLmFwcGVuZCgndG9waWNzJywgPGFueT5lbGVtZW50KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVucmVzb2x2ZWRDb21tZW50cyAhPT0gdW5kZWZpbmVkICYmIHVucmVzb2x2ZWRDb21tZW50cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCd1bnJlc29sdmVkQ29tbWVudHMnLCA8YW55PnVucmVzb2x2ZWRDb21tZW50cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0PFJ1bGVBdWRpdE91dHB1dD4oJ2dldCcsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvcnVsZXNBdWRpdC9pdGVtc2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWFyY2ggZm9yIG9yIGNoZWNrb3V0IGl0ZW1zIGluIHRoaXMgcXVldWVcclxuICAgICAqIExvb2t1cCBpdGVtcyBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIFNob3cgcmVzdWx0cyBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlIG9ubHkuICAgVGhpcyBpcyB0aGUgbGFuZ3VhZ2UgdXNlZCwgY291bGQgaGF2ZSBiZWVuIHNldCBieSB0aGUgdXNlciBvciBkZXRlY3RlZCBieSBsYW5ndWFnZSBpZC5cclxuICAgICAqIEBwYXJhbSBhaSBTaG93IGl0ZW1zIHRoZSBBSSBwcmVkaWN0cyBhcyB1c2VmdWwgYmVjYXVzZSBtb2RlcmF0b3JzIGluIHRoZSBwYXN0IGhhdmUgdGFrZW4gYW4gYWN0aW9uIG9uIHRoaXMgaXRlbXMuICBQYXNzaW5nIGFuIGFycmF5IG9mIG9iamVjdHMgYXMgcGFyYW1zIGNhbiBiZSB0cmlja3kgYXQgZmlyc3Qgc28gaGVyZSBpcyBhbiBleGFtcGxlICZhbXA7YWlbMF1bbWluUHJlZGljdGlvbl0mI3gzRDswLjUwJmFtcDthaVswXVttb2RlbE5hbWVdJiN4M0Q7dG9waWNfdnVsZ2FyJmFtcDthaVswXVttYXhQcmVkaWN0aW9uXSYjeDNEOzAuOTUmYW1wO2FpWzFdW21pblByZWRpY3Rpb25dJiN4M0Q7MC4xMCZhbXA7YWlbMV1bbW9kZWxOYW1lXSYjeDNEO3RvcGljX2ZyYXVkJmFtcDthaVsxXVttYXhQcmVkaWN0aW9uXSYjeDNEOzAuODAgIEluIHVybGVuY29kZWQgZm9ybSB0aGF0IHdvdWxkIGJlICZhbXA7YWklNUIwJTVEJTVCbWluUHJlZGljdGlvbiU1RCYjeDNEOzAuNTAmYW1wO2FpJTVCMCU1RCU1Qm1vZGVsTmFtZSU1RCYjeDNEO3RvcGljX3Z1bGdhciZhbXA7YWklNUIwJTVEJTVCbWF4UHJlZGljdGlvbiU1RCYjeDNEOzAuOTUmYW1wO2FpJTVCMSU1RCU1Qm1pblByZWRpY3Rpb24lNUQmI3gzRDswLjEwJmFtcDthaSU1QjElNUQlNUJtb2RlbE5hbWUlNUQmI3gzRDt0b3BpY19mcmF1ZCZhbXA7YWklNUIxJTVEJTVCbWF4UHJlZGljdGlvbiU1RCYjeDNEOzAuODAgXHJcbiAgICAgKiBAcGFyYW0gY2hlY2tvdXQgQ2hlY2tvdXQgdGhpcyBpdGVtIGZvciByZXZpZXdcclxuICAgICAqIEBwYXJhbSBjbGllbnRJZHMgU2hvdyByZXN1bHRzIGZvciBhIGdpdmVuIGNsaWVudC4gIFR5cGljYWxseSB0aGlzIGlzIHNldCBmb3IgeW91IGJ5IHRoZSBpbnRlcm5hbCBzeXN0ZW0gYmFzZWQgb24gdGhlIEFQSV9LRVkgeW91IGFyZSB1c2luZy4gIEhvd2V2ZXIgc29tZSBjbGllbnRzIGFyZSBhbGxvd2VkIHRvIHZpZXcgb3RoZXIgY2xpZW50cyBzdWNoIGFzIHdoZW4gdGhleSBoYXZlIGEgc2FuZGJveCBvciB3aGVuIHRoZXkgYXJlIGEgbGFyZ2UgZW50ZXJwcmlzZSBhbmQgaGF2ZSBtdWx0aXBsZSBjbGllbnRzIHRoZXkgbWFuYWdlLiAgSXQgd2lsbCBvbmx5IGFsbG93IHlvdSB0byB2aWV3IGNsaWVudCBkYXRhIHlvdSBoYXZlIGFjY2VzcyB0by4gWW91IGNhbiBzZXQgdGhpcyB0byAtMSB0byBhcHBseSB0byBhbGwgY2xpZW50cyB5b3UgaGF2ZSBhY2Nlc3MgdG8uXHJcbiAgICAgKiBAcGFyYW0gY29udGVudElkcyBHZXQgdGhlc2Ugc3BlY2lmaWMgY29udGVudElkcy4gIEZyZXF1ZW50bHkgdXNlZCB3aGVuIHlvdSB1c2UgdGhlIFByZXZpb3VzIGJ1dHRvbi5cclxuICAgICAqIEBwYXJhbSBub3RDb250ZW50SWRzIEV4Y2x1ZGUgdGhlc2Ugc3BlY2lmaWMgY29udGVudElkcy4gIE9yaWdpbmFsbHkgZGVzaWduZWQgc28geW91IGNhbiBjYWxsIGNoZWNrb3V0IGFuZCBwYXNzIGluIHRoZSBpdGVtIHlvdSBhcmUgd29ya2luZyBvbiByaWdodCBub3cgYW5kIGl0IHdpbGwgZ2l2ZSB5b3UgYSBkaWZmZXJlbnQgb25lLiAgVGhlIGRlZmF1bHQgY2hlY2tvdXQgYmVoYXZpb3VyIHdpbGwgYXNzaWduIHRoZSBpdGVtcyB5b3UgYWxyZWFkeSBoYXZlIGNoZWNrZWQgb3V0ICAod2hpY2ggaXMgb24geW91ciBzY3JlZW4pLiBcclxuICAgICAqIEBwYXJhbSBlbmREYXRlIFNob3cgcmVzdWx0cyBvY2N1cnJpbmcgYmVmb3JlIHRoZSBnaXZlbiBkYXRlIGluIHVuaXh0aW1lc3RhbXAgKG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaClcclxuICAgICAqIEBwYXJhbSBzdGFydERhdGUgU2hvdyByZXN1bHRzIG9jY3VycmluZyBhZnRlciB0aGUgZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gcmV2aWV3ZWRTdGFydERhdGUgU2hvdyByZXN1bHRzIHRoYXQgd2hlcmUgcmV2aWV3ZWQgYmV0d2VlbiBnaXZlbiBkYXRlIGluIHVuaXh0aW1lc3RhbXAgKG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaClcclxuICAgICAqIEBwYXJhbSByZXZpZXdlZEVuZERhdGUgU2hvdyByZXN1bHRzIHRoYXQgd2hlcmUgcmV2aWV3ZWQgYmV0d2VlbiBnaXZlbiBkYXRlIGluIHVuaXh0aW1lc3RhbXAgKG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaClcclxuICAgICAqIEBwYXJhbSBjaGVja291dEF2YWlsYWJsZSBPbmx5IHNob3cgaXRlbXMgd2hlcmUgdGhlIGl0ZW0gY291bGQgYmUgY2hlY2tlZCBvdXQgYnkgbWUuICBUaGlzIGlzIHRoZSBzYW1lIGFzIGNoZWNrb3V0JiN4M0Q7dHJ1ZSBidXQgaXQgZG9lcyBub3QgY2hlY2sgaXQgb3V0LlxyXG4gICAgICogQHBhcmFtIGRvbmVCeU1vZGVyYXRvcklkIE9ubHkgc2hvdyB3b3JrIGRvbmUgYnkgdGhpcyBtb2RlcmF0b3JJZFxyXG4gICAgICogQHBhcmFtIGxpbWl0IExpbWl0IHRoZSBudW1iZXIgb2YgcmVzdWx0c1xyXG4gICAgICogQHBhcmFtIG9mZnNldCBTdGFydCB0aGUgc2VhcmNoIGZyb20gb2Zmc2V0IDAuICBGb3IgaW5zdGFuY2UgaWYgeW91ciB1c2luZyBwYWdpbmF0aW9uIHBhZ2UgMiB3b3VsZCBiZSBvbiB0b3RhbEl0ZW1zUGVyUGFnZSpwYWdlTnVtLiBcclxuICAgICAqIEBwYXJhbSBzb3J0QnkgV2hhdCBkbyB5b3Ugd2FudCB0byBzb3J0IHRoZSByZXN1bHRzIGJ5ICAtIEZJRk8gfCBGaXJzdCBpbiBGaXJzdCBPdXQsIHRoZSBzYW1lIG9yZGVyIHRoZXkgY2FtZSBpbiAtIFJlY2VudCB8IEhhbmRsZSB0aGUgbW9zdCByZWNlbnQgaXRlbXMgZmlyc3QgLSBQcmlvcml0eSB8IEJ5IHByaW9yaXR5IChpZiBhcHBsaWNhYmxlKS4gIEZvciBxdWFsaXR5IGNvbnRyb2wgbGlrZSBzcGVsbGluZyBpdCBpcyB0aGUgdGltZXMgdXNlZCBzbyBpdCB3aWxsIHNob3cgdGhlIGl0ZW1zIG1pc3NwZWxsZWQgMTAwMCB0aW1lcyBiZWZvcmUgdGhlIG9uZXMgNTAwIHRpbWVzLiAgRm9yIHJlcG9ydGVkIHVzZXJzIGl0IHdpbGwgYmUgdGhlIG9uZXMgd2hlcmUgbXVsdGlwbGUgdXNlcnMgaGF2ZSByZXBvcnRlZCB0aGUgc2FtZSB1c2VyLiAtIEFJIHwgRGVhbCB3aXRoIHRoZSBoaWdlc3QgQUkgcHJlZGljdGlvbnMgZmlyc3QgdGhhdCBwcmVkaWN0IHRoaXMgc2hvdWxkIGJlIHJlbGV2YW50IGZvciBtZS4gIChOT1RFOiB0byBzZWFyY2ggYnkgQUkgeW91IG11c3QgYWxzbyBoYXZlIHNldCB0aGUgYWkubW9kZWxOYW1lIGluIHRoZSBmaXJzdCBpdGVtIG9mIHRoZSBwYXJhbWV0ZXIgYWkpIFxyXG4gICAgICogQHBhcmFtIHRhZ3MgT25seSBmaW5kIGl0ZW1zIG1hdGNoaW5nIGEgY2VydGFpbiB0YWdcclxuICAgICAqIEBwYXJhbSB0ZXh0IFRleHQgc2VhcmNoLiAgVGhpcyB1c2VzIGZ1enp5IG1hdGNoaW5nLlxyXG4gICAgICogQHBhcmFtIHRvcGljcyBPbmx5IHNob3cgaXRlbXMgZm9yIHRoZXNlIHRvcGljcyAodG9waWNJZCkgYmV0d2VlbiByaXNrIGxldmVsIG1pblJpc2sgYW5kIG1heFJpc2tcclxuICAgICAqIEBwYXJhbSB1bnJlc29sdmVkQ29tbWVudHMgV2lsbCBzZWUgaWYgdGhlcmUgYXJlIGFueSB1bnJlc29sdmVkIGNvbW1lbnRzIGZvciB5b3UgYW5kIHNob3cgb25seSB0aG9zZVxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFNwZWxsaW5nKGxhbmd1YWdlOiBzdHJpbmcsIGFpPzogQXJyYXk8QWk+LCBjaGVja291dD86IGJvb2xlYW4sIGNsaWVudElkcz86IEFycmF5PG51bWJlcj4sIGNvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBub3RDb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgZW5kRGF0ZT86IG51bWJlciwgc3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZFN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRFbmREYXRlPzogbnVtYmVyLCBjaGVja291dEF2YWlsYWJsZT86IGJvb2xlYW4sIGRvbmVCeU1vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGxpbWl0PzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIHNvcnRCeT86IHN0cmluZywgdGFncz86IEFycmF5PHN0cmluZz4sIHRleHQ/OiBzdHJpbmcsIHRvcGljcz86IEFycmF5PFRvcGljcz4sIHVucmVzb2x2ZWRDb21tZW50cz86IGJvb2xlYW4sIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8U3BlbGxpbmdNaXN0YWtlT3V0cHV0PjtcclxuICAgIHB1YmxpYyBnZXRTcGVsbGluZyhsYW5ndWFnZTogc3RyaW5nLCBhaT86IEFycmF5PEFpPiwgY2hlY2tvdXQ/OiBib29sZWFuLCBjbGllbnRJZHM/OiBBcnJheTxudW1iZXI+LCBjb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgbm90Q29udGVudElkcz86IEFycmF5PHN0cmluZz4sIGVuZERhdGU/OiBudW1iZXIsIHN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRTdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkRW5kRGF0ZT86IG51bWJlciwgY2hlY2tvdXRBdmFpbGFibGU/OiBib29sZWFuLCBkb25lQnlNb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBsaW1pdD86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBzb3J0Qnk/OiBzdHJpbmcsIHRhZ3M/OiBBcnJheTxzdHJpbmc+LCB0ZXh0Pzogc3RyaW5nLCB0b3BpY3M/OiBBcnJheTxUb3BpY3M+LCB1bnJlc29sdmVkQ29tbWVudHM/OiBib29sZWFuLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8U3BlbGxpbmdNaXN0YWtlT3V0cHV0Pj47XHJcbiAgICBwdWJsaWMgZ2V0U3BlbGxpbmcobGFuZ3VhZ2U6IHN0cmluZywgYWk/OiBBcnJheTxBaT4sIGNoZWNrb3V0PzogYm9vbGVhbiwgY2xpZW50SWRzPzogQXJyYXk8bnVtYmVyPiwgY29udGVudElkcz86IEFycmF5PHN0cmluZz4sIG5vdENvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBlbmREYXRlPzogbnVtYmVyLCBzdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkU3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZEVuZERhdGU/OiBudW1iZXIsIGNoZWNrb3V0QXZhaWxhYmxlPzogYm9vbGVhbiwgZG9uZUJ5TW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgbGltaXQ/OiBudW1iZXIsIG9mZnNldD86IG51bWJlciwgc29ydEJ5Pzogc3RyaW5nLCB0YWdzPzogQXJyYXk8c3RyaW5nPiwgdGV4dD86IHN0cmluZywgdG9waWNzPzogQXJyYXk8VG9waWNzPiwgdW5yZXNvbHZlZENvbW1lbnRzPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxTcGVsbGluZ01pc3Rha2VPdXRwdXQ+PjtcclxuICAgIHB1YmxpYyBnZXRTcGVsbGluZyhsYW5ndWFnZTogc3RyaW5nLCBhaT86IEFycmF5PEFpPiwgY2hlY2tvdXQ/OiBib29sZWFuLCBjbGllbnRJZHM/OiBBcnJheTxudW1iZXI+LCBjb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgbm90Q29udGVudElkcz86IEFycmF5PHN0cmluZz4sIGVuZERhdGU/OiBudW1iZXIsIHN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRTdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkRW5kRGF0ZT86IG51bWJlciwgY2hlY2tvdXRBdmFpbGFibGU/OiBib29sZWFuLCBkb25lQnlNb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBsaW1pdD86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBzb3J0Qnk/OiBzdHJpbmcsIHRhZ3M/OiBBcnJheTxzdHJpbmc+LCB0ZXh0Pzogc3RyaW5nLCB0b3BpY3M/OiBBcnJheTxUb3BpY3M+LCB1bnJlc29sdmVkQ29tbWVudHM/OiBib29sZWFuLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKGxhbmd1YWdlID09PSBudWxsIHx8IGxhbmd1YWdlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgbGFuZ3VhZ2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRTcGVsbGluZy4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoYWkpIHtcclxuICAgICAgICAgICAgYWkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLmFwcGVuZCgnYWknLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hlY2tvdXQgIT09IHVuZGVmaW5lZCAmJiBjaGVja291dCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjaGVja291dCcsIDxhbnk+Y2hlY2tvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xpZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NsaWVudElkcycsIGNsaWVudElkcy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRlbnRJZHMpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY29udGVudElkcycsIGNvbnRlbnRJZHMuam9pbihDT0xMRUNUSU9OX0ZPUk1BVFNbJ2NzdiddKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub3RDb250ZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ25vdENvbnRlbnRJZHMnLCBub3RDb250ZW50SWRzLmpvaW4oQ09MTEVDVElPTl9GT1JNQVRTWydjc3YnXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kRGF0ZSAhPT0gdW5kZWZpbmVkICYmIGVuZERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnZW5kRGF0ZScsIDxhbnk+ZW5kRGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFydERhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGFydERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnc3RhcnREYXRlJywgPGFueT5zdGFydERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV2aWV3ZWRTdGFydERhdGUgIT09IHVuZGVmaW5lZCAmJiByZXZpZXdlZFN0YXJ0RGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdyZXZpZXdlZFN0YXJ0RGF0ZScsIDxhbnk+cmV2aWV3ZWRTdGFydERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV2aWV3ZWRFbmREYXRlICE9PSB1bmRlZmluZWQgJiYgcmV2aWV3ZWRFbmREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3Jldmlld2VkRW5kRGF0ZScsIDxhbnk+cmV2aWV3ZWRFbmREYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNoZWNrb3V0QXZhaWxhYmxlICE9PSB1bmRlZmluZWQgJiYgY2hlY2tvdXRBdmFpbGFibGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY2hlY2tvdXRBdmFpbGFibGUnLCA8YW55PmNoZWNrb3V0QXZhaWxhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRvbmVCeU1vZGVyYXRvcklkICE9PSB1bmRlZmluZWQgJiYgZG9uZUJ5TW9kZXJhdG9ySWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnZG9uZUJ5TW9kZXJhdG9ySWQnLCA8YW55PmRvbmVCeU1vZGVyYXRvcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlICE9PSB1bmRlZmluZWQgJiYgbGFuZ3VhZ2UgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnbGFuZ3VhZ2UnLCA8YW55Pmxhbmd1YWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpbWl0ICE9PSB1bmRlZmluZWQgJiYgbGltaXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnbGltaXQnLCA8YW55PmxpbWl0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdvZmZzZXQnLCA8YW55Pm9mZnNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzb3J0QnkgIT09IHVuZGVmaW5lZCAmJiBzb3J0QnkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnc29ydEJ5JywgPGFueT5zb3J0QnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGFncykge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCd0YWdzJywgdGFncy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRleHQgIT09IHVuZGVmaW5lZCAmJiB0ZXh0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3RleHQnLCA8YW55PnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG9waWNzKSB7XHJcbiAgICAgICAgICAgIHRvcGljcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCd0b3BpY3MnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5yZXNvbHZlZENvbW1lbnRzICE9PSB1bmRlZmluZWQgJiYgdW5yZXNvbHZlZENvbW1lbnRzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3VucmVzb2x2ZWRDb21tZW50cycsIDxhbnk+dW5yZXNvbHZlZENvbW1lbnRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8U3BlbGxpbmdNaXN0YWtlT3V0cHV0PignZ2V0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS9zcGVsbGluZy9pdGVtc2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWFyY2ggZm9yIHRhc2tzIGluIHRoZSBxdWV1ZVxyXG4gICAgICogTG9va3VwIGl0ZW1zIGZvciB0aGlzIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2UgU2hvdyByZXN1bHRzIGZvciB0aGUgZ2l2ZW4gbGFuZ3VhZ2Ugb25seS4gICBUaGlzIGlzIHRoZSBsYW5ndWFnZSB1c2VkLCBjb3VsZCBoYXZlIGJlZW4gc2V0IGJ5IHRoZSB1c2VyIG9yIGRldGVjdGVkIGJ5IGxhbmd1YWdlIGlkLlxyXG4gICAgICogQHBhcmFtIGNsaWVudElkcyBTaG93IHJlc3VsdHMgZm9yIGEgZ2l2ZW4gY2xpZW50LiAgVHlwaWNhbGx5IHRoaXMgaXMgc2V0IGZvciB5b3UgYnkgdGhlIGludGVybmFsIHN5c3RlbSBiYXNlZCBvbiB0aGUgQVBJX0tFWSB5b3UgYXJlIHVzaW5nLiAgSG93ZXZlciBzb21lIGNsaWVudHMgYXJlIGFsbG93ZWQgdG8gdmlldyBvdGhlciBjbGllbnRzIHN1Y2ggYXMgd2hlbiB0aGV5IGhhdmUgYSBzYW5kYm94IG9yIHdoZW4gdGhleSBhcmUgYSBsYXJnZSBlbnRlcnByaXNlIGFuZCBoYXZlIG11bHRpcGxlIGNsaWVudHMgdGhleSBtYW5hZ2UuICBJdCB3aWxsIG9ubHkgYWxsb3cgeW91IHRvIHZpZXcgY2xpZW50IGRhdGEgeW91IGhhdmUgYWNjZXNzIHRvLiBZb3UgY2FuIHNldCB0aGlzIHRvIC0xIHRvIGFwcGx5IHRvIGFsbCBjbGllbnRzIHlvdSBoYXZlIGFjY2VzcyB0by5cclxuICAgICAqIEBwYXJhbSBjb250ZW50SWRzIEdldCB0aGVzZSBzcGVjaWZpYyBjb250ZW50SWRzLiAgRnJlcXVlbnRseSB1c2VkIHdoZW4geW91IHVzZSB0aGUgUHJldmlvdXMgYnV0dG9uLlxyXG4gICAgICogQHBhcmFtIG5vdENvbnRlbnRJZHMgRXhjbHVkZSB0aGVzZSBzcGVjaWZpYyBjb250ZW50SWRzLiAgT3JpZ2luYWxseSBkZXNpZ25lZCBzbyB5b3UgY2FuIGNhbGwgY2hlY2tvdXQgYW5kIHBhc3MgaW4gdGhlIGl0ZW0geW91IGFyZSB3b3JraW5nIG9uIHJpZ2h0IG5vdyBhbmQgaXQgd2lsbCBnaXZlIHlvdSBhIGRpZmZlcmVudCBvbmUuICBUaGUgZGVmYXVsdCBjaGVja291dCBiZWhhdmlvdXIgd2lsbCBhc3NpZ24gdGhlIGl0ZW1zIHlvdSBhbHJlYWR5IGhhdmUgY2hlY2tlZCBvdXQgICh3aGljaCBpcyBvbiB5b3VyIHNjcmVlbikuIFxyXG4gICAgICogQHBhcmFtIGVuZERhdGUgU2hvdyByZXN1bHRzIG9jY3VycmluZyBiZWZvcmUgdGhlIGdpdmVuIGRhdGUgaW4gdW5peHRpbWVzdGFtcCAobWlsbGlzZWNvbmRzIHNpbmNlIEVwb2NoKVxyXG4gICAgICogQHBhcmFtIHN0YXJ0RGF0ZSBTaG93IHJlc3VsdHMgb2NjdXJyaW5nIGFmdGVyIHRoZSBnaXZlbiBkYXRlIGluIHVuaXh0aW1lc3RhbXAgKG1pbGxpc2Vjb25kcyBzaW5jZSBFcG9jaClcclxuICAgICAqIEBwYXJhbSByZXZpZXdlZFN0YXJ0RGF0ZSBTaG93IHJlc3VsdHMgdGhhdCB3aGVyZSByZXZpZXdlZCBiZXR3ZWVuIGdpdmVuIGRhdGUgaW4gdW5peHRpbWVzdGFtcCAobWlsbGlzZWNvbmRzIHNpbmNlIEVwb2NoKVxyXG4gICAgICogQHBhcmFtIHJldmlld2VkRW5kRGF0ZSBTaG93IHJlc3VsdHMgdGhhdCB3aGVyZSByZXZpZXdlZCBiZXR3ZWVuIGdpdmVuIGRhdGUgaW4gdW5peHRpbWVzdGFtcCAobWlsbGlzZWNvbmRzIHNpbmNlIEVwb2NoKVxyXG4gICAgICogQHBhcmFtIGNoZWNrb3V0QXZhaWxhYmxlIE9ubHkgc2hvdyBpdGVtcyB3aGVyZSB0aGUgaXRlbSBjb3VsZCBiZSBjaGVja2VkIG91dCBieSBtZS4gIFRoaXMgaXMgdGhlIHNhbWUgYXMgY2hlY2tvdXQmI3gzRDt0cnVlIGJ1dCBpdCBkb2VzIG5vdCBjaGVjayBpdCBvdXQuXHJcbiAgICAgKiBAcGFyYW0gZG9uZUJ5TW9kZXJhdG9ySWQgT25seSBzaG93IHdvcmsgZG9uZSBieSB0aGlzIG1vZGVyYXRvcklkXHJcbiAgICAgKiBAcGFyYW0gYXNzaWduZWRUb01vZGVyYXRvcklkIFNob3cgaXRlbXMgYXNzaWduZWQgdG8gdGhpcyBtb2RlcmF0b3JcclxuICAgICAqIEBwYXJhbSBsaW1pdCBMaW1pdCB0aGUgbnVtYmVyIG9mIHJlc3VsdHNcclxuICAgICAqIEBwYXJhbSBvZmZzZXQgU3RhcnQgdGhlIHNlYXJjaCBmcm9tIG9mZnNldCAwLiAgRm9yIGluc3RhbmNlIGlmIHlvdXIgdXNpbmcgcGFnaW5hdGlvbiBwYWdlIDIgd291bGQgYmUgb24gdG90YWxJdGVtc1BlclBhZ2UqcGFnZU51bS4gXHJcbiAgICAgKiBAcGFyYW0gc29ydEJ5IFdoYXQgZG8geW91IHdhbnQgdG8gc29ydCB0aGUgcmVzdWx0cyBieSAgLSBGSUZPIHwgRmlyc3QgaW4gRmlyc3QgT3V0LCB0aGUgc2FtZSBvcmRlciB0aGV5IGNhbWUgaW4gLSBSZWNlbnQgfCBIYW5kbGUgdGhlIG1vc3QgcmVjZW50IGl0ZW1zIGZpcnN0IC0gUHJpb3JpdHkgfCBCeSBwcmlvcml0eSAoaWYgYXBwbGljYWJsZSkuICBGb3IgcXVhbGl0eSBjb250cm9sIGxpa2Ugc3BlbGxpbmcgaXQgaXMgdGhlIHRpbWVzIHVzZWQgc28gaXQgd2lsbCBzaG93IHRoZSBpdGVtcyBtaXNzcGVsbGVkIDEwMDAgdGltZXMgYmVmb3JlIHRoZSBvbmVzIDUwMCB0aW1lcy4gIEZvciByZXBvcnRlZCB1c2VycyBpdCB3aWxsIGJlIHRoZSBvbmVzIHdoZXJlIG11bHRpcGxlIHVzZXJzIGhhdmUgcmVwb3J0ZWQgdGhlIHNhbWUgdXNlci4gLSBBSSB8IERlYWwgd2l0aCB0aGUgaGlnZXN0IEFJIHByZWRpY3Rpb25zIGZpcnN0IHRoYXQgcHJlZGljdCB0aGlzIHNob3VsZCBiZSByZWxldmFudCBmb3IgbWUuICAoTk9URTogdG8gc2VhcmNoIGJ5IEFJIHlvdSBtdXN0IGFsc28gaGF2ZSBzZXQgdGhlIGFpLm1vZGVsTmFtZSBpbiB0aGUgZmlyc3QgaXRlbSBvZiB0aGUgcGFyYW1ldGVyIGFpKSBcclxuICAgICAqIEBwYXJhbSB0YWdzIE9ubHkgZmluZCBpdGVtcyBtYXRjaGluZyBhIGNlcnRhaW4gdGFnXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBUZXh0IHNlYXJjaC4gIFRoaXMgdXNlcyBmdXp6eSBtYXRjaGluZy5cclxuICAgICAqIEBwYXJhbSB1bnJlc29sdmVkQ29tbWVudHMgV2lsbCBzZWUgaWYgdGhlcmUgYXJlIGFueSB1bnJlc29sdmVkIGNvbW1lbnRzIGZvciB5b3UgYW5kIHNob3cgb25seSB0aG9zZVxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFRhc2tJdGVtcyhsYW5ndWFnZTogc3RyaW5nLCBjbGllbnRJZHM/OiBBcnJheTxudW1iZXI+LCBjb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgbm90Q29udGVudElkcz86IEFycmF5PHN0cmluZz4sIGVuZERhdGU/OiBudW1iZXIsIHN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRTdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkRW5kRGF0ZT86IG51bWJlciwgY2hlY2tvdXRBdmFpbGFibGU/OiBib29sZWFuLCBkb25lQnlNb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBhc3NpZ25lZFRvTW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgbGltaXQ/OiBudW1iZXIsIG9mZnNldD86IG51bWJlciwgc29ydEJ5Pzogc3RyaW5nLCB0YWdzPzogQXJyYXk8c3RyaW5nPiwgdGV4dD86IHN0cmluZywgdW5yZXNvbHZlZENvbW1lbnRzPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxUYXNrT3V0cHV0PjtcclxuICAgIHB1YmxpYyBnZXRUYXNrSXRlbXMobGFuZ3VhZ2U6IHN0cmluZywgY2xpZW50SWRzPzogQXJyYXk8bnVtYmVyPiwgY29udGVudElkcz86IEFycmF5PHN0cmluZz4sIG5vdENvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBlbmREYXRlPzogbnVtYmVyLCBzdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkU3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZEVuZERhdGU/OiBudW1iZXIsIGNoZWNrb3V0QXZhaWxhYmxlPzogYm9vbGVhbiwgZG9uZUJ5TW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgYXNzaWduZWRUb01vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGxpbWl0PzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIHNvcnRCeT86IHN0cmluZywgdGFncz86IEFycmF5PHN0cmluZz4sIHRleHQ/OiBzdHJpbmcsIHVucmVzb2x2ZWRDb21tZW50cz86IGJvb2xlYW4sIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxUYXNrT3V0cHV0Pj47XHJcbiAgICBwdWJsaWMgZ2V0VGFza0l0ZW1zKGxhbmd1YWdlOiBzdHJpbmcsIGNsaWVudElkcz86IEFycmF5PG51bWJlcj4sIGNvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBub3RDb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgZW5kRGF0ZT86IG51bWJlciwgc3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZFN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRFbmREYXRlPzogbnVtYmVyLCBjaGVja291dEF2YWlsYWJsZT86IGJvb2xlYW4sIGRvbmVCeU1vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGFzc2lnbmVkVG9Nb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBsaW1pdD86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBzb3J0Qnk/OiBzdHJpbmcsIHRhZ3M/OiBBcnJheTxzdHJpbmc+LCB0ZXh0Pzogc3RyaW5nLCB1bnJlc29sdmVkQ29tbWVudHM/OiBib29sZWFuLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PFRhc2tPdXRwdXQ+PjtcclxuICAgIHB1YmxpYyBnZXRUYXNrSXRlbXMobGFuZ3VhZ2U6IHN0cmluZywgY2xpZW50SWRzPzogQXJyYXk8bnVtYmVyPiwgY29udGVudElkcz86IEFycmF5PHN0cmluZz4sIG5vdENvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBlbmREYXRlPzogbnVtYmVyLCBzdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkU3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZEVuZERhdGU/OiBudW1iZXIsIGNoZWNrb3V0QXZhaWxhYmxlPzogYm9vbGVhbiwgZG9uZUJ5TW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgYXNzaWduZWRUb01vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGxpbWl0PzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIHNvcnRCeT86IHN0cmluZywgdGFncz86IEFycmF5PHN0cmluZz4sIHRleHQ/OiBzdHJpbmcsIHVucmVzb2x2ZWRDb21tZW50cz86IGJvb2xlYW4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuICAgICAgICBpZiAobGFuZ3VhZ2UgPT09IG51bGwgfHwgbGFuZ3VhZ2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBsYW5ndWFnZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFRhc2tJdGVtcy4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IG5ldyBDdXN0b21IdHRwVXJsRW5jb2RpbmdDb2RlYygpfSk7XHJcbiAgICAgICAgaWYgKGNsaWVudElkcykge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjbGllbnRJZHMnLCBjbGllbnRJZHMuam9pbihDT0xMRUNUSU9OX0ZPUk1BVFNbJ2NzdiddKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NvbnRlbnRJZHMnLCBjb250ZW50SWRzLmpvaW4oQ09MTEVDVElPTl9GT1JNQVRTWydjc3YnXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm90Q29udGVudElkcykge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdub3RDb250ZW50SWRzJywgbm90Q29udGVudElkcy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVuZERhdGUgIT09IHVuZGVmaW5lZCAmJiBlbmREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2VuZERhdGUnLCA8YW55PmVuZERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhcnREYXRlICE9PSB1bmRlZmluZWQgJiYgc3RhcnREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3N0YXJ0RGF0ZScsIDxhbnk+c3RhcnREYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJldmlld2VkU3RhcnREYXRlICE9PSB1bmRlZmluZWQgJiYgcmV2aWV3ZWRTdGFydERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgncmV2aWV3ZWRTdGFydERhdGUnLCA8YW55PnJldmlld2VkU3RhcnREYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJldmlld2VkRW5kRGF0ZSAhPT0gdW5kZWZpbmVkICYmIHJldmlld2VkRW5kRGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdyZXZpZXdlZEVuZERhdGUnLCA8YW55PnJldmlld2VkRW5kRGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGVja291dEF2YWlsYWJsZSAhPT0gdW5kZWZpbmVkICYmIGNoZWNrb3V0QXZhaWxhYmxlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NoZWNrb3V0QXZhaWxhYmxlJywgPGFueT5jaGVja291dEF2YWlsYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkb25lQnlNb2RlcmF0b3JJZCAhPT0gdW5kZWZpbmVkICYmIGRvbmVCeU1vZGVyYXRvcklkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2RvbmVCeU1vZGVyYXRvcklkJywgPGFueT5kb25lQnlNb2RlcmF0b3JJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhc3NpZ25lZFRvTW9kZXJhdG9ySWQgIT09IHVuZGVmaW5lZCAmJiBhc3NpZ25lZFRvTW9kZXJhdG9ySWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnYXNzaWduZWRUb01vZGVyYXRvcklkJywgPGFueT5hc3NpZ25lZFRvTW9kZXJhdG9ySWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFuZ3VhZ2UgIT09IHVuZGVmaW5lZCAmJiBsYW5ndWFnZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdsYW5ndWFnZScsIDxhbnk+bGFuZ3VhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGltaXQgIT09IHVuZGVmaW5lZCAmJiBsaW1pdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdsaW1pdCcsIDxhbnk+bGltaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ29mZnNldCcsIDxhbnk+b2Zmc2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNvcnRCeSAhPT0gdW5kZWZpbmVkICYmIHNvcnRCeSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdzb3J0QnknLCA8YW55PnNvcnRCeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0YWdzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3RhZ3MnLCB0YWdzLmpvaW4oQ09MTEVDVElPTl9GT1JNQVRTWydjc3YnXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGV4dCAhPT0gdW5kZWZpbmVkICYmIHRleHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgndGV4dCcsIDxhbnk+dGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bnJlc29sdmVkQ29tbWVudHMgIT09IHVuZGVmaW5lZCAmJiB1bnJlc29sdmVkQ29tbWVudHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgndW5yZXNvbHZlZENvbW1lbnRzJywgPGFueT51bnJlc29sdmVkQ29tbWVudHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxUYXNrT3V0cHV0PignZ2V0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS90YXNrL2l0ZW1zYCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIHVzZXJzIGRhdGFcclxuICAgICAqIFRoaXMgd2lsbCByZXRyaWV2ZSBhbGwgaW5mb3JtYXRpb24gb24gYSB1c2VyLiAgVGhpcyBpcyByZWNvbW1lbmRlZCBmb3IgR0RQUiBhcm91bmQgcmlnaHQgdG8gYWNjZXNzLiAgSXQgY2FuIGFsc28gYmUgdXNlZCBpZiB5b3UgYXJlIGRvd25sb2FkaW5nIGEgcmVwb3J0IHRvIHNlbmQgaW4gdG8gdGhlIHBvbGljZSBhcm91bmQgY3JpbWluYWwgYWN0aXZpdHkuIFxyXG4gICAgICogQHBhcmFtIHVzZXJJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgdXNlclxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFVzZXJEYXRhKHVzZXJJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEFycmF5PGFueT4+O1xyXG4gICAgcHVibGljIGdldFVzZXJEYXRhKHVzZXJJZDogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXJyYXk8YW55Pj4+O1xyXG4gICAgcHVibGljIGdldFVzZXJEYXRhKHVzZXJJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PEFycmF5PGFueT4+PjtcclxuICAgIHB1YmxpYyBnZXRVc2VyRGF0YSh1c2VySWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmICh1c2VySWQgPT09IG51bGwgfHwgdXNlcklkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgdXNlcklkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0VXNlckRhdGEuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi94LW5kanNvbicsXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0PEFycmF5PGFueT4+KCdnZXQnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3VzZXIvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHVzZXJJZCkpfWAsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VhcmNoIGZvciBvciBjaGVja291dCBpdGVtcyBpbiB0aGlzIHF1ZXVlXHJcbiAgICAgKiBMb29rdXAgaXRlbXMgZm9yIHRoaXMgcXVldWVcclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZSBTaG93IHJlc3VsdHMgZm9yIHRoZSBnaXZlbiBsYW5ndWFnZSBvbmx5LiAgIFRoaXMgaXMgdGhlIGxhbmd1YWdlIHVzZWQsIGNvdWxkIGhhdmUgYmVlbiBzZXQgYnkgdGhlIHVzZXIgb3IgZGV0ZWN0ZWQgYnkgbGFuZ3VhZ2UgaWQuXHJcbiAgICAgKiBAcGFyYW0gYWkgU2hvdyBpdGVtcyB0aGUgQUkgcHJlZGljdHMgYXMgdXNlZnVsIGJlY2F1c2UgbW9kZXJhdG9ycyBpbiB0aGUgcGFzdCBoYXZlIHRha2VuIGFuIGFjdGlvbiBvbiB0aGlzIGl0ZW1zLiAgUGFzc2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFzIHBhcmFtcyBjYW4gYmUgdHJpY2t5IGF0IGZpcnN0IHNvIGhlcmUgaXMgYW4gZXhhbXBsZSAmYW1wO2FpWzBdW21pblByZWRpY3Rpb25dJiN4M0Q7MC41MCZhbXA7YWlbMF1bbW9kZWxOYW1lXSYjeDNEO3RvcGljX3Z1bGdhciZhbXA7YWlbMF1bbWF4UHJlZGljdGlvbl0mI3gzRDswLjk1JmFtcDthaVsxXVttaW5QcmVkaWN0aW9uXSYjeDNEOzAuMTAmYW1wO2FpWzFdW21vZGVsTmFtZV0mI3gzRDt0b3BpY19mcmF1ZCZhbXA7YWlbMV1bbWF4UHJlZGljdGlvbl0mI3gzRDswLjgwICBJbiB1cmxlbmNvZGVkIGZvcm0gdGhhdCB3b3VsZCBiZSAmYW1wO2FpJTVCMCU1RCU1Qm1pblByZWRpY3Rpb24lNUQmI3gzRDswLjUwJmFtcDthaSU1QjAlNUQlNUJtb2RlbE5hbWUlNUQmI3gzRDt0b3BpY192dWxnYXImYW1wO2FpJTVCMCU1RCU1Qm1heFByZWRpY3Rpb24lNUQmI3gzRDswLjk1JmFtcDthaSU1QjElNUQlNUJtaW5QcmVkaWN0aW9uJTVEJiN4M0Q7MC4xMCZhbXA7YWklNUIxJTVEJTVCbW9kZWxOYW1lJTVEJiN4M0Q7dG9waWNfZnJhdWQmYW1wO2FpJTVCMSU1RCU1Qm1heFByZWRpY3Rpb24lNUQmI3gzRDswLjgwIFxyXG4gICAgICogQHBhcmFtIGNoZWNrb3V0IENoZWNrb3V0IHRoaXMgaXRlbSBmb3IgcmV2aWV3XHJcbiAgICAgKiBAcGFyYW0gY2xpZW50SWRzIFNob3cgcmVzdWx0cyBmb3IgYSBnaXZlbiBjbGllbnQuICBUeXBpY2FsbHkgdGhpcyBpcyBzZXQgZm9yIHlvdSBieSB0aGUgaW50ZXJuYWwgc3lzdGVtIGJhc2VkIG9uIHRoZSBBUElfS0VZIHlvdSBhcmUgdXNpbmcuICBIb3dldmVyIHNvbWUgY2xpZW50cyBhcmUgYWxsb3dlZCB0byB2aWV3IG90aGVyIGNsaWVudHMgc3VjaCBhcyB3aGVuIHRoZXkgaGF2ZSBhIHNhbmRib3ggb3Igd2hlbiB0aGV5IGFyZSBhIGxhcmdlIGVudGVycHJpc2UgYW5kIGhhdmUgbXVsdGlwbGUgY2xpZW50cyB0aGV5IG1hbmFnZS4gIEl0IHdpbGwgb25seSBhbGxvdyB5b3UgdG8gdmlldyBjbGllbnQgZGF0YSB5b3UgaGF2ZSBhY2Nlc3MgdG8uIFlvdSBjYW4gc2V0IHRoaXMgdG8gLTEgdG8gYXBwbHkgdG8gYWxsIGNsaWVudHMgeW91IGhhdmUgYWNjZXNzIHRvLlxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJZHMgR2V0IHRoZXNlIHNwZWNpZmljIGNvbnRlbnRJZHMuICBGcmVxdWVudGx5IHVzZWQgd2hlbiB5b3UgdXNlIHRoZSBQcmV2aW91cyBidXR0b24uXHJcbiAgICAgKiBAcGFyYW0gbm90Q29udGVudElkcyBFeGNsdWRlIHRoZXNlIHNwZWNpZmljIGNvbnRlbnRJZHMuICBPcmlnaW5hbGx5IGRlc2lnbmVkIHNvIHlvdSBjYW4gY2FsbCBjaGVja291dCBhbmQgcGFzcyBpbiB0aGUgaXRlbSB5b3UgYXJlIHdvcmtpbmcgb24gcmlnaHQgbm93IGFuZCBpdCB3aWxsIGdpdmUgeW91IGEgZGlmZmVyZW50IG9uZS4gIFRoZSBkZWZhdWx0IGNoZWNrb3V0IGJlaGF2aW91ciB3aWxsIGFzc2lnbiB0aGUgaXRlbXMgeW91IGFscmVhZHkgaGF2ZSBjaGVja2VkIG91dCAgKHdoaWNoIGlzIG9uIHlvdXIgc2NyZWVuKS4gXHJcbiAgICAgKiBAcGFyYW0gZW5kRGF0ZSBTaG93IHJlc3VsdHMgb2NjdXJyaW5nIGJlZm9yZSB0aGUgZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gc3RhcnREYXRlIFNob3cgcmVzdWx0cyBvY2N1cnJpbmcgYWZ0ZXIgdGhlIGdpdmVuIGRhdGUgaW4gdW5peHRpbWVzdGFtcCAobWlsbGlzZWNvbmRzIHNpbmNlIEVwb2NoKVxyXG4gICAgICogQHBhcmFtIHJldmlld2VkU3RhcnREYXRlIFNob3cgcmVzdWx0cyB0aGF0IHdoZXJlIHJldmlld2VkIGJldHdlZW4gZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gcmV2aWV3ZWRFbmREYXRlIFNob3cgcmVzdWx0cyB0aGF0IHdoZXJlIHJldmlld2VkIGJldHdlZW4gZ2l2ZW4gZGF0ZSBpbiB1bml4dGltZXN0YW1wIChtaWxsaXNlY29uZHMgc2luY2UgRXBvY2gpXHJcbiAgICAgKiBAcGFyYW0gY2hlY2tvdXRBdmFpbGFibGUgT25seSBzaG93IGl0ZW1zIHdoZXJlIHRoZSBpdGVtIGNvdWxkIGJlIGNoZWNrZWQgb3V0IGJ5IG1lLiAgVGhpcyBpcyB0aGUgc2FtZSBhcyBjaGVja291dCYjeDNEO3RydWUgYnV0IGl0IGRvZXMgbm90IGNoZWNrIGl0IG91dC5cclxuICAgICAqIEBwYXJhbSBkb25lQnlNb2RlcmF0b3JJZCBPbmx5IHNob3cgd29yayBkb25lIGJ5IHRoaXMgbW9kZXJhdG9ySWRcclxuICAgICAqIEBwYXJhbSBsaW1pdCBMaW1pdCB0aGUgbnVtYmVyIG9mIHJlc3VsdHNcclxuICAgICAqIEBwYXJhbSBvZmZzZXQgU3RhcnQgdGhlIHNlYXJjaCBmcm9tIG9mZnNldCAwLiAgRm9yIGluc3RhbmNlIGlmIHlvdXIgdXNpbmcgcGFnaW5hdGlvbiBwYWdlIDIgd291bGQgYmUgb24gdG90YWxJdGVtc1BlclBhZ2UqcGFnZU51bS4gXHJcbiAgICAgKiBAcGFyYW0gc29ydEJ5IFdoYXQgZG8geW91IHdhbnQgdG8gc29ydCB0aGUgcmVzdWx0cyBieSAgLSBGSUZPIHwgRmlyc3QgaW4gRmlyc3QgT3V0LCB0aGUgc2FtZSBvcmRlciB0aGV5IGNhbWUgaW4gLSBSZWNlbnQgfCBIYW5kbGUgdGhlIG1vc3QgcmVjZW50IGl0ZW1zIGZpcnN0IC0gUHJpb3JpdHkgfCBCeSBwcmlvcml0eSAoaWYgYXBwbGljYWJsZSkuICBGb3IgcXVhbGl0eSBjb250cm9sIGxpa2Ugc3BlbGxpbmcgaXQgaXMgdGhlIHRpbWVzIHVzZWQgc28gaXQgd2lsbCBzaG93IHRoZSBpdGVtcyBtaXNzcGVsbGVkIDEwMDAgdGltZXMgYmVmb3JlIHRoZSBvbmVzIDUwMCB0aW1lcy4gIEZvciByZXBvcnRlZCB1c2VycyBpdCB3aWxsIGJlIHRoZSBvbmVzIHdoZXJlIG11bHRpcGxlIHVzZXJzIGhhdmUgcmVwb3J0ZWQgdGhlIHNhbWUgdXNlci4gLSBBSSB8IERlYWwgd2l0aCB0aGUgaGlnZXN0IEFJIHByZWRpY3Rpb25zIGZpcnN0IHRoYXQgcHJlZGljdCB0aGlzIHNob3VsZCBiZSByZWxldmFudCBmb3IgbWUuICAoTk9URTogdG8gc2VhcmNoIGJ5IEFJIHlvdSBtdXN0IGFsc28gaGF2ZSBzZXQgdGhlIGFpLm1vZGVsTmFtZSBpbiB0aGUgZmlyc3QgaXRlbSBvZiB0aGUgcGFyYW1ldGVyIGFpKSBcclxuICAgICAqIEBwYXJhbSB0YWdzIE9ubHkgZmluZCBpdGVtcyBtYXRjaGluZyBhIGNlcnRhaW4gdGFnXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBUZXh0IHNlYXJjaC4gIFRoaXMgdXNlcyBmdXp6eSBtYXRjaGluZy5cclxuICAgICAqIEBwYXJhbSB0b3BpY3MgT25seSBzaG93IGl0ZW1zIGZvciB0aGVzZSB0b3BpY3MgKHRvcGljSWQpIGJldHdlZW4gcmlzayBsZXZlbCBtaW5SaXNrIGFuZCBtYXhSaXNrXHJcbiAgICAgKiBAcGFyYW0gdW5yZXNvbHZlZENvbW1lbnRzIFdpbGwgc2VlIGlmIHRoZXJlIGFyZSBhbnkgdW5yZXNvbHZlZCBjb21tZW50cyBmb3IgeW91IGFuZCBzaG93IG9ubHkgdGhvc2VcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVc2VybmFtZXMobGFuZ3VhZ2U6IHN0cmluZywgYWk/OiBBcnJheTxBaT4sIGNoZWNrb3V0PzogYm9vbGVhbiwgY2xpZW50SWRzPzogQXJyYXk8bnVtYmVyPiwgY29udGVudElkcz86IEFycmF5PHN0cmluZz4sIG5vdENvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBlbmREYXRlPzogbnVtYmVyLCBzdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkU3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZEVuZERhdGU/OiBudW1iZXIsIGNoZWNrb3V0QXZhaWxhYmxlPzogYm9vbGVhbiwgZG9uZUJ5TW9kZXJhdG9ySWQ/OiBNb2RlcmF0b3JJZCwgbGltaXQ/OiBudW1iZXIsIG9mZnNldD86IG51bWJlciwgc29ydEJ5Pzogc3RyaW5nLCB0YWdzPzogQXJyYXk8c3RyaW5nPiwgdGV4dD86IHN0cmluZywgdG9waWNzPzogQXJyYXk8VG9waWNzPiwgdW5yZXNvbHZlZENvbW1lbnRzPzogYm9vbGVhbiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxVc2VybmFtZU91dHB1dD47XHJcbiAgICBwdWJsaWMgZ2V0VXNlcm5hbWVzKGxhbmd1YWdlOiBzdHJpbmcsIGFpPzogQXJyYXk8QWk+LCBjaGVja291dD86IGJvb2xlYW4sIGNsaWVudElkcz86IEFycmF5PG51bWJlcj4sIGNvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBub3RDb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgZW5kRGF0ZT86IG51bWJlciwgc3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZFN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRFbmREYXRlPzogbnVtYmVyLCBjaGVja291dEF2YWlsYWJsZT86IGJvb2xlYW4sIGRvbmVCeU1vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGxpbWl0PzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIHNvcnRCeT86IHN0cmluZywgdGFncz86IEFycmF5PHN0cmluZz4sIHRleHQ/OiBzdHJpbmcsIHRvcGljcz86IEFycmF5PFRvcGljcz4sIHVucmVzb2x2ZWRDb21tZW50cz86IGJvb2xlYW4sIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxVc2VybmFtZU91dHB1dD4+O1xyXG4gICAgcHVibGljIGdldFVzZXJuYW1lcyhsYW5ndWFnZTogc3RyaW5nLCBhaT86IEFycmF5PEFpPiwgY2hlY2tvdXQ/OiBib29sZWFuLCBjbGllbnRJZHM/OiBBcnJheTxudW1iZXI+LCBjb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgbm90Q29udGVudElkcz86IEFycmF5PHN0cmluZz4sIGVuZERhdGU/OiBudW1iZXIsIHN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRTdGFydERhdGU/OiBudW1iZXIsIHJldmlld2VkRW5kRGF0ZT86IG51bWJlciwgY2hlY2tvdXRBdmFpbGFibGU/OiBib29sZWFuLCBkb25lQnlNb2RlcmF0b3JJZD86IE1vZGVyYXRvcklkLCBsaW1pdD86IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBzb3J0Qnk/OiBzdHJpbmcsIHRhZ3M/OiBBcnJheTxzdHJpbmc+LCB0ZXh0Pzogc3RyaW5nLCB0b3BpY3M/OiBBcnJheTxUb3BpY3M+LCB1bnJlc29sdmVkQ29tbWVudHM/OiBib29sZWFuLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PFVzZXJuYW1lT3V0cHV0Pj47XHJcbiAgICBwdWJsaWMgZ2V0VXNlcm5hbWVzKGxhbmd1YWdlOiBzdHJpbmcsIGFpPzogQXJyYXk8QWk+LCBjaGVja291dD86IGJvb2xlYW4sIGNsaWVudElkcz86IEFycmF5PG51bWJlcj4sIGNvbnRlbnRJZHM/OiBBcnJheTxzdHJpbmc+LCBub3RDb250ZW50SWRzPzogQXJyYXk8c3RyaW5nPiwgZW5kRGF0ZT86IG51bWJlciwgc3RhcnREYXRlPzogbnVtYmVyLCByZXZpZXdlZFN0YXJ0RGF0ZT86IG51bWJlciwgcmV2aWV3ZWRFbmREYXRlPzogbnVtYmVyLCBjaGVja291dEF2YWlsYWJsZT86IGJvb2xlYW4sIGRvbmVCeU1vZGVyYXRvcklkPzogTW9kZXJhdG9ySWQsIGxpbWl0PzogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIsIHNvcnRCeT86IHN0cmluZywgdGFncz86IEFycmF5PHN0cmluZz4sIHRleHQ/OiBzdHJpbmcsIHRvcGljcz86IEFycmF5PFRvcGljcz4sIHVucmVzb2x2ZWRDb21tZW50cz86IGJvb2xlYW4sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuICAgICAgICBpZiAobGFuZ3VhZ2UgPT09IG51bGwgfHwgbGFuZ3VhZ2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBsYW5ndWFnZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFVzZXJuYW1lcy4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogbmV3IEN1c3RvbUh0dHBVcmxFbmNvZGluZ0NvZGVjKCl9KTtcclxuICAgICAgICBpZiAoYWkpIHtcclxuICAgICAgICAgICAgYWkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLmFwcGVuZCgnYWknLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hlY2tvdXQgIT09IHVuZGVmaW5lZCAmJiBjaGVja291dCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdjaGVja291dCcsIDxhbnk+Y2hlY2tvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xpZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ2NsaWVudElkcycsIGNsaWVudElkcy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRlbnRJZHMpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY29udGVudElkcycsIGNvbnRlbnRJZHMuam9pbihDT0xMRUNUSU9OX0ZPUk1BVFNbJ2NzdiddKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub3RDb250ZW50SWRzKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ25vdENvbnRlbnRJZHMnLCBub3RDb250ZW50SWRzLmpvaW4oQ09MTEVDVElPTl9GT1JNQVRTWydjc3YnXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kRGF0ZSAhPT0gdW5kZWZpbmVkICYmIGVuZERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnZW5kRGF0ZScsIDxhbnk+ZW5kRGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFydERhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGFydERhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnc3RhcnREYXRlJywgPGFueT5zdGFydERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV2aWV3ZWRTdGFydERhdGUgIT09IHVuZGVmaW5lZCAmJiByZXZpZXdlZFN0YXJ0RGF0ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdyZXZpZXdlZFN0YXJ0RGF0ZScsIDxhbnk+cmV2aWV3ZWRTdGFydERhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmV2aWV3ZWRFbmREYXRlICE9PSB1bmRlZmluZWQgJiYgcmV2aWV3ZWRFbmREYXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3Jldmlld2VkRW5kRGF0ZScsIDxhbnk+cmV2aWV3ZWRFbmREYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNoZWNrb3V0QXZhaWxhYmxlICE9PSB1bmRlZmluZWQgJiYgY2hlY2tvdXRBdmFpbGFibGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnY2hlY2tvdXRBdmFpbGFibGUnLCA8YW55PmNoZWNrb3V0QXZhaWxhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRvbmVCeU1vZGVyYXRvcklkICE9PSB1bmRlZmluZWQgJiYgZG9uZUJ5TW9kZXJhdG9ySWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnZG9uZUJ5TW9kZXJhdG9ySWQnLCA8YW55PmRvbmVCeU1vZGVyYXRvcklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlICE9PSB1bmRlZmluZWQgJiYgbGFuZ3VhZ2UgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnbGFuZ3VhZ2UnLCA8YW55Pmxhbmd1YWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpbWl0ICE9PSB1bmRlZmluZWQgJiYgbGltaXQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnbGltaXQnLCA8YW55PmxpbWl0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCdvZmZzZXQnLCA8YW55Pm9mZnNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzb3J0QnkgIT09IHVuZGVmaW5lZCAmJiBzb3J0QnkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gcXVlcnlQYXJhbWV0ZXJzLnNldCgnc29ydEJ5JywgPGFueT5zb3J0QnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGFncykge1xyXG4gICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuc2V0KCd0YWdzJywgdGFncy5qb2luKENPTExFQ1RJT05fRk9STUFUU1snY3N2J10pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRleHQgIT09IHVuZGVmaW5lZCAmJiB0ZXh0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3RleHQnLCA8YW55PnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG9waWNzKSB7XHJcbiAgICAgICAgICAgIHRvcGljcy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSBxdWVyeVBhcmFtZXRlcnMuYXBwZW5kKCd0b3BpY3MnLCA8YW55PmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5yZXNvbHZlZENvbW1lbnRzICE9PSB1bmRlZmluZWQgJiYgdW5yZXNvbHZlZENvbW1lbnRzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1ldGVycy5zZXQoJ3VucmVzb2x2ZWRDb21tZW50cycsIDxhbnk+dW5yZXNvbHZlZENvbW1lbnRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8VXNlcm5hbWVPdXRwdXQ+KCdnZXQnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlL3VzZXJuYW1lcy9pdGVtc2AsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgeW91ciBkZWNpc2lvbiB0byB0aGlzIGNvbnRlbnQgaXRlbVxyXG4gICAgICogVGhpcyB3aWxsICAgLSBSZWxlYXNlIHlvdXIgY2hlY2tvdXQgb24gdGhlIGl0ZW0gIC0gUmVjb3JkIGhvdyBsb25nIHlvdSBzcGVudCBvbiBpdCAoc2hvdWxkIGJlIHRvdGFsIGl0ZW1zIG9uIHNjcmVlbiAvIHNlY29uZHMgc2luY2Ugc3RhcnRlZCBtaW51cyBhbnkgcGF1c2VzKSAgLSByZWNvcmQgd2hhdCB0aGUgY3VycmVudCByaXNrIGlzIHdoZW4gcmV2aWV3ZWQgKGlmIGFwcGxpY2FibGUpICAtIHJlY29yZCB3aGF0IHRhZ3MgeW91IHNldCBpdCBhcyAoaW5jbHVkaW5nIHRoZSBkZWNpc2lvbiB5b3UgbWFkZSB3aGVyZSBiYW4gdXNlciwgYWdyZWUsIGRpc2FncmVlLCBkZWxldGUgY29udGVudCBhcmUgYWxsIHRhZ3MpIFxyXG4gICAgICogQHBhcmFtIHF1ZXVlSWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gY29udGVudElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGl0ZW1Eb25lKHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGJvZHk/OiBEZWNpc2lvbiwgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxJbmxpbmVSZXNwb25zZTIwMT47XHJcbiAgICBwdWJsaWMgaXRlbURvbmUocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgYm9keT86IERlY2lzaW9uLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5saW5lUmVzcG9uc2UyMDE+PjtcclxuICAgIHB1YmxpYyBpdGVtRG9uZShxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBib2R5PzogRGVjaXNpb24sIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8SW5saW5lUmVzcG9uc2UyMDE+PjtcclxuICAgIHB1YmxpYyBpdGVtRG9uZShxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBib2R5PzogRGVjaXNpb24sIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cclxuICAgICAgICBpZiAocXVldWVJZCA9PT0gbnVsbCB8fCBxdWV1ZUlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgcXVldWVJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGl0ZW1Eb25lLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnRJZCA9PT0gbnVsbCB8fCBjb250ZW50SWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb250ZW50SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBpdGVtRG9uZS4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxJbmxpbmVSZXNwb25zZTIwMT4oJ3Bvc3QnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhxdWV1ZUlkKSl9L2l0ZW1zLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZW50SWQpKX0vZGVjaXNpb25gLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0IGNvbW1lbnRzIG9uIHRoaXMgY29udGVudCBpdGVtXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBxdWV1ZUlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxyXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbGlzdENvbW1lbnRzRm9yQ29udGVudElkKHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8QXJyYXk8Q29tbWVudD4+O1xyXG4gICAgcHVibGljIGxpc3RDb21tZW50c0ZvckNvbnRlbnRJZChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXJyYXk8Q29tbWVudD4+PjtcclxuICAgIHB1YmxpYyBsaXN0Q29tbWVudHNGb3JDb250ZW50SWQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBcnJheTxDb21tZW50Pj4+O1xyXG4gICAgcHVibGljIGxpc3RDb21tZW50c0ZvckNvbnRlbnRJZChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXVlSWQgPT09IG51bGwgfHwgcXVldWVJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHF1ZXVlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBsaXN0Q29tbWVudHNGb3JDb250ZW50SWQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGVudElkID09PSBudWxsIHx8IGNvbnRlbnRJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGNvbnRlbnRJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGxpc3RDb21tZW50c0ZvckNvbnRlbnRJZC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8QXJyYXk8Q29tbWVudD4+KCdnZXQnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhxdWV1ZUlkKSl9L2l0ZW1zLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZW50SWQpKX0vY29tbWVudHNgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgdGV4dCBvZiBhbiBpdGVtXHJcbiAgICAgKiBVcGRhdGUgdGhlIGNvbnRlbnQuICBUeXBpY2FsbHkgdXNlZCBmb3IgcmVkYWN0aW5nLiAgSXQgaXMgbGltaXRlZCBpbiB3aGF0IHlvdSBjYW4gZG8uIFxyXG4gICAgICogQHBhcmFtIHF1ZXVlSWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gY29udGVudElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlZGFjdEl0ZW0ocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgYm9keT86IEJvZHksIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SW5saW5lUmVzcG9uc2UyMDAxPjtcclxuICAgIHB1YmxpYyByZWRhY3RJdGVtKHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGJvZHk/OiBCb2R5LCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5saW5lUmVzcG9uc2UyMDAxPj47XHJcbiAgICBwdWJsaWMgcmVkYWN0SXRlbShxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBib2R5PzogQm9keSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxJbmxpbmVSZXNwb25zZTIwMDE+PjtcclxuICAgIHB1YmxpYyByZWRhY3RJdGVtKHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGJvZHk/OiBCb2R5LCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXVlSWQgPT09IG51bGwgfHwgcXVldWVJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHF1ZXVlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyByZWRhY3RJdGVtLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnRJZCA9PT0gbnVsbCB8fCBjb250ZW50SWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb250ZW50SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyByZWRhY3RJdGVtLicpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcclxuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0PElubGluZVJlc3BvbnNlMjAwMT4oJ3B1dCcsYCR7dGhpcy5iYXNlUGF0aH0vaW5ib3gvcXVldWUvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHF1ZXVlSWQpKX0vaXRlbXMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRlbnRJZCkpfS90ZXh0YCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYm9keTogYm9keSxcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVkYWN0IGEgdXNlcnMgZGF0YVxyXG4gICAgICogVGhpcyB3aWxsIHJlZGFjdCBhbmQgcHNldWRvbnltaXplIGFsbCBkYXRhIHdlIGhhdmUgb24gYSB1c2VyLiBUaGlzIGlzIHJlY29tbWVuZGVkIGZvciBHRFBSIGFuZCBDQ1BBIGNvbXBsaWFuY2UgYXJvdW5kIHRlcm1zIGxpa2UgcmlnaHQgdG8gYmUgZm9yZ2V0dGVuLiBcclxuICAgICAqIEBwYXJhbSB1c2VySWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHVzZXJcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWRhY3RVc2VyKHVzZXJJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFF1ZXVlPjtcclxuICAgIHB1YmxpYyByZWRhY3RVc2VyKHVzZXJJZDogc3RyaW5nLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8UXVldWU+PjtcclxuICAgIHB1YmxpYyByZWRhY3RVc2VyKHVzZXJJZDogc3RyaW5nLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PFF1ZXVlPj47XHJcbiAgICBwdWJsaWMgcmVkYWN0VXNlcih1c2VySWQ6IHN0cmluZywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmICh1c2VySWQgPT09IG51bGwgfHwgdXNlcklkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgdXNlcklkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcmVkYWN0VXNlci4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXHJcbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xyXG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8UXVldWU+KCdwdXQnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3VzZXIvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHVzZXJJZCkpfWAsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxyXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFyayBhIGNvbW1lbnQgYXMgcmVzb2x2ZWQgKG9yIHJlb3BlbilcclxuICAgICAqIENvbW1lbnRzIGNhbiBiZSBtYXJrZWQgYXMgbmVlZGluZyB0byBiZSBhbnN3ZXJlZC4gXHJcbiAgICAgKiBAcGFyYW0gcXVldWVJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgcXVldWVcclxuICAgICAqIEBwYXJhbSBjb250ZW50SWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29udGVudFxyXG4gICAgICogQHBhcmFtIGNvbW1lbnRJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb21tZW50XHJcbiAgICAgKiBAcGFyYW0gYm9keSBcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXNvbHZlQ29tbWVudChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBjb21tZW50SWQ6IHN0cmluZywgYm9keT86IEJvZHkxLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPENvbW1lbnQ+O1xyXG4gICAgcHVibGljIHJlc29sdmVDb21tZW50KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGNvbW1lbnRJZDogc3RyaW5nLCBib2R5PzogQm9keTEsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxDb21tZW50Pj47XHJcbiAgICBwdWJsaWMgcmVzb2x2ZUNvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgY29tbWVudElkOiBzdHJpbmcsIGJvZHk/OiBCb2R5MSwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxDb21tZW50Pj47XHJcbiAgICBwdWJsaWMgcmVzb2x2ZUNvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgY29tbWVudElkOiBzdHJpbmcsIGJvZHk/OiBCb2R5MSwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcmVzb2x2ZUNvbW1lbnQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGVudElkID09PSBudWxsIHx8IGNvbnRlbnRJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGNvbnRlbnRJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHJlc29sdmVDb21tZW50LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbW1lbnRJZCA9PT0gbnVsbCB8fCBjb21tZW50SWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBjb21tZW50SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyByZXNvbHZlQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxDb21tZW50PigncHV0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocXVldWVJZCkpfS9pdGVtcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGVudElkKSl9L2NvbW1lbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb21tZW50SWQpKX0vcmVzb2x2ZWRgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgYSBjb21tZW50XHJcbiAgICAgKiBDb21tZW50cyBhcmUgd2F5cyB0byBsZWF2ZSBhIG5vdGUgdG8gc2F5IHdoeSBhIHBlcnNvbiBtYWRlIHRoZSBkZWNpc2lvbiB0aGV5IGRpZC4gIE9yIGl0IGNvdWxkIGJlIGEgcXVlc3Rpb24gb3IgYW5zd2VyIHRyeWluZyB0byBnZXQgaGVscCBvbiBhbiBpdGVtLiBcclxuICAgICAqIEBwYXJhbSBxdWV1ZUlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb250ZW50XHJcbiAgICAgKiBAcGFyYW0gY29tbWVudElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbW1lbnRcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZUNvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgY29tbWVudElkOiBzdHJpbmcsIGJvZHk/OiBDb21tZW50LCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPENvbW1lbnQ+O1xyXG4gICAgcHVibGljIHVwZGF0ZUNvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgY29tbWVudElkOiBzdHJpbmcsIGJvZHk/OiBDb21tZW50LCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8Q29tbWVudD4+O1xyXG4gICAgcHVibGljIHVwZGF0ZUNvbW1lbnQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgY29tbWVudElkOiBzdHJpbmcsIGJvZHk/OiBDb21tZW50LCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SHR0cEV2ZW50PENvbW1lbnQ+PjtcclxuICAgIHB1YmxpYyB1cGRhdGVDb21tZW50KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGNvbW1lbnRJZDogc3RyaW5nLCBib2R5PzogQ29tbWVudCwgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlICk6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgICAgIGlmIChxdWV1ZUlkID09PSBudWxsIHx8IHF1ZXVlSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWV1ZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZW50SWQgPT09IG51bGwgfHwgY29udGVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29udGVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb21tZW50SWQgPT09IG51bGwgfHwgY29tbWVudElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgY29tbWVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlQ29tbWVudC4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxDb21tZW50PigncHV0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocXVldWVJZCkpfS9pdGVtcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGVudElkKSl9L2NvbW1lbnRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb21tZW50SWQpKX1gLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5ldyBhIGNoZWNrb3V0IG9uIGFuIGl0ZW1cclxuICAgICAqIFdoZW4geW91IGZpcnN0IGdldCBhbiBpdGVtIGlmIGNoZWNrb3V0JiN4M0Q7VHJ1ZSB5b3Ugd2lsbCBoYXZlIGNoZWNrZWQgaXQgb3V0LiAgWW91IHNob3VsZCBiZSBzaG93aW5nIGEgd2FybmluZyB3aGVuIHRoZSBjaGVja291dCBpcyBhbG1vc3QgZXhwaXJlZC4gIENhbGxpbmcgdGhpcyBBUEkgd2lsbCBhbGxvdyB5b3UgdG8gcmVuZXcgaXQuIFxyXG4gICAgICogQHBhcmFtIHF1ZXVlSWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHF1ZXVlXHJcbiAgICAgKiBAcGFyYW0gY29udGVudElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbnRlbnRcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZUl0ZW1DaGVja291dChxdWV1ZUlkOiBzdHJpbmcsIGNvbnRlbnRJZDogc3RyaW5nLCBib2R5PzogQ2hlY2tvdXQsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8SW5saW5lUmVzcG9uc2UyMDAxPjtcclxuICAgIHB1YmxpYyB1cGRhdGVJdGVtQ2hlY2tvdXQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgYm9keT86IENoZWNrb3V0LCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8SW5saW5lUmVzcG9uc2UyMDAxPj47XHJcbiAgICBwdWJsaWMgdXBkYXRlSXRlbUNoZWNrb3V0KHF1ZXVlSWQ6IHN0cmluZywgY29udGVudElkOiBzdHJpbmcsIGJvZHk/OiBDaGVja291dCwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxJbmxpbmVSZXNwb25zZTIwMDE+PjtcclxuICAgIHB1YmxpYyB1cGRhdGVJdGVtQ2hlY2tvdXQocXVldWVJZDogc3RyaW5nLCBjb250ZW50SWQ6IHN0cmluZywgYm9keT86IENoZWNrb3V0LCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXVlSWQgPT09IG51bGwgfHwgcXVldWVJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHF1ZXVlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVJdGVtQ2hlY2tvdXQuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGVudElkID09PSBudWxsIHx8IGNvbnRlbnRJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGNvbnRlbnRJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHVwZGF0ZUl0ZW1DaGVja291dC4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XHJcblxyXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxyXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcclxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXHJcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XHJcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucmVxdWVzdDxJbmxpbmVSZXNwb25zZTIwMDE+KCdwdXQnLGAke3RoaXMuYmFzZVBhdGh9L2luYm94L3F1ZXVlLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhxdWV1ZUlkKSl9L2l0ZW1zLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZW50SWQpKX0vY2hlY2tvdXRgLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcclxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXHJcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBjdXN0b20gcGFyYW1cclxuICAgICAqIFlvdSBjYW4gY3VzdG9taXplIHNvbWUgZmllbGRzLiAgVG8gZ2V0IGFsbCB0aGUgcGFyYW1zIHVzZSBHRVQgL2luYm94L3F1ZXVlL3txdWV1ZUlkfSBcclxuICAgICAqIEBwYXJhbSBxdWV1ZUlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhpcyBxdWV1ZVxyXG4gICAgICogQHBhcmFtIHBhcmFtSWQgQSBjdXN0b20gY29uZmlndXJhdGlvbiBmb3IgYSBjbGllbnRcclxuICAgICAqIEBwYXJhbSBib2R5IFxyXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cclxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZVBhcmFtKHF1ZXVlSWQ6IHN0cmluZywgcGFyYW1JZDogc3RyaW5nLCBib2R5PzogQm9keTIsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbik6IE9ic2VydmFibGU8YW55PjtcclxuICAgIHB1YmxpYyB1cGRhdGVQYXJhbShxdWV1ZUlkOiBzdHJpbmcsIHBhcmFtSWQ6IHN0cmluZywgYm9keT86IEJvZHkyLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XHJcbiAgICBwdWJsaWMgdXBkYXRlUGFyYW0ocXVldWVJZDogc3RyaW5nLCBwYXJhbUlkOiBzdHJpbmcsIGJvZHk/OiBCb2R5Miwgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcclxuICAgIHB1YmxpYyB1cGRhdGVQYXJhbShxdWV1ZUlkOiBzdHJpbmcsIHBhcmFtSWQ6IHN0cmluZywgYm9keT86IEJvZHkyLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXVlSWQgPT09IG51bGwgfHwgcXVldWVJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHF1ZXVlSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVQYXJhbS4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXJhbUlkID09PSBudWxsIHx8IHBhcmFtSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBwYXJhbUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlUGFyYW0uJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xyXG5cclxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcclxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XHJcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXHJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xyXG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3Q8YW55PigncHV0JyxgJHt0aGlzLmJhc2VQYXRofS9pbmJveC9xdWV1ZS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocXVldWVJZCkpfS9wYXJhbS8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocGFyYW1JZCkpfWAsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXHJcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcclxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19