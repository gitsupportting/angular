/**
 * Rules
 * The filter works as a series of rules so that each word can be mapped to a rule.  So \"Happy\" can become \"happy\" and \"b4d\" and become \"bad\".    With this API you can manage your rules.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@twohat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export const Flag = {
    ENABLED: 'ENABLED',
    DELETED: 'DELETED',
    COMMON: 'COMMON',
    WATCH: 'WATCH',
    SKIP: 'SKIP',
    PHRASERULE: 'PHRASE_RULE',
    USERNAME: 'USERNAME',
    FIRSTNAME: 'FIRST_NAME',
    LASTNAME: 'LAST_NAME',
    CITY: 'CITY',
    STATE: 'STATE',
    COUNTRY: 'COUNTRY',
    EMAILADDRESS: 'EMAIL_ADDRESS',
    DICT: 'DICT',
    OBJ: 'OBJ',
    GENERATED: 'GENERATED',
    MODERATED: 'MODERATED',
    WORD: 'WORD',
    NOUN: 'NOUN',
    VERB: 'VERB',
    PRONOUN: 'PRONOUN',
    ADJECTIVE: 'ADJECTIVE',
    ADVERB: 'ADVERB',
    CONJ: 'CONJ',
    DET: 'DET',
    INTER: 'INTER',
    PROPERNOUN: 'PROPER_NOUN',
    BIGRAM: 'BIGRAM',
    NGRAM: 'NGRAM',
    SIMPLIFIED: 'SIMPLIFIED'
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3J1bGVzLXN3YWdnZXItY2xpZW50LyIsInNvdXJjZXMiOlsibW9kZWwvZmxhZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztHQVVHO0FBT0gsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHO0lBQ2hCLE9BQU8sRUFBRSxTQUFpQjtJQUMxQixPQUFPLEVBQUUsU0FBaUI7SUFDMUIsTUFBTSxFQUFFLFFBQWdCO0lBQ3hCLEtBQUssRUFBRSxPQUFlO0lBQ3RCLElBQUksRUFBRSxNQUFjO0lBQ3BCLFVBQVUsRUFBRSxhQUFxQjtJQUNqQyxRQUFRLEVBQUUsVUFBa0I7SUFDNUIsU0FBUyxFQUFFLFlBQW9CO0lBQy9CLFFBQVEsRUFBRSxXQUFtQjtJQUM3QixJQUFJLEVBQUUsTUFBYztJQUNwQixLQUFLLEVBQUUsT0FBZTtJQUN0QixPQUFPLEVBQUUsU0FBaUI7SUFDMUIsWUFBWSxFQUFFLGVBQXVCO0lBQ3JDLElBQUksRUFBRSxNQUFjO0lBQ3BCLEdBQUcsRUFBRSxLQUFhO0lBQ2xCLFNBQVMsRUFBRSxXQUFtQjtJQUM5QixTQUFTLEVBQUUsV0FBbUI7SUFDOUIsSUFBSSxFQUFFLE1BQWM7SUFDcEIsSUFBSSxFQUFFLE1BQWM7SUFDcEIsSUFBSSxFQUFFLE1BQWM7SUFDcEIsT0FBTyxFQUFFLFNBQWlCO0lBQzFCLFNBQVMsRUFBRSxXQUFtQjtJQUM5QixNQUFNLEVBQUUsUUFBZ0I7SUFDeEIsSUFBSSxFQUFFLE1BQWM7SUFDcEIsR0FBRyxFQUFFLEtBQWE7SUFDbEIsS0FBSyxFQUFFLE9BQWU7SUFDdEIsVUFBVSxFQUFFLGFBQXFCO0lBQ2pDLE1BQU0sRUFBRSxRQUFnQjtJQUN4QixLQUFLLEVBQUUsT0FBZTtJQUN0QixVQUFVLEVBQUUsWUFBb0I7Q0FDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUnVsZXNcbiAqIFRoZSBmaWx0ZXIgd29ya3MgYXMgYSBzZXJpZXMgb2YgcnVsZXMgc28gdGhhdCBlYWNoIHdvcmQgY2FuIGJlIG1hcHBlZCB0byBhIHJ1bGUuICBTbyBcXFwiSGFwcHlcXFwiIGNhbiBiZWNvbWUgXFxcImhhcHB5XFxcIiBhbmQgXFxcImI0ZFxcXCIgYW5kIGJlY29tZSBcXFwiYmFkXFxcIi4gICAgV2l0aCB0aGlzIEFQSSB5b3UgY2FuIG1hbmFnZSB5b3VyIHJ1bGVzLiBcbiAqXG4gKiBPcGVuQVBJIHNwZWMgdmVyc2lvbjogMi4wLjNcbiAqIENvbnRhY3Q6IHN1cHBvcnRAdHdvaGF0LmNvbVxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgdGhlIHN3YWdnZXIgY29kZSBnZW5lcmF0b3IgcHJvZ3JhbS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4uZ2l0XG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cblxuLyoqXG4gKiBXaGF0IGtpbmQgb2YgZmxhZyBpcyBpdCAgWW91IG11c3QgaGF2ZSBFTkFCTEVEIGlmIHlvdSB3YW50IGl0IHRvIGJlIGFjdGl2ZSwgd2l0aG91dCBpdCBpdCBpcyBhIGRpc2FibGVkIHJ1bGUgIEV2ZXJ5dGhpbmcgZnJvbSBESUNUIGFuZCBiZWxvdyBpcyBiZWluZyBkZXByZWNhdGVkIFxuICovXG5leHBvcnQgdHlwZSBGbGFnID0gJ0VOQUJMRUQnIHwgJ0RFTEVURUQnIHwgJ0NPTU1PTicgfCAnV0FUQ0gnIHwgJ1NLSVAnIHwgJ1BIUkFTRV9SVUxFJyB8ICdVU0VSTkFNRScgfCAnRklSU1RfTkFNRScgfCAnTEFTVF9OQU1FJyB8ICdDSVRZJyB8ICdTVEFURScgfCAnQ09VTlRSWScgfCAnRU1BSUxfQUREUkVTUycgfCAnRElDVCcgfCAnT0JKJyB8ICdHRU5FUkFURUQnIHwgJ01PREVSQVRFRCcgfCAnV09SRCcgfCAnTk9VTicgfCAnVkVSQicgfCAnUFJPTk9VTicgfCAnQURKRUNUSVZFJyB8ICdBRFZFUkInIHwgJ0NPTkonIHwgJ0RFVCcgfCAnSU5URVInIHwgJ1BST1BFUl9OT1VOJyB8ICdCSUdSQU0nIHwgJ05HUkFNJyB8ICdTSU1QTElGSUVEJztcblxuZXhwb3J0IGNvbnN0IEZsYWcgPSB7XG4gICAgRU5BQkxFRDogJ0VOQUJMRUQnIGFzIEZsYWcsXG4gICAgREVMRVRFRDogJ0RFTEVURUQnIGFzIEZsYWcsXG4gICAgQ09NTU9OOiAnQ09NTU9OJyBhcyBGbGFnLFxuICAgIFdBVENIOiAnV0FUQ0gnIGFzIEZsYWcsXG4gICAgU0tJUDogJ1NLSVAnIGFzIEZsYWcsXG4gICAgUEhSQVNFUlVMRTogJ1BIUkFTRV9SVUxFJyBhcyBGbGFnLFxuICAgIFVTRVJOQU1FOiAnVVNFUk5BTUUnIGFzIEZsYWcsXG4gICAgRklSU1ROQU1FOiAnRklSU1RfTkFNRScgYXMgRmxhZyxcbiAgICBMQVNUTkFNRTogJ0xBU1RfTkFNRScgYXMgRmxhZyxcbiAgICBDSVRZOiAnQ0lUWScgYXMgRmxhZyxcbiAgICBTVEFURTogJ1NUQVRFJyBhcyBGbGFnLFxuICAgIENPVU5UUlk6ICdDT1VOVFJZJyBhcyBGbGFnLFxuICAgIEVNQUlMQUREUkVTUzogJ0VNQUlMX0FERFJFU1MnIGFzIEZsYWcsXG4gICAgRElDVDogJ0RJQ1QnIGFzIEZsYWcsXG4gICAgT0JKOiAnT0JKJyBhcyBGbGFnLFxuICAgIEdFTkVSQVRFRDogJ0dFTkVSQVRFRCcgYXMgRmxhZyxcbiAgICBNT0RFUkFURUQ6ICdNT0RFUkFURUQnIGFzIEZsYWcsXG4gICAgV09SRDogJ1dPUkQnIGFzIEZsYWcsXG4gICAgTk9VTjogJ05PVU4nIGFzIEZsYWcsXG4gICAgVkVSQjogJ1ZFUkInIGFzIEZsYWcsXG4gICAgUFJPTk9VTjogJ1BST05PVU4nIGFzIEZsYWcsXG4gICAgQURKRUNUSVZFOiAnQURKRUNUSVZFJyBhcyBGbGFnLFxuICAgIEFEVkVSQjogJ0FEVkVSQicgYXMgRmxhZyxcbiAgICBDT05KOiAnQ09OSicgYXMgRmxhZyxcbiAgICBERVQ6ICdERVQnIGFzIEZsYWcsXG4gICAgSU5URVI6ICdJTlRFUicgYXMgRmxhZyxcbiAgICBQUk9QRVJOT1VOOiAnUFJPUEVSX05PVU4nIGFzIEZsYWcsXG4gICAgQklHUkFNOiAnQklHUkFNJyBhcyBGbGFnLFxuICAgIE5HUkFNOiAnTkdSQU0nIGFzIEZsYWcsXG4gICAgU0lNUExJRklFRDogJ1NJTVBMSUZJRUQnIGFzIEZsYWdcbn07Il19