! function (e, t) {
  "object" == typeof exports && "undefined" != typeof module ? t(exports, require("@angular/core"), require("@angular/common/http")) : "function" == typeof define && define.amd ? define("rules-swagger-client/src", ["exports", "@angular/core", "@angular/common/http"], t) : t(((e = e || self)["rules-swagger-client"] = e["rules-swagger-client"] || {}, e["rules-swagger-client"].src = {}), e.ng.core, e.ng.common.http)
}(this, (function (e, t, n) {
  "use strict";
  /*! *****************************************************************************
      Copyright (c) Microsoft Corporation. All rights reserved.
      Licensed under the Apache License, Version 2.0 (the "License"); you may not use
      this file except in compliance with the License. You may obtain a copy of the
      License at http://www.apache.org/licenses/LICENSE-2.0

      THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
      WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
      MERCHANTABLITY OR NON-INFRINGEMENT.

      See the Apache Version 2.0 License for specific language governing permissions
      and limitations under the License.
      ***************************************************************************** */
  var r = function (e, t) {
    return (r = Object.setPrototypeOf || {
        __proto__: []
      }
      instanceof Array && function (e, t) {
        e.__proto__ = t
      } || function (e, t) {
        for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
      })(e, t)
  };

  function i(e) {
    var t = "function" == typeof Symbol && Symbol.iterator,
      n = t && e[t],
      r = 0;
    if (n) return n.call(e);
    if (e && "number" == typeof e.length) return {
      next: function () {
        return e && r >= e.length && (e = void 0), {
          value: e && e[r++],
          done: !e
        }
      }
    };
    throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.")
  }
  var o = function (e) {
      function t() {
        return null !== e && e.apply(this, arguments) || this
      }
      return function (e, t) {
        function n() {
          this.constructor = e
        }
        r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
      }(t, e), t.prototype.encodeKey = function (t) {
        return (t = e.prototype.encodeKey.call(this, t)).replace(/\+/gi, "%2B")
      }, t.prototype.encodeValue = function (t) {
        return (t = e.prototype.encodeValue.call(this, t)).replace(/\+/gi, "%2B")
      }, t
    }(n.HttpUrlEncodingCodec),
    a = new t.InjectionToken("basePath"),
    s = {
      csv: ",",
      tsv: "   ",
      ssv: " ",
      pipes: "|"
    },
    l = function () {
      function e(e) {
        void 0 === e && (e = {}), this.apiKeys = e.apiKeys, this.username = e.username, this.password = e.password, this.accessToken = e.accessToken, this.basePath = e.basePath, this.withCredentials = e.withCredentials
      }
      return e.prototype.selectHeaderContentType = function (e) {
        var t = this;
        if (0 != e.length) {
          var n = e.find((function (e) {
            return t.isJsonMime(e)
          }));
          return void 0 === n ? e[0] : n
        }
      }, e.prototype.selectHeaderAccept = function (e) {
        var t = this;
        if (0 != e.length) {
          var n = e.find((function (e) {
            return t.isJsonMime(e)
          }));
          return void 0 === n ? e[0] : n
        }
      }, e.prototype.isJsonMime = function (e) {
        var t = new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$", "i");
        return null != e && (t.test(e) || "application/json-patch+json" === e.toLowerCase())
      }, e
    }(),
    u = function () {
      function e(e, t, r) {
        this.httpClient = e, this.basePath = "https://virtserver.swaggerhub.com/twohat/rules/2.0.3", this.defaultHeaders = new n.HttpHeaders, this.configuration = new l, t && (this.basePath = t), r && (this.configuration = r, this.basePath = t || r.basePath || this.basePath)
      }
      return e.prototype.canConsumeForm = function (e) {
        var t, n;
        try {
          for (var r = i(e), o = r.next(); !o.done; o = r.next()) {
            if ("multipart/form-data" === o.value) return !0
          }
        } catch (e) {
          t = {
            error: e
          }
        } finally {
          try {
            o && !o.done && (n = r.return) && n.call(r)
          } finally {
            if (t) throw t.error
          }
        }
        return !1
      }, e.prototype.addComment = function (e, t, r, i, a, s) {
        if (void 0 === a && (a = "body"), void 0 === s && (s = !1), null == e) throw new Error("Required parameter language was null or undefined when calling addComment.");
        if (null == t) throw new Error("Required parameter text was null or undefined when calling addComment.");
        var l = new n.HttpParams({
          encoder: new o
        });
        null != e && (l = l.set("language", e)), null != i && (l = l.set("clientId", i));
        var u = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var c = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          u = u.set("Authorization", "Bearer " + c)
        }
        var d = this.configuration.selectHeaderAccept(["application/json"]);
        null != d && (u = u.set("Accept", d));
        var p = this.configuration.selectHeaderContentType(["application/json"]);
        return null != p && (u = u.set("Content-Type", p)), this.httpClient.request("post", this.basePath + "/rules/text/" + encodeURIComponent(String(t)) + "/comments", {
          body: r,
          params: l,
          withCredentials: this.configuration.withCredentials,
          headers: u,
          observe: a,
          reportProgress: s
        })
      }, e.prototype.deleteAlternateSense = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteAlternateSense.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling deleteAlternateSense.");
        if (null == r) throw new Error("Required parameter dependency was null or undefined when calling deleteAlternateSense.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/alt_senses/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.deleteAlternateSpelling = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteAlternateSpelling.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling deleteAlternateSpelling.");
        if (null == r) throw new Error("Required parameter dependency was null or undefined when calling deleteAlternateSpelling.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/alt_spellings/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.deleteComment = function (e, t, r, i, a, s) {
        if (void 0 === a && (a = "body"), void 0 === s && (s = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteComment.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling deleteComment.");
        if (null == r) throw new Error("Required parameter commentId was null or undefined when calling deleteComment.");
        var l = new n.HttpParams({
          encoder: new o
        });
        null != t && (l = l.set("language", t)), null != i && (l = l.set("clientId", i));
        var u = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var c = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          u = u.set("Authorization", "Bearer " + c)
        }
        var d = this.configuration.selectHeaderAccept(["application/json"]);
        null != d && (u = u.set("Accept", d));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/comments/" + encodeURIComponent(String(r)), {
          params: l,
          withCredentials: this.configuration.withCredentials,
          headers: u,
          observe: a,
          reportProgress: s
        })
      }, e.prototype.deleteFlag = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteFlag.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling deleteFlag.");
        if (null == r) throw new Error("Required parameter flag was null or undefined when calling deleteFlag.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/flags/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.deleteLeetMapping = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteLeetMapping.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling deleteLeetMapping.");
        if (null == r) throw new Error("Required parameter dependency was null or undefined when calling deleteLeetMapping.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/leet_mappings/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.deleteRule = function (e, t, r, i, a, s) {
        if (void 0 === a && (a = "body"), void 0 === s && (s = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteRule.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling deleteRule.");
        var l = new n.HttpParams({
          encoder: new o
        });
        null != t && (l = l.set("language", t)), null != r && (l = l.set("clientId", r)), null != i && (l = l.set("publish", i));
        var u = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var c = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          u = u.set("Authorization", "Bearer " + c)
        }
        var d = this.configuration.selectHeaderAccept(["application/json"]);
        null != d && (u = u.set("Accept", d));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)), {
          params: l,
          withCredentials: this.configuration.withCredentials,
          headers: u,
          observe: a,
          reportProgress: s
        })
      }, e.prototype.deleteTopic = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteTopic.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling deleteTopic.");
        if (null == r) throw new Error("Required parameter topicId was null or undefined when calling deleteTopic.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/topic/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.getAutocomplete = function (e, t, r, i, a, s) {
        if (void 0 === a && (a = "body"), void 0 === s && (s = !1), null == e) throw new Error("Required parameter prefix was null or undefined when calling getAutocomplete.");
        var l = new n.HttpParams({
          encoder: new o
        });
        t && t.forEach((function (e) {
          l = l.append("clientIds", e)
        })), r && r.forEach((function (e) {
          l = l.append("languages", e)
        })), null != i && (l = l.set("limit", i));
        var u = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var c = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          u = u.set("Authorization", "Bearer " + c)
        }
        var d = this.configuration.selectHeaderAccept(["application/json"]);
        null != d && (u = u.set("Accept", d));
        return this.httpClient.request("get", this.basePath + "/rules/autocomplete/" + encodeURIComponent(String(e)), {
          params: l,
          withCredentials: this.configuration.withCredentials,
          headers: u,
          observe: a,
          reportProgress: s
        })
      }, e.prototype.getComment = function (e, t, r, i, a, s) {
        if (void 0 === a && (a = "body"), void 0 === s && (s = !1), null == e) throw new Error("Required parameter text was null or undefined when calling getComment.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling getComment.");
        if (null == r) throw new Error("Required parameter commentId was null or undefined when calling getComment.");
        var l = new n.HttpParams({
          encoder: new o
        });
        null != t && (l = l.set("language", t)), null != i && (l = l.set("clientId", i));
        var u = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var c = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          u = u.set("Authorization", "Bearer " + c)
        }
        var d = this.configuration.selectHeaderAccept(["application/json"]);
        null != d && (u = u.set("Accept", d));
        return this.httpClient.request("get", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/comments/" + encodeURIComponent(String(r)), {
          params: l,
          withCredentials: this.configuration.withCredentials,
          headers: u,
          observe: a,
          reportProgress: s
        })
      }, e.prototype.getRule = function (e, t, r, i, a) {
        if (void 0 === i && (i = "body"), void 0 === a && (a = !1), null == e) throw new Error("Required parameter text was null or undefined when calling getRule.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling getRule.");
        var s = new n.HttpParams({
          encoder: new o
        });
        null != t && (s = s.set("language", t)), null != r && (s = s.set("clientId", r));
        var l = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var u = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          l = l.set("Authorization", "Bearer " + u)
        }
        var c = this.configuration.selectHeaderAccept(["application/json"]);
        null != c && (l = l.set("Accept", c));
        return this.httpClient.request("get", this.basePath + "/rules/text/" + encodeURIComponent(String(e)), {
          params: s,
          withCredentials: this.configuration.withCredentials,
          headers: l,
          observe: i,
          reportProgress: a
        })
      }, e.prototype.getRuleHistory = function (e, t, r, i, a, l, u, c) {
        if (void 0 === u && (u = "body"), void 0 === c && (c = !1), null == e) throw new Error("Required parameter text was null or undefined when calling getRuleHistory.");
        var d = new n.HttpParams({
          encoder: new o
        });
        t && t.forEach((function (e) {
          d = d.append("languages", e)
        })), r && (d = d.set("clientIds", r.join(s.csv))), null != i && (d = d.set("limit", i)), null != a && (d = d.set("offset", a)), null != l && (d = d.set("refresh", l));
        var p = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var h = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          p = p.set("Authorization", "Bearer " + h)
        }
        var f = this.configuration.selectHeaderAccept(["application/json"]);
        null != f && (p = p.set("Accept", f));
        return this.httpClient.request("get", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/changelog", {
          params: d,
          withCredentials: this.configuration.withCredentials,
          headers: p,
          observe: u,
          reportProgress: c
        })
      }, e.prototype.getRules = function (e, t, r, i, a, l, u, c, d, p, h, f, g, w, m, v, C, T, y, R, A, E, b) {
        void 0 === E && (E = "body"), void 0 === b && (b = !1);
        var k = new n.HttpParams({
          encoder: new o
        });
        e && e.forEach((function (e) {
          k = k.append("ai", e)
        })), null != t && (k = k.set("doneByModeratorId", t)), r && r.forEach((function (e) {
          k = k.append("clientIds", e)
        })), null != i && (k = k.set("endDate", i)), null != a && (k = k.set("startDate", a)), null != l && (k = k.set("lastChangedStartDate", l)), null != u && (k = k.set("lastChangedEndDate", u)), null != c && (k = k.set("deleted", c)), null != d && (k = k.set("publishedStartDate", d)), null != p && (k = k.set("publishedEndDate", p)), h && h.forEach((function (e) {
          k = k.append("languages", e)
        })), null != f && (k = k.set("limit", f)), null != g && (k = k.set("offset", g)), null != w && (k = k.set("altSense", w)), null != m && (k = k.set("altSpelling", m)), null != v && (k = k.set("leetMapping", v)), null != C && (k = k.set("taskId", C)), T && (k = k.set("tags", T.join(s.csv))), null != y && (k = k.set("text", y)), R && R.forEach((function (e) {
          k = k.append("topics", e)
        })), null != A && (k = k.set("unresolvedComments", A));
        var P = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var H = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          P = P.set("Authorization", "Bearer " + H)
        }
        var I = this.configuration.selectHeaderAccept(["application/json"]);
        null != I && (P = P.set("Accept", I));
        return this.httpClient.request("get", this.basePath + "/rules", {
          params: k,
          withCredentials: this.configuration.withCredentials,
          headers: P,
          observe: E,
          reportProgress: b
        })
      }, e.prototype.listComments = function (e, t, r, i, a) {
        if (void 0 === i && (i = "body"), void 0 === a && (a = !1), null == e) throw new Error("Required parameter text was null or undefined when calling listComments.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling listComments.");
        var s = new n.HttpParams({
          encoder: new o
        });
        null != t && (s = s.set("language", t)), null != r && (s = s.set("clientId", r));
        var l = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var u = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          l = l.set("Authorization", "Bearer " + u)
        }
        var c = this.configuration.selectHeaderAccept(["application/json"]);
        null != c && (l = l.set("Accept", c));
        return this.httpClient.request("get", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/comments", {
          params: s,
          withCredentials: this.configuration.withCredentials,
          headers: l,
          observe: i,
          reportProgress: a
        })
      }, e.prototype.resolveComment = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter language was null or undefined when calling resolveComment.");
        if (null == t) throw new Error("Required parameter text was null or undefined when calling resolveComment.");
        if (null == r) throw new Error("Required parameter commentId was null or undefined when calling resolveComment.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != e && (u = u.set("language", e)), null != a && (u = u.set("clientId", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        var h = this.configuration.selectHeaderContentType(["application/json"]);
        return null != h && (c = c.set("Content-Type", h)), this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(t)) + "/comments/" + encodeURIComponent(String(r)) + "/resolved", {
          body: i,
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.testRules = function (e, t, r, i, a) {
        void 0 === i && (i = "body"), void 0 === a && (a = !1);
        var s = new n.HttpParams({
          encoder: new o
        });
        null != t && (s = s.set("examplesPerRule", t)), r && r.forEach((function (e) {
          s = s.append("clientIds", e)
        }));
        var l = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var u = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          l = l.set("Authorization", "Bearer " + u)
        }
        var c = this.configuration.selectHeaderAccept(["application/json"]);
        null != c && (l = l.set("Accept", c));
        var d = this.configuration.selectHeaderContentType(["application/json"]);
        return null != d && (l = l.set("Content-Type", d)), this.httpClient.request("put", this.basePath + "/rules/test", {
          body: e,
          params: s,
          withCredentials: this.configuration.withCredentials,
          headers: l,
          observe: i,
          reportProgress: a
        })
      }, e.prototype.updateAlternateSense = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling updateAlternateSense.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling updateAlternateSense.");
        if (null == r) throw new Error("Required parameter dependency was null or undefined when calling updateAlternateSense.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/alt_senses/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.updateAlternateSpelling = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling updateAlternateSpelling.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling updateAlternateSpelling.");
        if (null == r) throw new Error("Required parameter dependency was null or undefined when calling updateAlternateSpelling.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/alt_spellings/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.updateComment = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter language was null or undefined when calling updateComment.");
        if (null == t) throw new Error("Required parameter text was null or undefined when calling updateComment.");
        if (null == r) throw new Error("Required parameter commentId was null or undefined when calling updateComment.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != e && (u = u.set("language", e)), null != a && (u = u.set("clientId", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        var h = this.configuration.selectHeaderContentType(["application/json"]);
        return null != h && (c = c.set("Content-Type", h)), this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(t)) + "/comments/" + encodeURIComponent(String(r)), {
          body: i,
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.updateFlag = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling updateFlag.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling updateFlag.");
        if (null == r) throw new Error("Required parameter flag was null or undefined when calling updateFlag.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/flags/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.updateLeetMapping = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter text was null or undefined when calling updateLeetMapping.");
        if (null == t) throw new Error("Required parameter language was null or undefined when calling updateLeetMapping.");
        if (null == r) throw new Error("Required parameter dependency was null or undefined when calling updateLeetMapping.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != t && (u = u.set("language", t)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        return this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/leet_mappings/" + encodeURIComponent(String(r)), {
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.updateRule = function (e, t, r, i, a, s, l) {
        if (void 0 === s && (s = "body"), void 0 === l && (l = !1), null == e) throw new Error("Required parameter language was null or undefined when calling updateRule.");
        if (null == t) throw new Error("Required parameter text was null or undefined when calling updateRule.");
        var u = new n.HttpParams({
          encoder: new o
        });
        null != e && (u = u.set("language", e)), null != i && (u = u.set("clientId", i)), null != a && (u = u.set("publish", a));
        var c = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var d = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          c = c.set("Authorization", "Bearer " + d)
        }
        var p = this.configuration.selectHeaderAccept(["application/json"]);
        null != p && (c = c.set("Accept", p));
        var h = this.configuration.selectHeaderContentType(["application/json"]);
        return null != h && (c = c.set("Content-Type", h)), this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(t)), {
          body: r,
          params: u,
          withCredentials: this.configuration.withCredentials,
          headers: c,
          observe: s,
          reportProgress: l
        })
      }, e.prototype.updateRules = function (e, t, r, i) {
        void 0 === r && (r = "body"), void 0 === i && (i = !1);
        var a = new n.HttpParams({
          encoder: new o
        });
        null != t && (a = a.set("publish", t));
        var s = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var l = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          s = s.set("Authorization", "Bearer " + l)
        }
        var u = this.configuration.selectHeaderAccept(["application/json"]);
        null != u && (s = s.set("Accept", u));
        var c = this.configuration.selectHeaderContentType(["application/json"]);
        return null != c && (s = s.set("Content-Type", c)), this.httpClient.request("put", this.basePath + "/rules", {
          body: e,
          params: a,
          withCredentials: this.configuration.withCredentials,
          headers: s,
          observe: r,
          reportProgress: i
        })
      }, e.prototype.updateTopic = function (e, t, r, i, a, s, l, u) {
        if (void 0 === l && (l = "body"), void 0 === u && (u = !1), null == e) throw new Error("Required parameter language was null or undefined when calling updateTopic.");
        if (null == t) throw new Error("Required parameter text was null or undefined when calling updateTopic.");
        if (null == r) throw new Error("Required parameter topicId was null or undefined when calling updateTopic.");
        var c = new n.HttpParams({
          encoder: new o
        });
        null != e && (c = c.set("language", e)), null != a && (c = c.set("clientId", a)), null != s && (c = c.set("publish", s));
        var d = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var p = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          d = d.set("Authorization", "Bearer " + p)
        }
        var h = this.configuration.selectHeaderAccept(["application/json"]);
        null != h && (d = d.set("Accept", h));
        var f = this.configuration.selectHeaderContentType(["application/json"]);
        return null != f && (d = d.set("Content-Type", f)), this.httpClient.request("put", this.basePath + "/rules/text/" + encodeURIComponent(String(t)) + "/topic/" + encodeURIComponent(String(r)), {
          body: i,
          params: c,
          withCredentials: this.configuration.withCredentials,
          headers: d,
          observe: l,
          reportProgress: u
        })
      }, e.ɵfac = function (r) {
        return new(r || e)(t.ɵɵinject(n.HttpClient), t.ɵɵinject(a, 8), t.ɵɵinject(l, 8))
      }, e.ɵprov = t.ɵɵdefineInjectable({
        token: e,
        factory: e.ɵfac
      }), e
    }(),
    c = function () {
      function e(e, t, r) {
        this.httpClient = e, this.basePath = "https://virtserver.swaggerhub.com/twohat/rules/2.0.3", this.defaultHeaders = new n.HttpHeaders, this.configuration = new l, t && (this.basePath = t), r && (this.configuration = r, this.basePath = t || r.basePath || this.basePath)
      }
      return e.prototype.canConsumeForm = function (e) {
        var t, n;
        try {
          for (var r = i(e), o = r.next(); !o.done; o = r.next()) {
            if ("multipart/form-data" === o.value) return !0
          }
        } catch (e) {
          t = {
            error: e
          }
        } finally {
          try {
            o && !o.done && (n = r.return) && n.call(r)
          } finally {
            if (t) throw t.error
          }
        }
        return !1
      }, e.prototype.deleteRuleHistory = function (e, t, r, i, a) {
        if (void 0 === i && (i = "body"), void 0 === a && (a = !1), null == e) throw new Error("Required parameter text was null or undefined when calling deleteRuleHistory.");
        var l = new n.HttpParams({
          encoder: new o
        });
        t && t.forEach((function (e) {
          l = l.append("languages", e)
        })), r && (l = l.set("clientIds", r.join(s.csv)));
        var u = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var c = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          u = u.set("Authorization", "Bearer " + c)
        }
        var d = this.configuration.selectHeaderAccept(["application/json"]);
        null != d && (u = u.set("Accept", d));
        return this.httpClient.request("delete", this.basePath + "/rules/text/" + encodeURIComponent(String(e)) + "/changelog", {
          params: l,
          withCredentials: this.configuration.withCredentials,
          headers: u,
          observe: i,
          reportProgress: a
        })
      }, e.prototype.syncRules = function (e, t, r) {
        if (void 0 === t && (t = "body"), void 0 === r && (r = !1), null == e) throw new Error("Required parameter since was null or undefined when calling syncRules.");
        var i = new n.HttpParams({
          encoder: new o
        });
        null != e && (i = i.set("since", e));
        var a = this.defaultHeaders;
        if (this.configuration.accessToken) {
          var s = "function" == typeof this.configuration.accessToken ? this.configuration.accessToken() : this.configuration.accessToken;
          a = a.set("Authorization", "Bearer " + s)
        }
        var l = this.configuration.selectHeaderAccept(["application/json"]);
        null != l && (a = a.set("Accept", l));
        return this.httpClient.request("get", this.basePath + "/rules/sync", {
          params: i,
          withCredentials: this.configuration.withCredentials,
          headers: a,
          observe: t,
          reportProgress: r
        })
      }, e.ɵfac = function (r) {
        return new(r || e)(t.ɵɵinject(n.HttpClient), t.ɵɵinject(a, 8), t.ɵɵinject(l, 8))
      }, e.ɵprov = t.ɵɵdefineInjectable({
        token: e,
        factory: e.ɵfac
      }), e
    }(),
    d = [u, c];
  (e.ChangeLog || (e.ChangeLog = {})).ChangedEnum = {
    Topics: "topics",
    AltSpellings: "altSpellings",
    AltSenses: "altSenses",
    LeetMappings: "leetMappings",
    Flags: "flags",
    Tasks: "tasks",
    DELETED: "DELETED"
  };
  var p = function () {
    function e(e, t) {
      if (e) throw new Error("ApiModule is already loaded. Import in your base AppModule only.");
      if (!t) throw new Error("You need to import the HttpClientModule in your AppModule! \nSee also https://github.com/angular/angular/issues/20575")
    }
    return e.forRoot = function (t) {
      return {
        ngModule: e,
        providers: [{
          provide: l,
          useFactory: t
        }]
      }
    }, e.ɵmod = t.ɵɵdefineNgModule({
      type: e
    }), e.ɵinj = t.ɵɵdefineInjector({
      factory: function (r) {
        return new(r || e)(t.ɵɵinject(e, 12), t.ɵɵinject(n.HttpClient, 8))
      },
      providers: [u, c],
      imports: [
        []
      ]
    }), e
  }();
  e.APIS = d, e.ApiModule = p, e.BASE_PATH = a, e.COLLECTION_FORMATS = s, e.Configuration = l, e.DefaultService = u, e.Flag = {
    ENABLED: "ENABLED",
    DELETED: "DELETED",
    COMMON: "COMMON",
    WATCH: "WATCH",
    SKIP: "SKIP",
    PHRASERULE: "PHRASE_RULE",
    USERNAME: "USERNAME",
    FIRSTNAME: "FIRST_NAME",
    LASTNAME: "LAST_NAME",
    CITY: "CITY",
    STATE: "STATE",
    COUNTRY: "COUNTRY",
    EMAILADDRESS: "EMAIL_ADDRESS",
    DICT: "DICT",
    OBJ: "OBJ",
    GENERATED: "GENERATED",
    MODERATED: "MODERATED",
    WORD: "WORD",
    NOUN: "NOUN",
    VERB: "VERB",
    PRONOUN: "PRONOUN",
    ADJECTIVE: "ADJECTIVE",
    ADVERB: "ADVERB",
    CONJ: "CONJ",
    DET: "DET",
    INTER: "INTER",
    PROPERNOUN: "PROPER_NOUN",
    BIGRAM: "BIGRAM",
    NGRAM: "NGRAM",
    SIMPLIFIED: "SIMPLIFIED"
  }, e.SIFTADMINService = c, Object.defineProperty(e, "__esModule", {
    value: !0
  })
}));
//# sourceMappingURL=rules-swagger-client-src.umd.min.js.map
