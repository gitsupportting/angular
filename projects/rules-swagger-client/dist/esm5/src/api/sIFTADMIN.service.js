import {
  __values
} from "tslib";
/**
 * Rules
 * The filter works as a series of rules so that each word can be mapped to a rule.  So \"Happy\" can become \"happy\" and \"b4d\" and become \"bad\".    With this API you can manage your rules.
 *
 * OpenAPI spec version: 2.0.3
 * Contact: support@twohat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import {
  Inject,
  Injectable,
  Optional
} from '@angular/core';
import {
  HttpHeaders,
  HttpParams
} from '@angular/common/http';
import {
  CustomHttpUrlEncodingCodec
} from '../encoder';
import {
  BASE_PATH,
  COLLECTION_FORMATS
} from '../variables';
import {
  Configuration
} from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
var SIFTADMINService = /** @class */ (function () {
  function SIFTADMINService(httpClient, basePath, configuration) {
    this.httpClient = httpClient;
    this.basePath = 'https://virtserver.swaggerhub.com/twohat/rules/2.0.3';
    this.defaultHeaders = new HttpHeaders();
    this.configuration = new Configuration();
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }
  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  SIFTADMINService.prototype.canConsumeForm = function (consumes) {
    var e_1, _a;
    var form = 'multipart/form-data';
    try {
      for (var consumes_1 = __values(consumes), consumes_1_1 = consumes_1.next(); !consumes_1_1.done; consumes_1_1 = consumes_1.next()) {
        var consume = consumes_1_1.value;
        if (form === consume) {
          return true;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (consumes_1_1 && !consumes_1_1.done && (_a = consumes_1.return)) _a.call(consumes_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    return false;
  };
  SIFTADMINService.prototype.deleteRuleHistory = function (text, languages, clientIds, observe, reportProgress) {
    if (observe === void 0) {
      observe = 'body';
    }
    if (reportProgress === void 0) {
      reportProgress = false;
    }
    if (text === null || text === undefined) {
      throw new Error('Required parameter text was null or undefined when calling deleteRuleHistory.');
    }
    var queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (languages) {
      languages.forEach(function (element) {
        queryParameters = queryParameters.append('languages', element);
      });
    }
    if (clientIds) {
      queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));
    }
    var headers = this.defaultHeaders;
    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      var accessToken = typeof this.configuration.accessToken === 'function' ?
        this.configuration.accessToken() :
        this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    var httpHeaderAccepts = [
      'application/json'
    ];
    var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }
    // to determine the Content-Type header
    var consumes = [];
    return this.httpClient.request('delete', this.basePath + "/rules/text/" + encodeURIComponent(String(text)) + "/changelog", {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  };
  SIFTADMINService.prototype.syncRules = function (since, observe, reportProgress) {
    if (observe === void 0) {
      observe = 'body';
    }
    if (reportProgress === void 0) {
      reportProgress = false;
    }
    if (since === null || since === undefined) {
      throw new Error('Required parameter since was null or undefined when calling syncRules.');
    }
    var queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    });
    if (since !== undefined && since !== null) {
      queryParameters = queryParameters.set('since', since);
    }
    var headers = this.defaultHeaders;
    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      var accessToken = typeof this.configuration.accessToken === 'function' ?
        this.configuration.accessToken() :
        this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // to determine the Accept header
    var httpHeaderAccepts = [
      'application/json'
    ];
    var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }
    // to determine the Content-Type header
    var consumes = [];
    return this.httpClient.request('get', this.basePath + "/rules/sync", {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress
    });
  };
  SIFTADMINService.ɵfac = function SIFTADMINService_Factory(t) {
    return new(t || SIFTADMINService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(i2.Configuration, 8));
  };
  SIFTADMINService.ɵprov = i0.ɵɵdefineInjectable({
    token: SIFTADMINService,
    factory: SIFTADMINService.ɵfac
  });
  return SIFTADMINService;
}());
export {
  SIFTADMINService
};
/*@__PURE__*/
(function () {
  i0.ɵsetClassMetadata(SIFTADMINService, [{
    type: Injectable
  }], function () {
    return [{
      type: i1.HttpClient
    }, {
      type: undefined,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [BASE_PATH]
      }]
    }, {
      type: i2.Configuration,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
//# sourceMappingURL=data:application/json;base64,
