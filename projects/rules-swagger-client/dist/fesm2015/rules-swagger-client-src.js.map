{
  "version": 3,
  "file": "rules-swagger-client-src.js",
  "sources": ["ng://rules-swagger-client/src/encoder.ts", "ng://rules-swagger-client/src/variables.ts", "ng://rules-swagger-client/src/configuration.ts", "ng://rules-swagger-client/src/api/default.service.ts", "ng://rules-swagger-client/src/api/sIFTADMIN.service.ts", "ng://rules-swagger-client/src/api/api.ts", "ng://rules-swagger-client/src/model/changeLog.ts", "ng://rules-swagger-client/src/model/flag.ts", "ng://rules-swagger-client/src/api.module.ts", "ng://rules-swagger-client/src/rules-swagger-client-src.ts"],
  "sourcesContent": ["    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n", "import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n", "export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n", "/**\n * Rules\n * The filter works as a series of rules so that each word can be mapped to a rule.  So \\\"Happy\\\" can become \\\"happy\\\" and \\\"b4d\\\" and become \\\"bad\\\".    With this API you can manage your rules. \n *\n * OpenAPI spec version: 2.0.3\n * Contact: support@twohat.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { Ai } from '../model/ai';\nimport { Body } from '../model/body';\nimport { ChangeLog } from '../model/changeLog';\nimport { ClientId } from '../model/clientId';\nimport { Comment } from '../model/comment';\nimport { CommentInput } from '../model/commentInput';\nimport { ExampleDiff } from '../model/exampleDiff';\nimport { Flag } from '../model/flag';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { ModeratorId } from '../model/moderatorId';\nimport { Rule } from '../model/rule';\nimport { RuleText } from '../model/ruleText';\nimport { Timestamp } from '../model/timestamp';\nimport { Topics } from '../model/topics';\nimport { UpdateTopic } from '../model/updateTopic';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefaultService {\n\n    protected basePath = 'https://virtserver.swaggerhub.com/twohat/rules/2.0.3';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add a comment to this rule\n     * Comments are ways to leave a note to say why a person made the decision they did.  Or it could be a question or answer trying to get help on an item. \n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param text The text of the rule you want to work on\n     * @param body \n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addComment(language: string, text: string, body?: CommentInput, clientId?: number, observe?: 'body', reportProgress?: boolean): Observable<Comment>;\n    public addComment(language: string, text: string, body?: CommentInput, clientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comment>>;\n    public addComment(language: string, text: string, body?: CommentInput, clientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comment>>;\n    public addComment(language: string, text: string, body?: CommentInput, clientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling addComment.');\n        }\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling addComment.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Comment>('post',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/comments`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete an alternate sense for a rule\n     * This will delete an alternate sense for rule and log the change\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param dependency This is the related text you want to work on.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public deleteAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public deleteAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public deleteAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteAlternateSense.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling deleteAlternateSense.');\n        }\n\n        if (dependency === null || dependency === undefined) {\n            throw new Error('Required parameter dependency was null or undefined when calling deleteAlternateSense.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/alt_senses/${encodeURIComponent(String(dependency))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete an alternate spelling for a rule\n     * This will delete an alternate spelling for rule and log the change\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param dependency This is the related text you want to work on.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public deleteAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public deleteAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public deleteAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteAlternateSpelling.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling deleteAlternateSpelling.');\n        }\n\n        if (dependency === null || dependency === undefined) {\n            throw new Error('Required parameter dependency was null or undefined when calling deleteAlternateSpelling.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/alt_spellings/${encodeURIComponent(String(dependency))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a comment\n     * Remove a comment\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param commentId The unique identifier for the comment\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteComment(text: string, language: string, commentId: string, clientId?: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;\n    public deleteComment(text: string, language: string, commentId: string, clientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;\n    public deleteComment(text: string, language: string, commentId: string, clientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;\n    public deleteComment(text: string, language: string, commentId: string, clientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteComment.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling deleteComment.');\n        }\n\n        if (commentId === null || commentId === undefined) {\n            throw new Error('Required parameter commentId was null or undefined when calling deleteComment.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InlineResponse200>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/comments/${encodeURIComponent(String(commentId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete an flag for a rule\n     * This will delete a flag for rule and log the change\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param flag The name of the flag to change\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public deleteFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public deleteFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public deleteFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteFlag.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling deleteFlag.');\n        }\n\n        if (flag === null || flag === undefined) {\n            throw new Error('Required parameter flag was null or undefined when calling deleteFlag.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/flags/${encodeURIComponent(String(flag))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a leet mapping for a rule\n     * This will delete a leet mapping for rule and log the change\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param dependency This is the related text you want to work on.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public deleteLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public deleteLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public deleteLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteLeetMapping.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling deleteLeetMapping.');\n        }\n\n        if (dependency === null || dependency === undefined) {\n            throw new Error('Required parameter dependency was null or undefined when calling deleteLeetMapping.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/leet_mappings/${encodeURIComponent(String(dependency))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a rule\n     * This will delete a rule and log the change\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteRule(text: string, language: string, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteRule(text: string, language: string, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteRule(text: string, language: string, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteRule(text: string, language: string, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteRule.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling deleteRule.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a topic for a rule\n     * This will delete a topic for rule and log the change\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param topicId The topic is the id for topic.  See documentation on Topic for what the ids are\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteTopic(text: string, language: string, topicId: number, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public deleteTopic(text: string, language: string, topicId: number, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public deleteTopic(text: string, language: string, topicId: number, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public deleteTopic(text: string, language: string, topicId: number, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteTopic.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling deleteTopic.');\n        }\n\n        if (topicId === null || topicId === undefined) {\n            throw new Error('Required parameter topicId was null or undefined when calling deleteTopic.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/topic/${encodeURIComponent(String(topicId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get rules that match this prefix\n     * Used for autocomplete so you can add alternate senses and fill out the rule \n     * @param prefix The term you want to search for\n     * @param clientIds Show results for a several given clients.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param languages Which languages does this apply to\n     * @param limit Limit the number of results\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAutocomplete(prefix: string, clientIds?: Array<ClientId>, languages?: Array<string>, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RuleText>>;\n    public getAutocomplete(prefix: string, clientIds?: Array<ClientId>, languages?: Array<string>, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RuleText>>>;\n    public getAutocomplete(prefix: string, clientIds?: Array<ClientId>, languages?: Array<string>, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RuleText>>>;\n    public getAutocomplete(prefix: string, clientIds?: Array<ClientId>, languages?: Array<string>, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (prefix === null || prefix === undefined) {\n            throw new Error('Required parameter prefix was null or undefined when calling getAutocomplete.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (clientIds) {\n            clientIds.forEach((element) => {\n                queryParameters = queryParameters.append('clientIds', <any>element);\n            })\n        }\n        if (languages) {\n            languages.forEach((element) => {\n                queryParameters = queryParameters.append('languages', <any>element);\n            })\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<RuleText>>('get',`${this.basePath}/rules/autocomplete/${encodeURIComponent(String(prefix))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a comment\n     * Get a comment by Id for this item\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param commentId The unique identifier for the comment\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getComment(text: string, language: string, commentId: string, clientId?: number, observe?: 'body', reportProgress?: boolean): Observable<Comment>;\n    public getComment(text: string, language: string, commentId: string, clientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comment>>;\n    public getComment(text: string, language: string, commentId: string, clientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comment>>;\n    public getComment(text: string, language: string, commentId: string, clientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling getComment.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling getComment.');\n        }\n\n        if (commentId === null || commentId === undefined) {\n            throw new Error('Required parameter commentId was null or undefined when calling getComment.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Comment>('get',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/comments/${encodeURIComponent(String(commentId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Lookup a specific rule\n     * This will get the specific rule in JSON format\n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRule(text: string, language: string, clientId?: number, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public getRule(text: string, language: string, clientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public getRule(text: string, language: string, clientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public getRule(text: string, language: string, clientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling getRule.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling getRule.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('get',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a list of all changes on this rule\n     * This will get the full changelog of all changes made to a rule for all clients and languages you are authorized to view. \n     * @param text The text of the rule you want to work on\n     * @param languages Which languages does this apply to\n     * @param clientIds Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to. You can set this to -1 to apply to all clients you have access to.\n     * @param limit Limit the number of results\n     * @param offset Start the search from offset 0.  For instance if your using pagination page 2 would be on totalItemsPerPage*pageNum. \n     * @param refresh Should the database be refreshed to make sure all the rows are updated before calling.    Don&#x27;t do this in production as you will get latency spike and it may not even be turned on for production Used primarily for integration tests. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, limit?: number, offset?: number, refresh?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<ChangeLog>>;\n    public getRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, limit?: number, offset?: number, refresh?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChangeLog>>>;\n    public getRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, limit?: number, offset?: number, refresh?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChangeLog>>>;\n    public getRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, limit?: number, offset?: number, refresh?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling getRuleHistory.');\n        }\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (languages) {\n            languages.forEach((element) => {\n                queryParameters = queryParameters.append('languages', <any>element);\n            })\n        }\n        if (clientIds) {\n            queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (refresh !== undefined && refresh !== null) {\n            queryParameters = queryParameters.set('refresh', <any>refresh);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<ChangeLog>>('get',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/changelog`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Search for rules\n     * Will get all the rules you have created in the system. For Enterprise Plus clients with a specific confidentiality agreement you may also have the option to review the Sift rules as well. \n     * @param ai Show items the AI predicts as useful because moderators in the past have taken an action on this items.  Passing an array of objects as params can be tricky at first so here is an example &amp;ai[0][minPrediction]&#x3D;0.50&amp;ai[0][modelName]&#x3D;topic_vulgar&amp;ai[0][maxPrediction]&#x3D;0.95&amp;ai[1][minPrediction]&#x3D;0.10&amp;ai[1][modelName]&#x3D;topic_fraud&amp;ai[1][maxPrediction]&#x3D;0.80  In urlencoded form that would be &amp;ai%5B0%5D%5BminPrediction%5D&#x3D;0.50&amp;ai%5B0%5D%5BmodelName%5D&#x3D;topic_vulgar&amp;ai%5B0%5D%5BmaxPrediction%5D&#x3D;0.95&amp;ai%5B1%5D%5BminPrediction%5D&#x3D;0.10&amp;ai%5B1%5D%5BmodelName%5D&#x3D;topic_fraud&amp;ai%5B1%5D%5BmaxPrediction%5D&#x3D;0.80 \n     * @param doneByModeratorId Only show work done by this moderatorId\n     * @param clientIds Show results for a several given clients.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param endDate Show results occurring before the given date in unixtimestamp (milliseconds since Epoch)\n     * @param startDate Show results occurring after the given date in unixtimestamp (milliseconds since Epoch)\n     * @param lastChangedStartDate Show results where there was a change between given date in unixtimestamp (milliseconds since Epoch)\n     * @param lastChangedEndDate Show results where there was a change between given date in unixtimestamp (milliseconds since Epoch)\n     * @param deleted Show deleted items\n     * @param publishedStartDate Show results where there was a change between given date in unixtimestamp (milliseconds since Epoch)\n     * @param publishedEndDate Show results where there was a change between given date in unixtimestamp (milliseconds since Epoch)\n     * @param languages Which languages does this apply to\n     * @param limit Limit the number of results\n     * @param offset Start the search from offset 0.  For instance if your using pagination page 2 would be on totalItemsPerPage*pageNum. \n     * @param altSense Has this word as an alternate sense\n     * @param altSpelling Has this word as an alternate spelling\n     * @param leetMapping Has this word as a leet mapping\n     * @param taskId Is associated with a taskId for doing work\n     * @param tags Only find items matching a certain tag\n     * @param text Text search.  This uses fuzzy matching.\n     * @param topics Only show items for these topics (topicId) between risk level minRisk and maxRisk\n     * @param unresolvedComments Will see if there are any unresolved comments for you and show only those\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getRules(ai?: Array<Ai>, doneByModeratorId?: ModeratorId, clientIds?: Array<ClientId>, endDate?: number, startDate?: number, lastChangedStartDate?: Timestamp, lastChangedEndDate?: Timestamp, deleted?: boolean, publishedStartDate?: Timestamp, publishedEndDate?: Timestamp, languages?: Array<string>, limit?: number, offset?: number, altSense?: string, altSpelling?: string, leetMapping?: string, taskId?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Rule>>;\n    public getRules(ai?: Array<Ai>, doneByModeratorId?: ModeratorId, clientIds?: Array<ClientId>, endDate?: number, startDate?: number, lastChangedStartDate?: Timestamp, lastChangedEndDate?: Timestamp, deleted?: boolean, publishedStartDate?: Timestamp, publishedEndDate?: Timestamp, languages?: Array<string>, limit?: number, offset?: number, altSense?: string, altSpelling?: string, leetMapping?: string, taskId?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Rule>>>;\n    public getRules(ai?: Array<Ai>, doneByModeratorId?: ModeratorId, clientIds?: Array<ClientId>, endDate?: number, startDate?: number, lastChangedStartDate?: Timestamp, lastChangedEndDate?: Timestamp, deleted?: boolean, publishedStartDate?: Timestamp, publishedEndDate?: Timestamp, languages?: Array<string>, limit?: number, offset?: number, altSense?: string, altSpelling?: string, leetMapping?: string, taskId?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Rule>>>;\n    public getRules(ai?: Array<Ai>, doneByModeratorId?: ModeratorId, clientIds?: Array<ClientId>, endDate?: number, startDate?: number, lastChangedStartDate?: Timestamp, lastChangedEndDate?: Timestamp, deleted?: boolean, publishedStartDate?: Timestamp, publishedEndDate?: Timestamp, languages?: Array<string>, limit?: number, offset?: number, altSense?: string, altSpelling?: string, leetMapping?: string, taskId?: string, tags?: Array<string>, text?: string, topics?: Array<Topics>, unresolvedComments?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (ai) {\n            ai.forEach((element) => {\n                queryParameters = queryParameters.append('ai', <any>element);\n            })\n        }\n        if (doneByModeratorId !== undefined && doneByModeratorId !== null) {\n            queryParameters = queryParameters.set('doneByModeratorId', <any>doneByModeratorId);\n        }\n        if (clientIds) {\n            clientIds.forEach((element) => {\n                queryParameters = queryParameters.append('clientIds', <any>element);\n            })\n        }\n        if (endDate !== undefined && endDate !== null) {\n            queryParameters = queryParameters.set('endDate', <any>endDate);\n        }\n        if (startDate !== undefined && startDate !== null) {\n            queryParameters = queryParameters.set('startDate', <any>startDate);\n        }\n        if (lastChangedStartDate !== undefined && lastChangedStartDate !== null) {\n            queryParameters = queryParameters.set('lastChangedStartDate', <any>lastChangedStartDate);\n        }\n        if (lastChangedEndDate !== undefined && lastChangedEndDate !== null) {\n            queryParameters = queryParameters.set('lastChangedEndDate', <any>lastChangedEndDate);\n        }\n        if (deleted !== undefined && deleted !== null) {\n            queryParameters = queryParameters.set('deleted', <any>deleted);\n        }\n        if (publishedStartDate !== undefined && publishedStartDate !== null) {\n            queryParameters = queryParameters.set('publishedStartDate', <any>publishedStartDate);\n        }\n        if (publishedEndDate !== undefined && publishedEndDate !== null) {\n            queryParameters = queryParameters.set('publishedEndDate', <any>publishedEndDate);\n        }\n        if (languages) {\n            languages.forEach((element) => {\n                queryParameters = queryParameters.append('languages', <any>element);\n            })\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (altSense !== undefined && altSense !== null) {\n            queryParameters = queryParameters.set('altSense', <any>altSense);\n        }\n        if (altSpelling !== undefined && altSpelling !== null) {\n            queryParameters = queryParameters.set('altSpelling', <any>altSpelling);\n        }\n        if (leetMapping !== undefined && leetMapping !== null) {\n            queryParameters = queryParameters.set('leetMapping', <any>leetMapping);\n        }\n        if (taskId !== undefined && taskId !== null) {\n            queryParameters = queryParameters.set('taskId', <any>taskId);\n        }\n        if (tags) {\n            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['csv']));\n        }\n        if (text !== undefined && text !== null) {\n            queryParameters = queryParameters.set('text', <any>text);\n        }\n        if (topics) {\n            topics.forEach((element) => {\n                queryParameters = queryParameters.append('topics', <any>element);\n            })\n        }\n        if (unresolvedComments !== undefined && unresolvedComments !== null) {\n            queryParameters = queryParameters.set('unresolvedComments', <any>unresolvedComments);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Rule>>('get',`${this.basePath}/rules`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List comments on this content item\n     * \n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public listComments(text: string, language: string, clientId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Comment>>;\n    public listComments(text: string, language: string, clientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comment>>>;\n    public listComments(text: string, language: string, clientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comment>>>;\n    public listComments(text: string, language: string, clientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling listComments.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling listComments.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<Comment>>('get',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/comments`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Mark a comment as resolved (or reopen)\n     * Comments can be marked as needing to be answered. \n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param text The text of the rule you want to work on\n     * @param commentId The unique identifier for the comment\n     * @param body \n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resolveComment(language: string, text: string, commentId: string, body?: Body, clientId?: number, observe?: 'body', reportProgress?: boolean): Observable<Comment>;\n    public resolveComment(language: string, text: string, commentId: string, body?: Body, clientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comment>>;\n    public resolveComment(language: string, text: string, commentId: string, body?: Body, clientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comment>>;\n    public resolveComment(language: string, text: string, commentId: string, body?: Body, clientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling resolveComment.');\n        }\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling resolveComment.');\n        }\n\n        if (commentId === null || commentId === undefined) {\n            throw new Error('Required parameter commentId was null or undefined when calling resolveComment.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Comment>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/comments/${encodeURIComponent(String(commentId))}/resolved`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Test the impact if you where to upload a rule\n     * This will add the rules temporarily in a sandbox environment look for examples of text that might be impacted and send it to the classifier. If the rules contains {{smart_rules}} then it will find all the words in those smart_rules and pull examples with them It will compare the old answer and the new answer and output a list of phrases that are different.  The clientIds param lets you choose which clients to get examples from.  \n     * @param body \n     * @param examplesPerRule how many examples should we get per rule or smart_rule part\n     * @param clientIds Show results for a several given clients.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public testRules(body?: Array<Rule>, examplesPerRule?: number, clientIds?: Array<ClientId>, observe?: 'body', reportProgress?: boolean): Observable<Array<ExampleDiff>>;\n    public testRules(body?: Array<Rule>, examplesPerRule?: number, clientIds?: Array<ClientId>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ExampleDiff>>>;\n    public testRules(body?: Array<Rule>, examplesPerRule?: number, clientIds?: Array<ClientId>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ExampleDiff>>>;\n    public testRules(body?: Array<Rule>, examplesPerRule?: number, clientIds?: Array<ClientId>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (examplesPerRule !== undefined && examplesPerRule !== null) {\n            queryParameters = queryParameters.set('examplesPerRule', <any>examplesPerRule);\n        }\n        if (clientIds) {\n            clientIds.forEach((element) => {\n                queryParameters = queryParameters.append('clientIds', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Array<ExampleDiff>>('put',`${this.basePath}/rules/test`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update the current alternate sense (or add if does not exist) with this value.\n     * This will update an alternate spelling for a rule and log the change  Alternate senses will replace this word with another word SOMETIMES.  You can have more than one alt sense and it will choose the best one based on context or the higher risk one if they are tied. Typically alternate senses are tied to smart rules like {{first_name}} \n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param dependency This is the related text you want to work on.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public updateAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public updateAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public updateAlternateSense(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling updateAlternateSense.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling updateAlternateSense.');\n        }\n\n        if (dependency === null || dependency === undefined) {\n            throw new Error('Required parameter dependency was null or undefined when calling updateAlternateSense.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/alt_senses/${encodeURIComponent(String(dependency))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update the current alternate spelling (or add if does not exist) with this value.\n     * This will update an alternate spelling for a rule and log the change  Alternate spellings will replace this word with another word EVERY TIME.  You can have more than one alt spelling and it will choose the best one based on context or the higher risk one if they are tied. \n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param dependency This is the related text you want to work on.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public updateAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public updateAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public updateAlternateSpelling(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling updateAlternateSpelling.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling updateAlternateSpelling.');\n        }\n\n        if (dependency === null || dependency === undefined) {\n            throw new Error('Required parameter dependency was null or undefined when calling updateAlternateSpelling.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/alt_spellings/${encodeURIComponent(String(dependency))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update a comment\n     * Comments are ways to leave a note to say why a person made the decision they did.  Or it could be a question or answer trying to get help on an item. \n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param text The text of the rule you want to work on\n     * @param commentId The unique identifier for the comment\n     * @param body \n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateComment(language: string, text: string, commentId: string, body?: Comment, clientId?: number, observe?: 'body', reportProgress?: boolean): Observable<Comment>;\n    public updateComment(language: string, text: string, commentId: string, body?: Comment, clientId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comment>>;\n    public updateComment(language: string, text: string, commentId: string, body?: Comment, clientId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comment>>;\n    public updateComment(language: string, text: string, commentId: string, body?: Comment, clientId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling updateComment.');\n        }\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling updateComment.');\n        }\n\n        if (commentId === null || commentId === undefined) {\n            throw new Error('Required parameter commentId was null or undefined when calling updateComment.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Comment>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/comments/${encodeURIComponent(String(commentId))}`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update the a flag associated (or add if does not exist) with this value.\n     * This will update a flag with this rule  These are a series of special attributes you can add to an item. For instance if you add FIRST_NAME flag it will automatically add an alt_sense of {{first_name}} and add other logic interally to treat it as potential PII \n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param flag The name of the flag to change\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public updateFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public updateFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public updateFlag(text: string, language: string, flag: Flag, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling updateFlag.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling updateFlag.');\n        }\n\n        if (flag === null || flag === undefined) {\n            throw new Error('Required parameter flag was null or undefined when calling updateFlag.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/flags/${encodeURIComponent(String(flag))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update the current leet mapping associated (or add if does not exist) with this value.\n     * This will update a leet mapping with this rule  In many cases letters like ߎ or ⌰ could be used instead of u  You can map those other letters to u and the system will see if it results in a known word when doing so. \n     * @param text The text of the rule you want to work on\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param dependency This is the related text you want to work on.\n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public updateLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public updateLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public updateLeetMapping(text: string, language: string, dependency: RuleText, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling updateLeetMapping.');\n        }\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling updateLeetMapping.');\n        }\n\n        if (dependency === null || dependency === undefined) {\n            throw new Error('Required parameter dependency was null or undefined when calling updateLeetMapping.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Rule>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/leet_mappings/${encodeURIComponent(String(dependency))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update the current rule\n     * This will update the current rule to the following\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param text The text of the rule you want to work on\n     * @param body \n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateRule(language: string, text: string, body?: Rule, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public updateRule(language: string, text: string, body?: Rule, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public updateRule(language: string, text: string, body?: Rule, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public updateRule(language: string, text: string, body?: Rule, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling updateRule.');\n        }\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling updateRule.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Rule>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Insert/Update rules in the system\n     * This will update a rule and log the change\n     * @param body \n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateRules(body?: Array<Rule>, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;\n    public updateRules(body?: Array<Rule>, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;\n    public updateRules(body?: Array<Rule>, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;\n    public updateRules(body?: Array<Rule>, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<InlineResponse200>('put',`${this.basePath}/rules`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update the current topic (or add if does not exist) with this value.\n     * This will update a topic for a rule and log the change\n     * @param language Show results for the given language only.   This is the language used, could have been set by the user or detected by language id.\n     * @param text The text of the rule you want to work on\n     * @param topicId The topic is the id for topic.  See documentation on Topic for what the ids are\n     * @param body \n     * @param clientId Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to.\n     * @param publish This will also make the rule live\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateTopic(language: string, text: string, topicId: number, body?: UpdateTopic, clientId?: number, publish?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Rule>;\n    public updateTopic(language: string, text: string, topicId: number, body?: UpdateTopic, clientId?: number, publish?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Rule>>;\n    public updateTopic(language: string, text: string, topicId: number, body?: UpdateTopic, clientId?: number, publish?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Rule>>;\n    public updateTopic(language: string, text: string, topicId: number, body?: UpdateTopic, clientId?: number, publish?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (language === null || language === undefined) {\n            throw new Error('Required parameter language was null or undefined when calling updateTopic.');\n        }\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling updateTopic.');\n        }\n\n        if (topicId === null || topicId === undefined) {\n            throw new Error('Required parameter topicId was null or undefined when calling updateTopic.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (language !== undefined && language !== null) {\n            queryParameters = queryParameters.set('language', <any>language);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('clientId', <any>clientId);\n        }\n        if (publish !== undefined && publish !== null) {\n            queryParameters = queryParameters.set('publish', <any>publish);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.request<Rule>('put',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/topic/${encodeURIComponent(String(topicId))}`,\n            {\n                body: body,\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n", "/**\n * Rules\n * The filter works as a series of rules so that each word can be mapped to a rule.  So \\\"Happy\\\" can become \\\"happy\\\" and \\\"b4d\\\" and become \\\"bad\\\".    With this API you can manage your rules. \n *\n * OpenAPI spec version: 2.0.3\n * Contact: support@twohat.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { ChangeLog } from '../model/changeLog';\nimport { InlineResponse200 } from '../model/inlineResponse200';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class SIFTADMINService {\n\n    protected basePath = 'https://virtserver.swaggerhub.com/twohat/rules/2.0.3';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete rule history\n     * Will remove all the history items for a rule.  Used for integration tests to reset the state. \n     * @param text The text of the rule you want to work on\n     * @param languages Which languages does this apply to\n     * @param clientIds Show results for a given client.  Typically this is set for you by the internal system based on the API_KEY you are using.  However some clients are allowed to view other clients such as when they have a sandbox or when they are a large enterprise and have multiple clients they manage.  It will only allow you to view client data you have access to. You can set this to -1 to apply to all clients you have access to.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<ChangeLog>>;\n    public deleteRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ChangeLog>>>;\n    public deleteRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ChangeLog>>>;\n    public deleteRuleHistory(text: string, languages?: Array<string>, clientIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (text === null || text === undefined) {\n            throw new Error('Required parameter text was null or undefined when calling deleteRuleHistory.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (languages) {\n            languages.forEach((element) => {\n                queryParameters = queryParameters.append('languages', <any>element);\n            })\n        }\n        if (clientIds) {\n            queryParameters = queryParameters.set('clientIds', clientIds.join(COLLECTION_FORMATS['csv']));\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<Array<ChangeLog>>('delete',`${this.basePath}/rules/text/${encodeURIComponent(String(text))}/changelog`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Sync the rules from V1 to V2\n     * \n     * @param since Update rules changed since a given date in unixtimestamp (milliseconds since Epoch)  -1 &#x3D; since the last time the command was run    0 &#x3D; reload all rules   \\\\&gt;1 &#x3D; since this timestamp \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public syncRules(since: number, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;\n    public syncRules(since: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;\n    public syncRules(since: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;\n    public syncRules(since: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (since === null || since === undefined) {\n            throw new Error('Required parameter since was null or undefined when calling syncRules.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (since !== undefined && since !== null) {\n            queryParameters = queryParameters.set('since', <any>since);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (bearerAuth) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InlineResponse200>('get',`${this.basePath}/rules/sync`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n", "export * from './default.service';\nimport { DefaultService } from './default.service';\nexport * from './sIFTADMIN.service';\nimport { SIFTADMINService } from './sIFTADMIN.service';\nexport const APIS = [DefaultService, SIFTADMINService];\n", "/**\n * Rules\n * The filter works as a series of rules so that each word can be mapped to a rule.  So \\\"Happy\\\" can become \\\"happy\\\" and \\\"b4d\\\" and become \\\"bad\\\".    With this API you can manage your rules. \n *\n * OpenAPI spec version: 2.0.3\n * Contact: support@twohat.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { ClientId } from './clientId';\nimport { LanguageCode } from './languageCode';\nimport { ModeratorId } from './moderatorId';\nimport { Rule } from './rule';\nimport { RuleText } from './ruleText';\nimport { Timestamp } from './timestamp';\n\n/**\n * A record of when a rule was changed \n */\nexport interface ChangeLog { \n    text: RuleText;\n    language: LanguageCode;\n    clientId: ClientId;\n    /**\n     * If a script was used to update this rule give the name of the script here\n     */\n    scriptName?: string;\n    moderatorId?: ModeratorId;\n    changeDate: Timestamp;\n    /**\n     * helpful description of the reason\n     */\n    description?: string;\n    changed?: Array<ChangeLog.ChangedEnum>;\n    oldVersion?: Rule;\n    newVersion: Rule;\n}\nexport namespace ChangeLog {\n    export type ChangedEnum = 'topics' | 'altSpellings' | 'altSenses' | 'leetMappings' | 'flags' | 'tasks' | 'DELETED';\n    export const ChangedEnum = {\n        Topics: 'topics' as ChangedEnum,\n        AltSpellings: 'altSpellings' as ChangedEnum,\n        AltSenses: 'altSenses' as ChangedEnum,\n        LeetMappings: 'leetMappings' as ChangedEnum,\n        Flags: 'flags' as ChangedEnum,\n        Tasks: 'tasks' as ChangedEnum,\n        DELETED: 'DELETED' as ChangedEnum\n    };\n}", "/**\n * Rules\n * The filter works as a series of rules so that each word can be mapped to a rule.  So \\\"Happy\\\" can become \\\"happy\\\" and \\\"b4d\\\" and become \\\"bad\\\".    With this API you can manage your rules. \n *\n * OpenAPI spec version: 2.0.3\n * Contact: support@twohat.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n/**\n * What kind of flag is it  You must have ENABLED if you want it to be active, without it it is a disabled rule  Everything from DICT and below is being deprecated \n */\nexport type Flag = 'ENABLED' | 'DELETED' | 'COMMON' | 'WATCH' | 'SKIP' | 'PHRASE_RULE' | 'USERNAME' | 'FIRST_NAME' | 'LAST_NAME' | 'CITY' | 'STATE' | 'COUNTRY' | 'EMAIL_ADDRESS' | 'DICT' | 'OBJ' | 'GENERATED' | 'MODERATED' | 'WORD' | 'NOUN' | 'VERB' | 'PRONOUN' | 'ADJECTIVE' | 'ADVERB' | 'CONJ' | 'DET' | 'INTER' | 'PROPER_NOUN' | 'BIGRAM' | 'NGRAM' | 'SIMPLIFIED';\n\nexport const Flag = {\n    ENABLED: 'ENABLED' as Flag,\n    DELETED: 'DELETED' as Flag,\n    COMMON: 'COMMON' as Flag,\n    WATCH: 'WATCH' as Flag,\n    SKIP: 'SKIP' as Flag,\n    PHRASERULE: 'PHRASE_RULE' as Flag,\n    USERNAME: 'USERNAME' as Flag,\n    FIRSTNAME: 'FIRST_NAME' as Flag,\n    LASTNAME: 'LAST_NAME' as Flag,\n    CITY: 'CITY' as Flag,\n    STATE: 'STATE' as Flag,\n    COUNTRY: 'COUNTRY' as Flag,\n    EMAILADDRESS: 'EMAIL_ADDRESS' as Flag,\n    DICT: 'DICT' as Flag,\n    OBJ: 'OBJ' as Flag,\n    GENERATED: 'GENERATED' as Flag,\n    MODERATED: 'MODERATED' as Flag,\n    WORD: 'WORD' as Flag,\n    NOUN: 'NOUN' as Flag,\n    VERB: 'VERB' as Flag,\n    PRONOUN: 'PRONOUN' as Flag,\n    ADJECTIVE: 'ADJECTIVE' as Flag,\n    ADVERB: 'ADVERB' as Flag,\n    CONJ: 'CONJ' as Flag,\n    DET: 'DET' as Flag,\n    INTER: 'INTER' as Flag,\n    PROPERNOUN: 'PROPER_NOUN' as Flag,\n    BIGRAM: 'BIGRAM' as Flag,\n    NGRAM: 'NGRAM' as Flag,\n    SIMPLIFIED: 'SIMPLIFIED' as Flag\n};", "import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\nimport { SIFTADMINService } from './api/sIFTADMIN.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService,\n    SIFTADMINService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n", "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],
  "names": [],
  "mappings": "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"
}
